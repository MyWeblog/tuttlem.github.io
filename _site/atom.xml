<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Cogs and Levers</title>
 <link href="http://tuttlem.github.io/atom.xml" rel="self"/>
 <link href="http://tuttlem.github.io/"/>
 <updated>2014-06-11T22:53:50+10:00</updated>
 <id>http://tuttlem.github.io</id>
 <author>
   <name>Michael Tuttle</name>
   <email></email>
 </author>

 
 <entry>
   <title>Assembly Syntax Intel At T</title>
   <link href="http://tuttlem.github.io/2014/03/25/assembly-syntax-intel-at-t/"/>
   <updated>2014-03-25T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/03/25/assembly-syntax-intel-at-t</id>
   <content type="html">&lt;p&gt;This post is just a little cheat sheet for myself on Intel &amp;amp; AT&amp;amp;T syntax.&lt;/p&gt;

&lt;p&gt;A useful table mapping some simple instructions between the two syntaxes linked through from the &lt;a href=&quot;http://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html#s3&quot;&gt;GCC-Inline-Assembly-HOWTO&lt;/a&gt;:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Intel Code&lt;/th&gt;
&lt;th&gt;AT&amp;amp;T Code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mov     eax,1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;movl    $1,%eax&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mov     ebx,0ffh&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;movl    $0xff,%ebx&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int     80h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int     $0x80&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mov     ebx, eax&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;movl    %eax, %ebx&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mov     eax,[ecx]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;movl    (%ecx),%eax&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mov     eax,[ebx+3]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;movl    3(%ebx),%eax&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mov     eax,[ebx+20h]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;movl    0x20(%ebx),%eax&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;add     eax,[ebx+ecx*2h]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;addl    (%ebx,%ecx,0x2),%eax&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lea     eax,[ebx+ecx]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;leal    (%ebx,%ecx),%eax&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sub     eax,[ebx+ecx*4h-20h]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;subl    -0x20(%ebx,%ecx,0x4),%eax&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Some important points to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Source and destinations are flipped in opcodes.

&lt;ul&gt;
&lt;li&gt;Intel is dest, src&lt;/li&gt;
&lt;li&gt;AT&amp;amp;T is src, dest&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AT&amp;amp;T decorates registers and immediates

&lt;ul&gt;
&lt;li&gt;Registers are prefixed with a &amp;quot;%&amp;quot;&lt;/li&gt;
&lt;li&gt;Immediates are prefixed with a &amp;quot;$&amp;quot;. This applies to variables being passed in from C (when you&amp;#39;re inline).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Intel decorates memory operands to denote the operand&amp;#39;s size, AT&amp;amp;T uses different mnemonics to accomplish the same.&lt;/li&gt;
&lt;li&gt;Intel syntax to dereference a memory location is &amp;quot;[ ]&amp;quot;. AT&amp;amp;T uses &amp;quot;( )&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>xargs -i</title>
   <link href="http://tuttlem.github.io/2014/03/24/xargs-i/"/>
   <updated>2014-03-24T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/03/24/xargs-i</id>
   <content type="html">&lt;p&gt;This post is a just a tid-bit for the use of &lt;a href=&quot;http://en.wikipedia.org/wiki/Xargs&quot;&gt;xargs&lt;/a&gt; in &lt;a href=&quot;http://en.wikipedia.org/wiki/Bash_(Unix_shell)&quot;&gt;bash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you can get a list of work to do from a file or stream, you can pipe these into &lt;code&gt;xargs&lt;/code&gt; to do further work. An example of this, I&amp;#39;ve taken from &lt;a href=&quot;http://www.cyberciti.biz/faq/linux-unix-bsd-xargs-construct-argument-lists-utility/&quot;&gt;here&lt;/a&gt;. This will find all of the *.bak in or below the current directory and delete them.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;find . -name &lt;span class=&quot;s2&quot;&gt;&amp;quot;*.bak&amp;quot;&lt;/span&gt; -type f -print &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; xargs /bin/rm -f&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Extending the usage of &lt;code&gt;xargs&lt;/code&gt; to incorporate the &lt;code&gt;-i&lt;/code&gt; switch, you can replace &amp;quot;{}&amp;quot; with the line of text read in the preprended command.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;cat url_endings &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; xargs -i wget &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://somewhere.com&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this command, it&amp;#39;s expected that the file &amp;quot;url_endings&amp;quot; would be data that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;/files/first
/files/second
/files/third
etc . .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A Quick Lap with MVar</title>
   <link href="http://tuttlem.github.io/2014/03/19/a-quick-lap-with-mvar/"/>
   <updated>2014-03-19T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/03/19/a-quick-lap-with-mvar</id>
   <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Concurrent programming is hard. It&amp;#39;s made a lot easier with good tools and MVar is one of them. MVars is just a location for a value. It can contain a value or contain nothing and the API will block accordingly, providing a safe concurrent programming environment for mutable state.&lt;/p&gt;

&lt;p&gt;From the Hackage page for &lt;code&gt;Control.Concurrent.MVar&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An MVar t is mutable location that is either empty or contains a value of type t. It has two fundamental operations: putMVar which fills an MVar if it is empty and blocks otherwise, and takeMVar which empties an MVar if it is full and blocks otherwise. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;key-points&quot;&gt;Key Points&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;newEmptyMVar&lt;/code&gt; creates an MVar that has no value to begin with&lt;/li&gt;
&lt;li&gt;&lt;code&gt;newMVar&lt;/code&gt; creates an MVar that has an initial value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;takeMVar&lt;/code&gt; returns the current value of the MVar. It&amp;#39;ll block until the MVar contains a value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;putMVar&lt;/code&gt; puts a value into the MVar. It&amp;#39;ll block until the MVar doesn&amp;#39;t contain a value&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;an-example&quot;&gt;An Example&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Concurrent&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Concurrent.MVar&lt;/span&gt;
 
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- create an empty mvar&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newEmptyMVar&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- get another thread to put a value in it&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;forkIO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;putMVar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;A value&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- take the value&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;takeMVar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A Quick Lap with Lens</title>
   <link href="http://tuttlem.github.io/2014/03/19/a-quick-lap-with-lens/"/>
   <updated>2014-03-19T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/03/19/a-quick-lap-with-lens</id>
   <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;When working with complex data structures in Haskell, burying down to observe a piece of information can be tedious. The &lt;a href=&quot;http://hackage.haskell.org/package/lens-4.0.7/docs/Control-Lens.html&quot;&gt;Lens library&lt;/a&gt; has been created to ease this problem. From the &lt;a href=&quot;https://github.com/ekmett/lens/wiki/Overview&quot;&gt;Lens wiki page&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lenses are composable functional references. They allow you to access and modify data potentially very deep within a structure! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Lens library allows you to interact with your data structures in a composable manner, making your code easier to understand - and more fun to write.&lt;/p&gt;

&lt;h3 id=&quot;key-points&quot;&gt;Key Points&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Whilst there are a lot of different functions, &lt;code&gt;(^.)&lt;/code&gt; allows you to get some data and &lt;code&gt;(.~)&lt;/code&gt; allows you to set some data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;makeLenses&lt;/code&gt; is what does all the magic of creating your accessors&lt;/li&gt;
&lt;li&gt;I haven&amp;#39;t found anywhere that specifically says this, but it seems that your fields in a record structure need to be preceded with an underscore&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;an-example&quot;&gt;An Example&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;cm&quot;&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/span&gt;
 
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Lens&lt;/span&gt;
 
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ball&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ball&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_position&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_velocity&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;-- create the accessors for the Ball type&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;makeLenses&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;&amp;#39;&amp;#39;Ball&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;-- | Animates a ball&amp;#39;s position with respect to a timestep.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Takes a ball&amp;#39;s existing position and velocity and animates it&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- by the time step provided&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;animate&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ball&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ball&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;animate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.~&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;velocity&lt;/span&gt;
 
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- the original ball&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ball&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_position&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_velocity&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- animate the ball by 1 full timestep&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Initial ball : &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Animated ball: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>cabal sandbox ghci</title>
   <link href="http://tuttlem.github.io/2014/03/16/cabal-sandbox-ghci/"/>
   <updated>2014-03-16T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/03/16/cabal-sandbox-ghci</id>
   <content type="html">&lt;p&gt;A very quick post that is based on the information from &lt;a href=&quot;http://stackoverflow.com/questions/17014270/how-can-i-use-ghci-with-the-new-cabal-1-17-sandboxes&quot;&gt;this stack overflow article&lt;/a&gt; on how to get a GHCi session up and running with the libraries referenced that you&amp;#39;ve installed using your cabal sandbox.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$YOUR_PACKAGE_DIR&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;# For GHC &amp;gt;= 7.6&lt;/span&gt;
ghci -no-user-package-db -package-db .cabal-sandbox/i386-linux-ghc-7.6.1-packages.conf.d
 
&lt;span class=&quot;c&quot;&gt;# For GHC &amp;lt; 7.6&lt;/span&gt;
ghci -no-user-package-conf -package-conf .cabal-sandbox/i386-linux-ghc-7.4.2-packages.conf.d&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A Quick Lap with the Writer Monad</title>
   <link href="http://tuttlem.github.io/2014/03/16/a-quick-lap-with-the-writer-monad/"/>
   <updated>2014-03-16T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/03/16/a-quick-lap-with-the-writer-monad</id>
   <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://hackage.haskell.org/package/mtl-2.1.2/docs/Control-Monad-Writer-Lazy.html#t:Writer&quot;&gt;Writer monad&lt;/a&gt; allows functions to accumulate information as functions execute. According to the Hackage page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A writer monad parameterized by the type w of output to accumulate. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Perhaps not the most verbose of descriptions, however this is rather simple to explain with a well known example. In previous programming disciplines you would have needed to log information out of your code as your program &amp;quot;did things&amp;quot;. The &lt;a href=&quot;http://hackage.haskell.org/package/mtl-2.1.2/docs/Control-Monad-Writer-Lazy.html#t:Writer&quot;&gt;Writer monad&lt;/a&gt; allows you to write out information in a log form. This doesn&amp;#39;t necessarily have to be in textual log format; an example I have seen recently is to keep track of calculations used to come to a final result. The calculations put into that log sped up calculations on other figures.&lt;/p&gt;

&lt;p&gt;The idea here is to not clutter your code having to support things like logging/tracing, etc. Employing this monad gives your code the ability to produce this output on the side without getting in the way.&lt;/p&gt;

&lt;h3 id=&quot;key-pieces&quot;&gt;Key Pieces&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Functions in the &lt;a href=&quot;http://hackage.haskell.org/package/mtl-2.1.2/docs/Control-Monad-Writer-Lazy.html#t:Writer&quot;&gt;Writer monad&lt;/a&gt; are decorated with &lt;code&gt;Writer l r&lt;/code&gt;. &lt;code&gt;l&lt;/code&gt; in this case is the type that you&amp;#39;ll be logging out where &lt;code&gt;r&lt;/code&gt; is the result being returned from your function.&lt;/li&gt;
&lt;li&gt;The function &lt;code&gt;tell&lt;/code&gt; is what&amp;#39;s used to push another value into the log/trace/writer.&lt;/li&gt;
&lt;li&gt;Operations in the &lt;a href=&quot;http://hackage.haskell.org/package/mtl-2.1.2/docs/Control-Monad-Writer-Lazy.html#t:Writer&quot;&gt;Writer monad&lt;/a&gt; can be chained together using &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;runWriter&lt;/code&gt; is what you&amp;#39;ll use to run something in the &lt;a href=&quot;http://hackage.haskell.org/package/mtl-2.1.2/docs/Control-Monad-Writer-Lazy.html#t:Writer&quot;&gt;Writer monad&lt;/a&gt; to get your result back.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;an-example&quot;&gt;An Example&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Monad.Writer&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Starts a value off.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- This function doesn&amp;#39;t perform any calculation at all, it just prepares an&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- initial value to start in the calculation pipeline&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Writer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Starting with &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Halve a value&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Any value passed into this function gets halved&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;half&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Writer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;half&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Halving &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Squares a value&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Any value passed into this function gets squared&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sqr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Writer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sqr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Squaring &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runWriter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;half&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;half&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Answer: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; ==== Log ==== &amp;quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;mapM_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A Quick Lap with the State Monad</title>
   <link href="http://tuttlem.github.io/2014/03/16/a-quick-lap-with-the-state-monad/"/>
   <updated>2014-03-16T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/03/16/a-quick-lap-with-the-state-monad</id>
   <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://hackage.haskell.org/package/mtl-2.1.2/docs/Control-Monad-State-Class.html#t:MonadState&quot;&gt;State monad&lt;/a&gt; gives functionality of both the &lt;a href=&quot;http://hackage.haskell.org/package/mtl-1.1.0.2/docs/Control-Monad-Reader.html&quot;&gt;Reader monad&lt;/a&gt; and &lt;a href=&quot;http://hackage.haskell.org/package/mtl-2.1.2/docs/Control-Monad-Writer-Lazy.html#t:Writer&quot;&gt;Writer monad&lt;/a&gt; in one. When using the &lt;a href=&quot;http://hackage.haskell.org/package/mtl-2.1.2/docs/Control-Monad-State-Class.html#t:MonadState&quot;&gt;State monad&lt;/a&gt; you&amp;#39;re able to read the state at any time and then set it back again, providing read/write access.&lt;/p&gt;

&lt;h3 id=&quot;key-points&quot;&gt;Key Points&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The function &lt;code&gt;get&lt;/code&gt; is used to read the current state&lt;/li&gt;
&lt;li&gt;The function &lt;code&gt;put&lt;/code&gt; is used to set the state&lt;/li&gt;
&lt;li&gt;&lt;code&gt;runState&lt;/code&gt; is used to manage execution of functions that run in the &lt;a href=&quot;http://hackage.haskell.org/package/mtl-2.1.2/docs/Control-Monad-State-Class.html#t:MonadState&quot;&gt;State monad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Operations in the &lt;a href=&quot;http://hackage.haskell.org/package/mtl-2.1.2/docs/Control-Monad-State-Class.html#t:MonadState&quot;&gt;State monad&lt;/a&gt; can use &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; to be chained together&lt;/li&gt;
&lt;li&gt;Functions in the &lt;a href=&quot;http://hackage.haskell.org/package/mtl-2.1.2/docs/Control-Monad-State-Class.html#t:MonadState&quot;&gt;State monad&lt;/a&gt; are decorated with &lt;code&gt;State s v&lt;/code&gt;. Where &lt;code&gt;s&lt;/code&gt; is the type of the state and &lt;code&gt;v&lt;/code&gt; is the return type from the function&amp;lt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;an-example&quot;&gt;An Example&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Monad.State&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Starts a value off.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- This function doesn&amp;#39;t perform any calculation at all, it just prepares an&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- initial value to start in the calculation pipeline&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Starting with &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Halve a value&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Any value passed into this function gets halved&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;half&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;half&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Halving &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Squares a value&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Any value passed into this function gets squared&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sqr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sqr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Squaring &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;half&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;half&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Answer: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; ==== Log ==== &amp;quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;mapM_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A Quick Lap with the Reader Monad</title>
   <link href="http://tuttlem.github.io/2014/03/16/a-quick-lap-with-the-reader-monad/"/>
   <updated>2014-03-16T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/03/16/a-quick-lap-with-the-reader-monad</id>
   <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://hackage.haskell.org/package/mtl-1.1.0.2/docs/Control-Monad-Reader.html&quot;&gt;Reader monad&lt;/a&gt; allows functions to use shared state (or a shared environment) to operate with. According to the Hackage page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Reader monad (also called the Environment monad). Represents a computation, which can read values from a shared environment, pass values from function to function, and execute sub-computations in a modified environment. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If many of your functions require the same shared values (think like a config file, application settings or just shared state), rather than adding a new parameter to all of your functions that require this information you can put your functions into the &lt;a href=&quot;http://hackage.haskell.org/package/mtl-1.1.0.2/docs/Control-Monad-Reader.html&quot;&gt;Reader monad&lt;/a&gt; which will give you access to this state.&lt;/p&gt;

&lt;h3 id=&quot;key-pieces&quot;&gt;Key Pieces&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The Reader constructor takes the form of &lt;code&gt;Reader s v&lt;/code&gt; where &lt;code&gt;s&lt;/code&gt; is your state type and &lt;code&gt;v&lt;/code&gt; is your function return type.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;ask&lt;/code&gt; function is what you&amp;#39;ll use to retrieve the state value for use in your own functions.&lt;/li&gt;
&lt;li&gt;To run the &lt;a href=&quot;http://hackage.haskell.org/package/mtl-1.1.0.2/docs/Control-Monad-Reader.html&quot;&gt;Reader monad&lt;/a&gt; you use the &lt;code&gt;runReader&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;an-example&quot;&gt;An Example&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Monad.Reader&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Shared configuration for this application.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Rather trivial (and useless), it just configures how our application will&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- address the user &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SalutationConfig&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SalutationConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formal&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Returns a greeting&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Takes in someone&amp;#39;s name and returns a greeting string&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;greeter&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Reader&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SalutationConfig&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;greeter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- grab the configuration out&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ask&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- grab the &amp;quot;formal&amp;quot; setting from the config&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;-- send out the value&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makeSalutation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Makes a salutation for a &amp;quot;formal&amp;quot; setting&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;makeSalutation&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;makeSalutation&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Good day, &amp;quot;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;makeSalutation&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Wasaaaaaaaap, &amp;quot;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- create the configuration&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SalutationConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formal&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- run the reader with the configuration for a guy named &amp;quot;Michael&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runReader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeter&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Michael&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;-- &amp;quot;Wasaaaaaaaaaap, Michael&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing pyocr on Debian</title>
   <link href="http://tuttlem.github.io/2014/03/13/installing-pyocr-on-debian/"/>
   <updated>2014-03-13T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/03/13/installing-pyocr-on-debian</id>
   <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Today&amp;#39;s post is an installation guide to get &lt;a href=&quot;https://pypi.python.org/pypi/pyocr/0.2.2&quot;&gt;pyocr&lt;/a&gt; up and running on a Debian Linux style distribution.&lt;/p&gt;

&lt;p&gt;Prepare your python environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo apt-get install build-tools python-dev
sudo apt-get install python-setuptools
sudo easy_install pip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install the operating system implementations of the OCR programs. In order to do this, you my need to enable the non-free repositories within your apt settings.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo apt-get install tesseract-ocr tesseract-ocr-eng
sudo apt-get install cuneiform&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, setuptools needed a little extra help with the following fix:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo pip install setuptools --no-use-wheel --upgrade&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Prerequisite development libraries are now required prior to the python binding installations:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo apt-get install libtiff4-dev libjpeg62-dev zlib1g-dev libfreetype6-dev liblcms-dev libwebp-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, we install the python bindings:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo pip install Pillow
sudo pip install pyocr&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That gets pyocr up and running on a machine.&lt;/p&gt;

&lt;p&gt;Other libraries I&amp;#39;ve installed for image manipulation are as follows.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo apt-get install python-pythonmagick
sudo apt-get install python-pdfminer
sudo apt-get install libmagickwand-dev
sudo pip install Wand&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Watching the File System with INotify in Haskell</title>
   <link href="http://tuttlem.github.io/2014/02/10/watching-the-file-system-with-inotify-in-haskell/"/>
   <updated>2014-02-10T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/02/10/watching-the-file-system-with-inotify-in-haskell</id>
   <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Some applications that you write from time to time may require you to study changes that occur on the file system. These changes could be that a file arrives, is modified, is closed, etc. Your program can then respond accordingly to these interesting events.&lt;/p&gt;

&lt;p&gt;In today&amp;#39;s post, I&amp;#39;ll show you how to monitor the file system for changes using the &lt;a href=&quot;http://hackage.haskell.org/package/hinotify-0.3.1/docs/System-INotify.html&quot;&gt;hinotify&lt;/a&gt; package.&lt;/p&gt;

&lt;h3 id=&quot;what-is-inotify?&quot;&gt;What is inotify?&lt;/h3&gt;

&lt;p&gt;inotify is short for inode notify. It&amp;#39;s a piece of the Linux Kernel that adds notifications at the filesystem level so that userspace programs can take advantage of these events. The &lt;a href=&quot;http://en.wikipedia.org/wiki/Inotify&quot;&gt;Wikipedia page on inotify&lt;/a&gt; has a good explanation for further reading.&lt;/p&gt;

&lt;h3 id=&quot;the-code&quot;&gt;The Code&lt;/h3&gt;

&lt;p&gt;There are 3 main jobs that we need to take care of here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create awareness with INotify&lt;/li&gt;
&lt;li&gt;Register your interest in changes&lt;/li&gt;
&lt;li&gt;Respond to the changes&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Concurrent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;threadDelay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.INotify&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- the paths that we&amp;#39;ll monitor&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/home/user&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;-- setup INotify&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;withINotify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- monitor each predefined path, and respond using printEvent&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mapM_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addWatch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Modify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CloseWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;-- this gives &amp;quot;addWatch&amp;quot; some time to collect some data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;threadDelay&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000000&lt;/span&gt;
    
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- print the file and event to the console&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printEvent&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I&amp;#39;ve tried to comment this code as best I can to show you what&amp;#39;s going on. It&amp;#39;s all pretty straight forward. Delaying the main thread may seem unintuitive, however without this call being made the program will finish execution without collecting data (because INotify doesn&amp;#39;t block!).&lt;/p&gt;

&lt;p&gt;Nifty.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Making Sys-V Init Scripts for Debian</title>
   <link href="http://tuttlem.github.io/2014/02/06/making-sys-v-init-scripts-for-debian/"/>
   <updated>2014-02-06T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/02/06/making-sys-v-init-scripts-for-debian</id>
   <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Sometimes it&amp;#39;s necessary to run programs (applications or daemons) in the background at different stages of a machine&amp;#39;s up time. The most common use case of which centralises around starting something at boot and stopping something at shutdown.&lt;/p&gt;

&lt;p&gt;In today&amp;#39;s post, I&amp;#39;ll be doing a write up on preparing init scripts for Sys-V style systems.&lt;/p&gt;

&lt;h3 id=&quot;how-it-works&quot;&gt;How it works&lt;/h3&gt;

&lt;p&gt;Debian&amp;#39;s Sys-V style init system relies on the scripts under &lt;code&gt;/etc/init.d&lt;/code&gt; to instruct the operating system on how to start or stop particular programs. A header that sits at the top of these scripts informs the init system under what conditions this script should start and stop.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an example of this header from an excerpt taken from &lt;code&gt;/etc/init.d/README&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;init.d&lt;/code&gt; scripts are expected to have a LSB style header documenting
dependencies and default runlevel settings.  The header look like this
(not all fields are required):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;### BEGIN INIT INFO
# Provides:          skeleton
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Should-Start:      $portmap
# Should-Stop:       $portmap
# X-Start-Before:    nis
# X-Stop-After:      nis
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     true
# Short-Description: Example initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The insserv man page will take you further in-depth as to what each of these means for your init script.&lt;/p&gt;

&lt;p&gt;A full example of an init script is given on the Debian administration website here. It doesn&amp;#39;t use the header above - which is acceptable as these fields aren&amp;#39;t required by the script.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#! /bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# /etc/init.d/blah&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Some things that run always&lt;/span&gt;
touch /var/lock/blah

&lt;span class=&quot;c&quot;&gt;# Carry out specific functions when asked to by the system&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt; in
  start&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Starting script blah &amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Could do more here&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  stop&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Stopping script blah&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Could do more here&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  *&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Usage: /etc/init.d/blah {start|stop}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Putting this script into a text file (into your home directory) and applying execute permissions on the file, allows you to test it at the console. I&amp;#39;ve put this script into a file called &amp;quot;blah&amp;quot;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chmod 755 blah

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./blah
Usage: /etc/init.d/blah &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;start&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;stop&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./blah start
Starting script blah
Could &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;more here

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./blah stop
Stopping script blah
Could &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;more here&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The script implements a &amp;quot;start&amp;quot; and &amp;quot;stop&amp;quot; instruction.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Now that you&amp;#39;ve developed your script and are happy with its operation (after testing it at the console), you can install it on your system.&lt;/p&gt;

&lt;p&gt;The first step is to copy your script (in this case &amp;quot;blah&amp;quot;) up into &lt;code&gt;/etc/init.d/&lt;/code&gt;. This makes it available to the init system to use. It won&amp;#39;t actually use it though until you establish some symlinks between the script and the runlevel script sets.&lt;/p&gt;

&lt;p&gt;You can check that it&amp;#39;s available to your system using the &amp;quot;service&amp;quot; command, like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;$ sudo service --status-all
 [ + ]  acpid
 [ + ]  atd
 [ ? ]  blah
 [ - ]  bootlogs
 [ ? ]  bootmisc.sh
 . . .
 . . .
 . . .
 . . .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see that &amp;quot;blah&amp;quot; is being registered here as an init script and as such can also be started and stopped using the &amp;quot;service&amp;quot; command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo service blah start
Starting script blah
Could &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;more here

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo service blah stop
Stopping script blah
Could &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;more here&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we&amp;#39;ll attach this init script to the startup and shut down of the computer. update-rc.d will help with this process. You can get the script installed with the following command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo update-rc.d blah defaults&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you no longer want the script to execute on your system, you can remove it from the script sets with the following command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;update-rc.d -f blah remove&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After removing it, you&amp;#39;ll still have your script in &lt;code&gt;/etc/init.d/&lt;/code&gt;, just in case you want to set it up again.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it for today. &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Textfiles.com</title>
   <link href="http://tuttlem.github.io/2014/02/04/textfiles-com/"/>
   <updated>2014-02-04T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/02/04/textfiles-com</id>
   <content type="html">&lt;p&gt;I had to bookmark this site here. I&amp;#39;ve just burnt the past 2 hours looking through it, fondly remembering the 90&amp;#39;s.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.textfiles.com/programming/&quot;&gt;http://www.textfiles.com/programming/&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Setting up Bochs</title>
   <link href="http://tuttlem.github.io/2014/02/03/setting-up-bochs/"/>
   <updated>2014-02-03T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/02/03/setting-up-bochs</id>
   <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Today&amp;#39;s post is just a short one on the installation of the virtual machine Bochs within a Debian environment.&lt;/p&gt;

&lt;h3 id=&quot;procedure&quot;&gt;Procedure&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Install Bochs using your package manager&lt;/span&gt;
sudo apt-get install bochs

&lt;span class=&quot;c&quot;&gt;# Install the X11 and sdl plugin for Bochs&lt;/span&gt;
sudo apt-get install bochs-x bochs-sdl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, make sure that your machines are using &lt;code&gt;SDL&lt;/code&gt; as the display library by adding this line to your &lt;code&gt;.bochsrc&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;files:display_library: sdl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;#39;s it for today.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Project setup with Maven at the Command Line</title>
   <link href="http://tuttlem.github.io/2014/01/30/project-setup-with-maven-at-the-command-line/"/>
   <updated>2014-01-30T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/01/30/project-setup-with-maven-at-the-command-line</id>
   <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;A few utilities exist to manage your build, dependencies, test running for Java projects. One that I&amp;#39;ve seen that is quite intuitive (once you wrap your head around the xml structure) is &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt;. According to the website, Maven is a &amp;quot;software project management and comprehension tool&amp;quot;.&lt;/p&gt;

&lt;p&gt;The main benefit I&amp;#39;ve seen already is how the developer&amp;#39;s work-cycle is managed using the &amp;quot;POM&amp;quot; (project object model). The POM is just an XML file that accompanies your project to describe to Maven what your requirements are to build, test &amp;amp; package your software unit.&lt;/p&gt;

&lt;p&gt;An excellent, short post can be found on the Maven website called &lt;a href=&quot;http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html&quot;&gt;&amp;quot;Maven in 5 minutes&amp;quot;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today&amp;#39;s post will focus on Maven installation and getting a &amp;quot;Hello, world&amp;quot; project running.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;I&amp;#39;m on a Debian-flavored Linux distribution, so you may need to translate slightly between package managers. To get Maven installed, issue the following command at the prompt:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo apt-get install maven&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check that everything has installed correctly with the following command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;mvn --version&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should see some output not unlike what I&amp;#39;ve got here:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;Apache Maven 3.0.4
Maven home: /usr/share/maven
Java version: 1.7.0_25, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-7-openjdk-amd64/jre
Default locale: en_AU, platform encoding: UTF-8
OS name: &amp;quot;linux&amp;quot;, version: &amp;quot;3.2.0-4-amd64&amp;quot;, arch: &amp;quot;amd64&amp;quot;, family: &amp;quot;unix&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you&amp;#39;re seeing output like what I&amp;#39;ve got above - that&amp;#39;s it. You&amp;#39;re installed now.&lt;/p&gt;

&lt;h3 id=&quot;first-project&quot;&gt;First Project&lt;/h3&gt;

&lt;p&gt;Getting your first application together is pretty easy. A &amp;quot;quick start&amp;quot; approach is to use the quick start templates to generate a project structure like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Source
mvn archetype:generate -DgroupId&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;org.temp -DartifactId&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hello -DarchetypeArtifactId&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;maven-archetype-quickstart -DinteractiveMode&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Maven will then go out and grab all that it needs from the web to get your project setup. It&amp;#39;s now generated a project structure for you (in a directory called &amp;quot;hello&amp;quot;) that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;.
└── src
    ├── main
    │   └── java
    │       └── org
    │           └── temp
    └── test
        └── java
            └── org
                └── temp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Editing the file that they put into the source folder for you (at src/main/java/org/temp/App.java), you can see that your job is already done:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Hello world!&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Build it and give it a run!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;mvn compile
mvn &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;:java -Dexec.mainClass&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;org.temp.App&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should see some output like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building hello 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] &amp;gt;&amp;gt;&amp;gt; exec-maven-plugin:1.2.1:java (default-cli) @ hello &amp;gt;&amp;gt;&amp;gt;
[INFO]
[INFO] &amp;lt;&amp;lt;&amp;lt; exec-maven-plugin:1.2.1:java (default-cli) @ hello &amp;lt;&amp;lt;&amp;lt;
[INFO]
[INFO] --- exec-maven-plugin:1.2.1:java (default-cli) @ hello ---
Hello World!
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.331s
[INFO] Finished at: Thu Jan 30 12:46:28 EST 2014
[INFO] Final Memory: 7M/30M
[INFO] ------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Most important line there is &amp;quot;Hello World!&amp;quot;. &lt;/p&gt;

&lt;p&gt;There is so much more that you can do with Maven for your projects. Check out the documentation - that&amp;#39;s it for today.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Create a MapReduce Job using Java and Maven</title>
   <link href="http://tuttlem.github.io/2014/01/30/create-a-mapreduce-job-using-java-and-maven/"/>
   <updated>2014-01-30T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/01/30/create-a-mapreduce-job-using-java-and-maven</id>
   <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;In a &lt;a href=&quot;/2014/01/30/create-a-mapreduce-job-using-java-and-maven/&quot;&gt;previous post&lt;/a&gt;, I walked through the very basic operations of getting a Maven project up and running so that you can start writing Java applications using this managed environment.&lt;/p&gt;

&lt;p&gt;In today&amp;#39;s post, I&amp;#39;ll walk through the modifications required to your POM to get a MapReduce job running on Hadoop 2.2.0.&lt;/p&gt;

&lt;p&gt;If you don&amp;#39;t have Maven installed yet, do that . . . maybe even have a bit of a read up on what it is, how it helps and how you can use it. Of course you&amp;#39;ll also need your Hadoop environment up and running!
Project Setup
First thing you&amp;#39;ll need to do, is to create a project structure using Maven in your workspace/source folder. I do this with the following command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mvn archetype:generate -DarchetypeGroupId&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;org.apache.maven.archetypes -DgroupId&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;com.test.wordcount -DartifactId&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;wordcount&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As it runs, this command will ask you a few questions on the details of your project. For all of the questions, I&amp;#39;ve found selecting the default value was sufficient. So . . . enter enter enter !&lt;/p&gt;

&lt;p&gt;Once the process is complete, you&amp;#39;ll have a project folder created for you. In this example, my project folder is &amp;quot;wordcount&amp;quot; (you can probably see where this tutorial is now headed). Changing into this folder and having a look at the directory tree, you should see the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;~/src/wordcount$ tree
.
├── pom.xml
└── src
    ├── main
    │   └── java
    │       └── com
    │           └── test
    │               └── wordcount
    │                   └── App.java
    └── test
        └── java
            └── com
                └── test
                    └── wordcount
                        └── AppTest.java

11 directories, 3 files&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now it&amp;#39;s time to change the project environment so that it&amp;#39;ll suit our Hadoop application target.&lt;/p&gt;

&lt;h3 id=&quot;adjusting-the-pom-for-hadoop&quot;&gt;Adjusting the POM for Hadoop&lt;/h3&gt;

&lt;p&gt;There&amp;#39;s only a few minor alterations that are required here. The first one is, referencing the Hadoop libraries so that they are available to you to program against. We also specify the type of packaging for the application. Lastly, changing the language version (to something higher than what&amp;#39;s specified as default).&lt;/p&gt;

&lt;p&gt;Open up &amp;quot;pom.xml&amp;quot; in your editor of choice and add the following lines into the &amp;quot;dependencies&amp;quot; node.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupid&amp;gt;&lt;/span&gt;org.apache.hadoop&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupid&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactid&amp;gt;&lt;/span&gt;hadoop-client&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactid&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.2.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This tells the project that we need the &amp;quot;hadoop-client&amp;quot; library (version 2.2.0).&lt;/p&gt;

&lt;p&gt;We&amp;#39;re now going to tell Maven to make us an executable JAR. Unfortunately, here&amp;#39;s where the post is slightly pre-emptive upon itself. In order to tell Maven that we want an executable JAR, we need to tell it what class is holding our &amp;quot;main&amp;quot; function. . . we haven&amp;#39;t written any code yet - but we will!&lt;/p&gt;

&lt;p&gt;Create a &amp;quot;build&amp;quot; node and within that node create a &amp;quot;plugins&amp;quot; node and add the following to it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-jar-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;archive&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;manifest&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;addClasspath&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/addClasspath&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;mainClass&amp;gt;&lt;/span&gt;com.test.wordcount.WordCount&lt;span class=&quot;nt&quot;&gt;&amp;lt;/mainClass&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/archive&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;More on the &lt;a href=&quot;http://maven.apache.org/plugins/maven-jar-plugin/&quot;&gt;maven-jar-plugin&lt;/a&gt; plugin can be found on the Maven website, but this block builds an executable JAR for us.&lt;/p&gt;

&lt;p&gt;Add this next plugin to use Java 1.7 for compilation:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&amp;gt;&lt;/span&gt;1.7&lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;target&amp;gt;&lt;/span&gt;1.7&lt;span class=&quot;nt&quot;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;#39;s all that should be needed now to perform compilation and packaging of our Hadoop application.&lt;/p&gt;

&lt;h3 id=&quot;the-job&quot;&gt;The Job&lt;/h3&gt;

&lt;p&gt;I&amp;#39;ll leave writing Hadoop Jobs to another post, but we still need some code to make sure our project is working (for today).&lt;/p&gt;

&lt;p&gt;All I have done for today, is taken the WordCount code that&amp;#39;s on the Hadoop Wiki here &lt;a href=&quot;http://wiki.apache.org/hadoop/WordCount&quot;&gt;http://wiki.apache.org/hadoop/WordCount&lt;/a&gt;, changed the package name to align with what I created my project as &lt;code&gt;com.test.wordcount&lt;/code&gt; and saved it into &lt;code&gt;src/main/java/com/test/wordcount/WordCount.java&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I removed the template provided &lt;code&gt;App.java&lt;/code&gt; that was in this folder. I did make one minor patch to this code also. Here&amp;#39;s my full listing that I&amp;#39;ve used for reference anyway.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wordcount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.hadoop.fs.Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.hadoop.conf.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.hadoop.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.hadoop.mapreduce.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.hadoop.mapreduce.lib.input.FileInputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.hadoop.mapreduce.lib.input.TextInputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.hadoop.mapreduce.lib.output.FileOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.hadoop.mapreduce.lib.output.TextOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WordCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntWritable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMoreTokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Reduce&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reducer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntWritable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;Job&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;wordcount&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setJarByClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WordCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOutputKeyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOutputValueClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMapperClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setReducerClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reduce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setInputFormatClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextInputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOutputFormatClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;FileInputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addInputPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]));&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;FileOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOutputPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]));&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;waitForCompletion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;compile,-package-&amp;amp;-run!&quot;&gt;Compile, Package &amp;amp; Run!&lt;/h3&gt;

&lt;p&gt;Our project is setup, our code is in place; it&amp;#39;s now time to compile our project.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mvn clean install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Lots of downloading of dependencies and a bit of compilation go on . . . If all has gone to plan, you can now have a package to run. As usual, you&amp;#39;ll need a text file of words to count. I&amp;#39;ve popped one up on hdfs called &amp;quot;input.txt&amp;quot;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hadoop jar target/wordcount-1.0-SNAPSHOT.jar input.txt wcout&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should now have a map reduce job running!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Simple forkIO Usage</title>
   <link href="http://tuttlem.github.io/2014/01/21/simple-forkio-usage/"/>
   <updated>2014-01-21T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/01/21/simple-forkio-usage</id>
   <content type="html">&lt;p&gt;Creating new threads in Haskell is quite easy (once you know how). Here&amp;#39;s a simple snippet for using &lt;a href=&quot;http://hackage.haskell.org/package/base-4.6.0.1/docs/Control-Concurrent.html#v:forkIO&quot;&gt;forkIO&lt;/a&gt; and &lt;a href=&quot;http://hackage.haskell.org/package/base-4.6.0.1/docs/Control-Concurrent.html#v:myThreadId&quot;&gt;myThreadId&lt;/a&gt; to get you started.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Concurrent&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- grab the parent thread id and print it&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parentId&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myThreadId&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;-- create a new thread (ignore the return)&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forkIO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;-- grab the child thread id and print it&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;childId&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myThreadId&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      
    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing Software from Testing or Unstable within your Debian Stable Environment</title>
   <link href="http://tuttlem.github.io/2014/01/14/installing-software-from-testing-or-unstable-within-your-debian-stable-environment/"/>
   <updated>2014-01-14T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/01/14/installing-software-from-testing-or-unstable-within-your-debian-stable-environment</id>
   <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;The great thing about using the current stable version of &lt;a href=&quot;www.debian.org&quot;&gt;Debian&lt;/a&gt; is that you&amp;#39;re assured that a lot of testing has gone in to ensure that all of the packages you&amp;#39;re looking at are in fact stable - sometimes this works against us as it takes so long for packages to become stable, making the Debian stable repository quite stale with its versions.&lt;/p&gt;

&lt;p&gt;In today&amp;#39;s post, I&amp;#39;ll show you how you can install a package from a different repository (other than stable) within your stable Debian environment.&lt;/p&gt;

&lt;p&gt;At the time of this writing, I&amp;#39;m currently using &amp;quot;Wheezy&amp;quot; (codename for Stable). This makes &amp;quot;Jessie&amp;quot; the codename for Testing and &amp;quot;Sid&amp;quot; the codename for Unstable.&lt;/p&gt;

&lt;h3 id=&quot;adding-software-sources&quot;&gt;Adding Software Sources&lt;/h3&gt;

&lt;p&gt;In order to install software from another repository, you need to tell &amp;quot;apt&amp;quot; where to get the software from. Before making any changes, my /etc/apt/sources.list looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;deb http://ftp.au.debian.org/debian/ wheezy main
deb-src http://ftp.au.debian.org/debian/ wheezy main

deb http://security.debian.org/ wheezy/updates main
deb-src http://security.debian.org/ wheezy/updates main

deb http://ftp.au.debian.org/debian/ wheezy-updates main
deb-src http://ftp.au.debian.org/debian/ wheezy-updates main&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The man page for &amp;quot;sources.list&amp;quot; will fill you in on the structure of these lines in your sources.list. For the purposes of this post, just take note that each line mentions &amp;quot;wheezy&amp;quot; at the end.&lt;/p&gt;

&lt;p&gt;Without modification, if we were to use &amp;quot;apt-cache policy&amp;quot; we can find out what versions of a particular package are available to us. For the purposes of this post, I&amp;#39;ll use &amp;quot;haskell-platform&amp;quot;. Taking a look at the cache policy for this package:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;$ apt-cache policy haskell-platform
haskell-platform:
  Installed: (none)
  Candidate: 2012.2.0.0
  Version table:
     2012.2.0.0 0
        500 http://ftp.au.debian.org/debian/ wheezy/main amd64 Packages&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;#39;ve got version &amp;quot;2012.2.0.0&amp;quot; available to us in the stable repository. With &amp;quot;2013.2.0.0&amp;quot; as the current version, we can see that stable is a little behind. Let&amp;#39;s try and fix that.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re going to add some software from the testing repository, so we&amp;#39;re going to link up with the binary source pointed to &amp;quot;jessie&amp;quot;. To do this, we&amp;#39;ll add one extra line to /etc/apt/sources.list, like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;deb http://ftp.au.debian.org/debian/ wheezy main
deb-src http://ftp.au.debian.org/debian/ wheezy main
deb http://ftp.au.debian.org/debian/ jessie main

deb http://security.debian.org/ wheezy/updates main
deb-src http://security.debian.org/ wheezy/updates main

deb http://ftp.au.debian.org/debian/ wheezy-updates main
deb-src http://ftp.au.debian.org/debian/ wheezy-updates main&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the third line (new) that mentions &amp;quot;jessie&amp;quot;.&lt;/p&gt;

&lt;h3 id=&quot;setting-priorities&quot;&gt;Setting Priorities&lt;/h3&gt;

&lt;p&gt;Now that we&amp;#39;ve confused apt, by mixing software sources - we need to set some priorities where the stable repository will take precedence over the testing repository.&lt;/p&gt;

&lt;p&gt;To do this, we open/create the file &lt;code&gt;/etc/apt/preferences&lt;/code&gt;. In this file, we can list out all of the repositories that we&amp;#39;d like to use and assign a priority to them. Here&amp;#39;s the sample putting a higher priority on stable:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;Package: *
Pin: release a=stable
Pin-Priority: 700

Package: *
Pin: release a=testing
Pin-Priority: 600&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The instructions here are defining what packages these rules apply to, which release they apply to and what priority is to be applied. Now that we&amp;#39;ve put these priorities in place, we&amp;#39;ll update our local software cache:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get update&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, we can take a look at the policy:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;haskell-platform:
  Installed: (none)
  Candidate: 2012.2.0.0
  Version table:
     2013.2.0.0.debian3 0
        600 http://ftp.au.debian.org/debian/ jessie/main amd64 Packages
     2012.2.0.0 0
        700 http://ftp.au.debian.org/debian/ wheezy/main amd64 Packages&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We now have the ability to install the later package!&lt;/p&gt;

&lt;h3 id=&quot;installing&quot;&gt;Installing&lt;/h3&gt;

&lt;p&gt;With all of these rules in place now, installing software from a particular repository is as simple as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get -t testing install haskell-platform&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;#39;ve passed the repository the &lt;code&gt;-t&lt;/code&gt; option. This will take haskell-platform and associated dependencies from the testing repository.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>RAII for C++</title>
   <link href="http://tuttlem.github.io/2014/01/13/raii-for-c/"/>
   <updated>2014-01-13T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/01/13/raii-for-c</id>
   <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;In programming, &lt;a href=&quot;http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization&quot;&gt;RAII&lt;/a&gt; stands for &amp;quot;Resource Acquisition is Initialization&amp;quot; and it&amp;#39;s an idiom or technique established by &lt;a href=&quot;http://en.wikipedia.org/wiki/Bjarne_Stroustrup&quot;&gt;Bjarne Stroustrup&lt;/a&gt; to ease resource allocation and deallocation in C++.&lt;/p&gt;

&lt;p&gt;Common problems have been when an exception is thrown during initialization, any memory associated during construction (or underlying resources) aren&amp;#39;t released, creating memory leaks in applications.&lt;/p&gt;

&lt;h3 id=&quot;the-idea&quot;&gt;The Idea&lt;/h3&gt;

&lt;p&gt;The basic premise is that resource allocation is to be performed in the constructor of your class. Release of the resources occurs in your destructor. The example given on the &lt;a href=&quot;http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization&quot;&gt;Wikipedia page&lt;/a&gt; deals with holding a lock/mutex for a given file. When execution leaves the scope of the code (whether it be from premature termination of an exception or from the code naturally exiting), the destructors run to release the file handle and lock.&lt;/p&gt;

&lt;p&gt;The concept is a great way to not only clean up your code (as all of the &amp;quot;if !null&amp;quot; code is now redundant) but it&amp;#39;s a great safe-guard that you can almost be absent minded about.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s important to note that this idiom doesn&amp;#39;t allow you to ignore good exception handling practice. You&amp;#39;re still expected to use exception handling in your code, this will just ensure that your cleanup/release code is executed as expected.&lt;/p&gt;

&lt;h3 id=&quot;an-implementation&quot;&gt;An Implementation&lt;/h3&gt;

&lt;p&gt;Implementing this idea into your own code is really quite simple. If you have a resource (handle) that you&amp;#39;re managing manually, wrap it in a class.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ensure the constructor takes the handle in&lt;/li&gt;
&lt;li&gt;Release the handle in the destructor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When working with OpenGL textures, I use a very small class that allows me to handle the resource cleanup, it just managed the generated texture id. When the class falls out of scope or there&amp;#39;s a failure during initialization, the texture is cleaned up.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;texture&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// manage the generated texture id&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;texture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLuint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_reference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// cleanup of the allocated resource&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// provide access to the reference&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLuint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_reference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GLuint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_reference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;texture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// only run if we have something to clean up&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_reference&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// clear out the texture  &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;glDeleteTextures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_reference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_reference&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Strictly speaking, the constructor should probably do the generation of the texture itself. Where I&amp;#39;m loading the texture is in another managed object of itself. Most importantly, if an exception is thrown during initialization, this class will remove anything allocated to it (if it did allocate).&lt;/p&gt;

&lt;p&gt;It should be mentioned that there are lots of extra attributes we can pile into RAII style classes. There&amp;#39;s a really good write up (in depth) &lt;a href=&quot;http://www.daniweb.com/software-development/cpp/tutorials/373787/beginning-c0x-making-a-raii-class&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;RAII is a great idea to implement into your own classes. The more of this you can practice, the more exception-safe your code will become . . . from car accidents.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Custom Installs with Checkinstall</title>
   <link href="http://tuttlem.github.io/2014/01/11/custom-installs-with-checkinstall/"/>
   <updated>2014-01-11T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/01/11/custom-installs-with-checkinstall</id>
   <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Sometimes it&amp;#39;s necessary to install a piece of software from source. This is normally an awkward process when you&amp;#39;ve had a package manager taking care of all your software needs when you&amp;#39;re faced with the proposition of installing something that the package manager is unaware of. Another concern is that some software developers don&amp;#39;t do the simple things well - some makefiles won&amp;#39;t even offer you the ability to uninstall a piece of software leaving you to try to remove the files that have been peppered into your system directories.&lt;/p&gt;

&lt;p&gt;In today&amp;#39;s post, I&amp;#39;ll walk through a sample usage of the application &lt;a href=&quot;https://wiki.debian.org/CheckInstall&quot;&gt;CheckInstall&lt;/a&gt; for Debian based Linux distributions.&lt;/p&gt;

&lt;h3 id=&quot;what-is-it?&quot;&gt;What is it?&lt;/h3&gt;

&lt;p&gt;From the &lt;a href=&quot;https://wiki.debian.org/CheckInstall&quot;&gt;CheckInstall&lt;/a&gt; page on the Debian Wiki:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CheckInstall keeps track of all the files created or modified by your  installation script (&amp;quot;make&amp;quot; &amp;quot;make install&amp;quot; &amp;quot;make install_modules&amp;quot;,  &amp;quot;setup&amp;quot;, etc), builds a standard binary package and installs it in your  system giving you the ability to uninstall it with your distribution&amp;#39;s  standard package management utilities. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The thing I love about the Debian distribution is the stability of the packages in its repositories. Sometimes, it&amp;#39;s also what I&amp;#39;m not to fond of as software vendors are bringing out new versions of their software and they don&amp;#39;t make it into the stable repositories until they&amp;#39;re deemed stable (which takes ages!) or they may never make it into the repositories.&lt;/p&gt;

&lt;h3 id=&quot;using-checkinstall&quot;&gt;Using CheckInstall&lt;/h3&gt;

&lt;p&gt;I&amp;#39;ve used CheckInstall for quite a few packages in the past. Just recently, I&amp;#39;ve used it to manage the installation of SDL2 onto my system.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# extract your source package&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tar -zxvf SDL2-2.0.1.tar.gz

&lt;span class=&quot;c&quot;&gt;# configure and build as usual&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;SDL2-2.0.1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./configure
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make

&lt;span class=&quot;c&quot;&gt;# use checkinstall on the installation step&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo checkinstall make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After this process had finished, a deb file was created for me which represented the files that had been installed on the system and the deb itself had been applied to the system.&lt;/p&gt;

&lt;p&gt;The idea here is that it simplifies re-installation and removal by proxy of the generated deb package.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hadoop Links</title>
   <link href="http://tuttlem.github.io/2014/01/10/hadoop-links/"/>
   <updated>2014-01-10T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/01/10/hadoop-links</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html&quot;&gt;Apache Hadoop NextGen MapReduce (YARN)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hadoop.apache.org/docs/r2.2.0/hadoop-project-dist/hadoop-common/FileSystemShell.html&quot;&gt;File System Shell Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.yahoo.com/hadoop/tutorial/index.html&quot;&gt;YAHOO! Hadoop Tutorial&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hadoop 2 (2.2.0) setup on Debian</title>
   <link href="http://tuttlem.github.io/2014/01/09/hadoop-2-2-2-0-setup-on-debian/"/>
   <updated>2014-01-09T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/01/09/hadoop-2-2-2-0-setup-on-debian</id>
   <content type="html">&lt;p&gt;Today&amp;#39;s post will just be a walk through of the steps required to install Hadoop 2 on Debian Linux. Please note that this is for a single node installation only. This guide is heavily based on the Ubuntu instructions found &lt;a href=&quot;http://codesfusion.blogspot.com.au/2013/10/setup-hadoop-2x-220-on-ubuntu.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;install-java&quot;&gt;Install Java&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# install the java jdk&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install openjdk-7-jdk
 
&lt;span class=&quot;c&quot;&gt;# make a jdk symlink&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/lib/jvm
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ln -s java-7-openjdk-amd64 jdk
 
&lt;span class=&quot;c&quot;&gt;# make sure that ssh server is installed&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install openssh-server&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;add-hadoop-users-and-groups&quot;&gt;Add Hadoop Users and Groups&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# create a new group for hadoop&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo addgroup hadoop
 
&lt;span class=&quot;c&quot;&gt;# create the hduser and put them in the hadoop group&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo adduser --ingroup hadoop hduser
 
&lt;span class=&quot;c&quot;&gt;# add them to the sudo group also&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo adduser hduser sudo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now login as &amp;quot;hduser&amp;quot;.&lt;/p&gt;

&lt;h3 id=&quot;ssh-certificates&quot;&gt;SSH Certificates&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# generate your key&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen -t rsa -P &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;# set your public key as authorized&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys
 
&lt;span class=&quot;c&quot;&gt;# test out ssh&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh localhost&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;download-hadoop&quot;&gt;Download Hadoop&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# downoad the package&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget http://mirror.rackcentral.com.au/apache/hadoop/common/hadoop-2.2.0/hadoop-2.2.0.tar.gz
 
&lt;span class=&quot;c&quot;&gt;# extract the package&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo tar vxzf hadoop-2.2.0.tar.gz -C /usr/local
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo mv hadoop-2.2.0 hadoop
 
&lt;span class=&quot;c&quot;&gt;# get the hduser to take ownership&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo chown -R hduser:hadoop hadoop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;setup-environment-variables&quot;&gt;Setup Environment Variables&lt;/h3&gt;

&lt;p&gt;Add the following lines to your &lt;code&gt;~/.bashrc&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Hadoop variables&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib/jvm/jdk/
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HADOOP_INSTALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/hadoop
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$HADOOP_INSTALL&lt;/span&gt;/bin
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$HADOOP_INSTALL&lt;/span&gt;/sbin
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HADOOP_MAPRED_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HADOOP_INSTALL&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HADOOP_COMMON_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HADOOP_INSTALL&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HADOOP_HDFS_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HADOOP_INSTALL&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;YARN_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HADOOP_INSTALL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add the following lines to &lt;code&gt;/usr/local/hadoop/etc/hadoop/hadoop-env.sh&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# modify JAVA_HOME&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib/jvm/jdk/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Re-login to your machine as hduser, and check the hadoop version.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hadoop version&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;configure-hadoop&quot;&gt;Configure Hadoop&lt;/h3&gt;

&lt;p&gt;Add the following lines into the &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; node within &lt;code&gt;/usr/local/hadoop/etc/hadoop/core-site.xml&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;fs.default.name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;hdfs://localhost:9000&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add the following lines into the &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; node within &lt;code&gt;/usr/local/hadoop/etc/hadoop/yarn-site.xml&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;yarn.nodemanager.aux-services&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;mapreduce_shuffle&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make a copy of the mapred-site template file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mv mapred-site.xml.template mapred-site.xml
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi mapred-site.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add the following lines into the &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; node within &lt;code&gt;/usr/local/hadoop/etc/hadoop/mapred-site.xml&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;mapreduce.framework.name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;yarn&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;prepare-the-filesystem&quot;&gt;Prepare the Filesystem&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# create the physical directories&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir -p mydata/hdfs/namenode
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir -p mydata/hdfs/datanode&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add the following lines into the &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; node &lt;code&gt;/usr/local/hadoop/etc/hadoop/hdfs-site.xml&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;dfs.replication&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;dfs.namenode.name.dir&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;file:/home/hduser/mydata/hdfs/namenode&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;dfs.datanode.data.dir&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;file:/home/hduser/mydata/hdfs/datanode&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Format the namenode&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hdfs namenode -format&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;start-hadoop&quot;&gt;Start Hadoop&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;start-dfs.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;start-yarn.sh
 
&lt;span class=&quot;c&quot;&gt;# check that services are running&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jps&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run the Example&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/hadoop
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-2.2.0.jar pi 2 5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Getting started with Lua using C++</title>
   <link href="http://tuttlem.github.io/2014/01/08/getting-started-with-lua-using-c/"/>
   <updated>2014-01-08T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/01/08/getting-started-with-lua-using-c</id>
   <content type="html">&lt;h1&gt;Getting started with Lua using C++&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;a href=&quot;http://www.lua.org/&quot;&gt;Lua&lt;/a&gt; is a programming language that has seen increased popularity from the game development industry. It's put to use in the disciplines of providing configuration data all the way through to scripting automated character actions.&lt;br /&gt;&lt;br /&gt;In today's post, I'll walk you through the setup process of the libraries up to writing your first testing application within a Linux environment.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Library Installation&lt;/h3&gt;Before you get downloading and building this library, you'll just need to ensure that you have a build environment installed and are able to compile. &lt;br /&gt;&lt;br /&gt;At the time of writing this article,&amp;nbsp; the &lt;a href=&quot;http://www.lua.org/&quot;&gt;Lua&lt;/a&gt; website had 5.2.3 as their latest release. From their &lt;a href=&quot;http://www.lua.org/download.html&quot;&gt;downloads&lt;/a&gt; page, grab the latest tar.gz archive and extract it onto your machine.&lt;br /&gt;&lt;br /&gt;Following along with their building instructions, issuing &quot;make linux test&quot; whilst in the extracted folder did the trick. It built Lua ready for me to use. A nice convenience of the make file was the &quot;make local&quot; option. Upon issuing this request, the make system will prepare an installation folder that is suitable for you to use locally (i.e. not installed to the system).&lt;br /&gt;&lt;br /&gt;When it comes to downloading the latest versions of libraries, I'll rarely install these to my system. Rather, I drag them around for each project that needs them so that the project determines its dependencies as opposed to my system.&lt;br /&gt;&lt;br /&gt;From here, I prepare a distributable directory of development files that I know that each of my project needs. In the case of Lua, I create the following structure:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;.&lt;br /&gt;└── lua-5.2.3&lt;br /&gt;    ├── include&lt;br /&gt;    │&amp;nbsp;&amp;nbsp; ├── lauxlib.h&lt;br /&gt;    │&amp;nbsp;&amp;nbsp; ├── luaconf.h&lt;br /&gt;    │&amp;nbsp;&amp;nbsp; ├── lua.h&lt;br /&gt;    │&amp;nbsp;&amp;nbsp; ├── lua.hpp&lt;br /&gt;    │&amp;nbsp;&amp;nbsp; └── lualib.h&lt;br /&gt;    └── lib&lt;br /&gt;        ├── liblua.a&lt;br /&gt;        └── lua&lt;br /&gt;            └── 5.2&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;I have all of the development headers available (under the &quot;include&quot; folder) and a static version of the Lua library (under lib).&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Building applications&lt;/h3&gt;When building Lua applications, you'll need to specify the libraries and include folders to your compiler so it knows where to find them. For a test application that I'd written, the following command line compiled an application for me without any trouble.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ g++ -Ilib/lua-5.2.3/include -Llib/lua-5.2.3/lib/ -llua -ldl&lt;/pre&gt;&lt;br /&gt;You can see at the end there, mention of both the &quot;lua&quot; and &quot;dl&quot; libraries.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Test application&lt;/h3&gt;A very simple test to start will be creating a program that will execute a Lua script, pull out on of its global variables and display it to screen.&lt;br /&gt;&lt;br /&gt;Here's our Lua script:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/8310670.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Pretty simple. We have one variable &quot;x&quot; set to 10. Now here's the C++ code that we use to read that one variable out and present it to screen.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/8310746.js&quot;&gt;&lt;/script&gt; I think that the source code above (paired with the documentation on the Lua website) should make things pretty straight forward.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;That's it for today. This is only scratching the surface on what Lua can do. For my purposes right now, I just need to feed configuration values into programs, this fits the purpose really well.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Windows Development with MASM32 (part 7)</title>
   <link href="http://tuttlem.github.io/2014/01/06/windows-development-with-masm32-part-7/"/>
   <updated>2014-01-06T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/01/06/windows-development-with-masm32-part-7</id>
   <content type="html">&lt;h1&gt;Windows Development with MASM32 (part 7)&lt;/h1&gt;
&lt;div class='post'&gt;
Windows Resource Compiler&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing SDL2 on Linux</title>
   <link href="http://tuttlem.github.io/2014/01/05/installing-sdl2-on-linux/"/>
   <updated>2014-01-05T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/01/05/installing-sdl2-on-linux</id>
   <content type="html">&lt;h1&gt;Installing SDL2 on Linux&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;a href=&quot;http://www.libsdl.org/download-2.0.php&quot;&gt;SDL2&lt;/a&gt; was released a little while ago, but still hasn't made it into the stable repositories of some Linux distributions. After doing a big of digging, it's not too hard to get this installed yourself - most of the advice offered in this post comes from an answer on the Ubuntu forums &lt;a href=&quot;http://askubuntu.com/questions/344512/what-is-the-general-procedure-to-install-development-libraries-in-ubuntu&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;In today's post, we'll install SDL2 on a Debian/Ubuntu style distribution from source.&lt;br /&gt;&lt;h3&gt;Dependencies&lt;/h3&gt;First thing before we download and compile the SDL2 source is to get some of the dependencies installed on your system. The following install line will put all of the libraries that SDL2 requires:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo apt-get install build-essential xorg-dev libudev-dev libts-dev libgl1-mesa-dev libglu1-mesa-dev libasound2-dev libpulse-dev libopenal-dev libogg-dev libvorbis-dev libaudiofile-dev libpng12-dev libfreetype6-dev libusb-dev libdbus-1-dev zlib1g-dev libdirectfb-dev&lt;/pre&gt;&lt;br /&gt;Once all of these have installed successfully, you'll need to download a copy of the source. All downloads can be found &lt;a href=&quot;http://www.libsdl.org/download-2.0.php&quot;&gt;here&lt;/a&gt;. This guide will assume that you'll download the .tar.gz source archive.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Compilation and Installation&lt;/h3&gt;Extract the package into a directory under your home directory, somewhere . . .&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ tar -xzf SDL2-*.tar.gz&lt;br /&gt;$ cd SDL2-*&lt;/pre&gt;&lt;br /&gt;Next we'll configure, build and install the libraries.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ ./configure&lt;br /&gt;$ make&lt;br /&gt;$ sudo make install&lt;/pre&gt;&lt;br /&gt;Once compilation and installation have complete, you'll need to update your library links/cache. Do this with the following command:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo ldconfig&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;That's all there is to it.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Introducing Lanyon</title>
   <link href="http://tuttlem.github.io/2014/01/02/introducing-lanyon/"/>
   <updated>2014-01-02T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/01/02/introducing-lanyon</id>
   <content type="html">&lt;p&gt;Lanyon is an unassuming &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; theme that places content first by tucking away navigation in a hidden drawer. It&amp;#39;s based on &lt;a href=&quot;http://getpoole.com&quot;&gt;Poole&lt;/a&gt;, the Jekyll butler.&lt;/p&gt;

&lt;h3 id=&quot;built-on-poole&quot;&gt;Built on Poole&lt;/h3&gt;

&lt;p&gt;Poole is the Jekyll Butler, serving as an upstanding and effective foundation for Jekyll themes by &lt;a href=&quot;https://twitter.com/mdo&quot;&gt;@mdo&lt;/a&gt;. Poole, and every theme built on it (like Lanyon here) includes the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complete Jekyll setup included (layouts, config, &lt;a href=&quot;/404&quot;&gt;404&lt;/a&gt;, &lt;a href=&quot;/atom.xml&quot;&gt;RSS feed&lt;/a&gt;, posts, and &lt;a href=&quot;/about&quot;&gt;example page&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Mobile friendly design and development&lt;/li&gt;
&lt;li&gt;Easily scalable text and component sizing with &lt;code&gt;rem&lt;/code&gt; units in the CSS&lt;/li&gt;
&lt;li&gt;Support for a wide gamut of HTML elements&lt;/li&gt;
&lt;li&gt;Related posts (time-based, because Jekyll) below each post&lt;/li&gt;
&lt;li&gt;Syntax highlighting, courtesy Pygments (the Python-based code snippet highlighter)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lanyon-features&quot;&gt;Lanyon features&lt;/h3&gt;

&lt;p&gt;In addition to the features of Poole, Lanyon adds the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Toggleable sliding sidebar (built with only CSS) via &lt;strong&gt;☰&lt;/strong&gt; link in top corner&lt;/li&gt;
&lt;li&gt;Sidebar includes support for textual modules and a dynamically generated navigation with active link support&lt;/li&gt;
&lt;li&gt;Two orientations for content and sidebar, default (left sidebar) and &lt;a href=&quot;https://github.com/poole/lanyon#reverse-layout&quot;&gt;reverse&lt;/a&gt; (right sidebar), available via &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/poole/lanyon#themes&quot;&gt;Eight optional color schemes&lt;/a&gt;, available via &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/poole/lanyon#readme&quot;&gt;Head to the readme&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h3 id=&quot;browser-support&quot;&gt;Browser support&lt;/h3&gt;

&lt;p&gt;Lanyon is by preference a forward-thinking project. In addition to the latest versions of Chrome, Safari (mobile and desktop), and Firefox, it is only compatible with Internet Explorer 9 and above.&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;Lanyon is developed on and hosted with GitHub. Head to the &lt;a href=&quot;https://github.com/poole/lanyon&quot;&gt;GitHub repository&lt;/a&gt; for downloads, bug reports, and features requests.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://tuttlem.github.io/2014/01/01/example-content/"/>
   <updated>2014-01-01T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2014/01/01/example-content</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  Howdy! This is an example blog post that shows several types of HTML content supported in this theme.
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
&lt;li&gt;Citations, like &lt;cite&gt;&amp;mdash; Mark otto&lt;/cite&gt;, should use &lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;return a + b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
&lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
&lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
&lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
&lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What's Jekyll?</title>
   <link href="http://tuttlem.github.io/2013/12/31/whats-jekyll/"/>
   <updated>2013-12-31T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/12/31/whats-jekyll</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; is a static site generator, an open-source tool for creating simple yet powerful websites of all shapes and sizes. From &lt;a href=&quot;https://github.com/mojombo/jekyll/blob/master/README.markdown&quot;&gt;the project&amp;#39;s readme&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jekyll is a simple, blog aware, static site generator. It takes a template directory [...] and spits out a complete, static website suitable for serving with Apache or your favorite web server. This is also the engine behind GitHub Pages, which you can use to host your project’s page or blog right here from GitHub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;#39;s an immensely useful tool and one we encourage you to use here with Hyde.&lt;/p&gt;

&lt;p&gt;Find out more by &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;visiting the project on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Perlin Noise</title>
   <link href="http://tuttlem.github.io/2013/12/31/perlin-noise/"/>
   <updated>2013-12-31T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/12/31/perlin-noise</id>
   <content type="html">&lt;h1&gt;Perlin Noise&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;Noise functions in computer applications allow programmers to make the machine act a little more naturally. It's the randomness introduced with these algorithms that gives the computer what appears to be &quot;free thought&quot; or unexpected decisions.&lt;br /&gt;&lt;br /&gt;Today, I'll walk through the &lt;a href=&quot;http://en.wikipedia.org/wiki/Perlin_noise&quot;&gt;Perlin Noise&lt;/a&gt; algorithm which has applications in computer science ranging from player movement, landscape generation, clouds, etc.&lt;br /&gt;&lt;br /&gt;Here are some examples of the Perlin Noise function output into two dimensions:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-6Bf_wUTyGOM/UsI84BYt7FI/AAAAAAAAAx0/blK32PUte1s/s1600/perlin1.jpg&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;200&quot; src=&quot;http://3.bp.blogspot.com/-6Bf_wUTyGOM/UsI84BYt7FI/AAAAAAAAAx0/blK32PUte1s/s200/perlin1.jpg&quot; width=&quot;200&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-u4wfD21sIvU/UsI85U78XYI/AAAAAAAAAx8/NG2fEzYjTUA/s1600/perlin2.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;200&quot; src=&quot;http://4.bp.blogspot.com/-u4wfD21sIvU/UsI85U78XYI/AAAAAAAAAx8/NG2fEzYjTUA/s200/perlin2.png&quot; width=&quot;200&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;In today's post, I'll walk through the Perlin Noise algorithm and what steps you need to take to implement it yourself.&lt;br /&gt;&lt;h3&gt;Understanding Noise&lt;/h3&gt;The Perlin Noise algorithm can be broken down into a few smaller pieces to make it easier to understand. At its heart, the algorithm needs pseudo-random numbers. These random numbers should be repeatable so that you can re-generate the same noise pattern at will.&lt;br /&gt;&lt;br /&gt;A common noise function for two parameters that I have found used over the web is as follows:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/8192352.js&quot;&gt;&lt;/script&gt; There's a lot of math transformation in this previous function. You can use any function at all to produce your random numbers, just make sure that you can generate them against two parameters (in the case of 2d) and that you'll get repeatable results.&lt;br /&gt;&lt;br /&gt;Next we'll smooth out the noise between two points. We'll do this by sampling the corners, sides and centre of the point we're currently generating for.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/8192396.js&quot;&gt;&lt;/script&gt; With the above function, we can now sample a small area for a given point. All based on our random number generator.&lt;br /&gt;&lt;br /&gt;For the fractional parts that occur between solid boundaries, we'll use a specific interpolation method. I've defined two below. One that will do linear interpolation and one that will use cosine for a smoother transition between points.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/8193345.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Finally we use this smooth interpolation to perform the perlin noise function. A couple of interesting co-effecients that are provided to the algorithm are &quot;octaves&quot; and &quot;persistence&quot;. &quot;octaves&quot; defines how many iterations that will be performed and &quot;persistence&quot; defines how much of the spectrum we'll utilise. It's highly interactive to the main curve co-effecients: frequency and amplitude.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/8193366.js&quot;&gt;&lt;/script&gt; This now provides us with a way to create a map (or 2d array) to produce images much like I'd pasted in above. Here is a typical build loop.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/8193381.js&quot;&gt;&lt;/script&gt; That should be enough to get you going.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Follow up to a Camera Implementation</title>
   <link href="http://tuttlem.github.io/2013/12/30/follow-up-to-a-camera-implementation/"/>
   <updated>2013-12-30T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/12/30/follow-up-to-a-camera-implementation</id>
   <content type="html">&lt;h1&gt;Follow up to a Camera Implementation&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction &lt;/h3&gt;In a &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/12/a-camera-implementation-in-c.html&quot;&gt;previous post&lt;/a&gt; I'd written about a simple camera implementation that you can use in projects of your own. This post I'll show how I've implemented this camera with some mouse handling routines to make it feel like you're orienting your head with the mouse.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;The Idea . . .&lt;/h3&gt;We'll capture all of the mouse movements given in an application and see how far the mouse deviates from a given origin point. I think that the most sane origin point to go from is the center of your window.&lt;br /&gt;&lt;br /&gt;For each movement that the mouse makes from the center of the window, we need to:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Determine how much movement occurred on the x axis&lt;/li&gt;&lt;li&gt;Determine how much movement occurred on the y axis&lt;/li&gt;&lt;li&gt;Deaden this movement by a co-efficient to simulate mouse &quot;sensitivity&quot;&lt;/li&gt;&lt;li&gt;Set the yaw and pitch (head up/down, left/right) of the camera&lt;/li&gt;&lt;li&gt;Reset the mouse back to the origin point&lt;/li&gt;&lt;/ul&gt;Here's how I've done it in code:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/8179902.js&quot;&gt;&lt;/script&gt; You can see that I'm using GLUT to do these demos. The only GLUT-specific piece of code here is the warp command which puts the mouse back onto the origin point. You should have an equivalent function to do the same in the framework of your choice.&lt;br /&gt;&lt;br /&gt;Well, there you have it. You can now orient your camera using your mouse.&amp;nbsp; &lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A Camera Implementation in C++</title>
   <link href="http://tuttlem.github.io/2013/12/30/a-camera-implementation-in-c/"/>
   <updated>2013-12-30T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/12/30/a-camera-implementation-in-c</id>
   <content type="html">&lt;h1&gt;A Camera Implementation in C++&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;One of the most important elements of any 3D application is its camera. A camera allows you to move around in your world and orient your view. In today's post, I'll put together a code walk through that will take you through a simple camera implementation.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;The Concept&lt;/h3&gt;There are two major components of any camera. They are position and orientation. Position is fairly easy to grasp, it's just where the camera is and is identified using a normal 3-space vector.&lt;br /&gt;&lt;br /&gt;The more difficult of the two concepts is orientation. The best description for this that I've found is on the &lt;a href=&quot;http://en.wikipedia.org/wiki/Flight_dynamics&quot;&gt;Flight Dynamics&lt;/a&gt; page on wikipedia. The following image has been taken from that article and it outlines the plains that orientation can occur. Of course, the image's subject is an aircraft but the same concepts apply to a camera's orientation:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-ps-FvMLXC0U/UsEQcjCw5gI/AAAAAAAAAxk/v-ZbdV9aAfc/s1600/Rollpitchyawplain.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;209&quot; src=&quot;http://2.bp.blogspot.com/-ps-FvMLXC0U/UsEQcjCw5gI/AAAAAAAAAxk/v-ZbdV9aAfc/s320/Rollpitchyawplain.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The &quot;pitch&quot; describes the orientation around the x-axis, the &quot;yaw&quot; describes the orientation around the y-axis and the &quot;roll&quot; describes the orientation around the z-axis.&lt;br /&gt;&lt;br /&gt;With all of this information on board, the requirements of our camera should become a little clearer. We need to keep track of the following about the camera:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Position&lt;/li&gt;&lt;li&gt;Up orientation (yaw axis)&lt;/li&gt;&lt;li&gt;Right direction (pitch axis)&lt;/li&gt;&lt;li&gt;Forward (or view) direction (roll axis)&lt;/li&gt;&lt;/ul&gt;&amp;nbsp;We'll also keep track of how far we've gone around the yaw, pitch and roll axis.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Some Maths (and code)&lt;/h3&gt;There's a handful of really useful equations that are going to help us out here. With all of the information that we'll be managing and how tightly related each axis is considering they're all relating to the same object - you can see how interactive it can be just by modifying one attribute.&lt;br /&gt;&lt;br /&gt;When the &lt;b&gt;pitch&lt;/b&gt; changes:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;forwardVector = (forwardVector * cos(pitch)) + (upVector * sin(pitch))&lt;br /&gt;upVector = forwardVector x rightVector&lt;/pre&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/8178594.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;When the &lt;b&gt;yaw&lt;/b&gt; changes:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;forwardVector = (forwardVector * cos(yaw)) - (rightVector * sin(yaw))&lt;br /&gt;rightVector = forwardVector x upVector&lt;/pre&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/8178620.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;When the &lt;b&gt;roll&lt;/b&gt; changes:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;rightVector = (rightVector * cos(roll)) + (upVector * sin(roll))&lt;br /&gt;upVector = forwardVector x rightVector&lt;/pre&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/8178660.js&quot;&gt;&lt;/script&gt; Ok, so that's it for orientation. Reading through the equations above, you can see that the calculation of the forward vector comes out of some standard rotations. The &quot;x&quot; operator that I've used above denotes vector &lt;b&gt;cross product&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;Now that we're keeping track of our current viewing direction, up direction and right direction; performing camera movements is really easy.&lt;br /&gt;&lt;br /&gt;I've called these &quot;advance&quot; (move along the forward plane), &quot;ascend&quot; (move along the up plane) and &quot;strafe&quot; (move along the right plane).&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/8178706.js&quot;&gt;&lt;/script&gt; All we are doing here is just moving along those planes that have been defined for us via orientation. Movement is simple.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Integrating&lt;/h3&gt;All of this code/math is great up until we need to apply it in our environments. Most of the work that I do centralises around OpenGL, so I've got a very handy utility function (from GLU) that I use called &lt;a href=&quot;http://www.opengl.org/sdk/docs/man2/xhtml/gluLookAt.xml&quot;&gt;gluLookAt&lt;/a&gt;. Plugging these values in is rather simple:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/8178731.js&quot;&gt;&lt;/script&gt; We calculate our viewpoint as (position - forwardVector) and really just plug the literal values into this function. There is a lot of information on the gluLookAt documentation page that you can use if OpenGL isn't your flavor to simulate what it does.&lt;br /&gt;&lt;br /&gt;That's it for a simple camera! &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Getting started with GLUT in Linux</title>
   <link href="http://tuttlem.github.io/2013/12/28/getting-started-with-glut-in-linux/"/>
   <updated>2013-12-28T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/12/28/getting-started-with-glut-in-linux</id>
   <content type="html">&lt;h1&gt;Getting started with GLUT in Linux&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;a href=&quot;http://www.opengl.org/resources/libraries/glut/&quot;&gt;GLUT&lt;/a&gt; is the OpenGL Utility Toolkit which is a standard set of APIs that you should be able to use on any platform to write OpenGL programs. It takes care of the boilerplate code that your applications would need to integrate with the host windowing system. More can be found about GLUT on its &lt;a href=&quot;http://www.opengl.org/resources/libraries/glut/&quot;&gt;website&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Today's post, I'll focus on getting your Linux environment up to speed to start writing programs with this framework.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Installation&lt;/h3&gt;In order to write programs using this library, you'll need to install the development library. Using your favorite package manager, you'll need to install freeglut.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo apt-get install freeglut3-dev&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;After that's finished, it's time to write a test application to make sure everything went to plan.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;A Simple Example&lt;/h3&gt;The following program will just open a window and continually clear the window.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/8156737.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Putting this code into &quot;test.c&quot;, we built it into a program with the following command:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ gcc test.c -lGL -lGLU -lglut -o test&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;That's it! Run &quot;test&quot; at the command prompt and if everything has gone to plan, you've installed freeglut correctly!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Diving into OpenCL</title>
   <link href="http://tuttlem.github.io/2013/11/27/diving-into-opencl/"/>
   <updated>2013-11-27T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/11/27/diving-into-opencl</id>
   <content type="html">&lt;h1&gt;Diving into OpenCL&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;In a &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/11/setup-debian-for-opencl-development.html&quot;&gt;previous article&lt;/a&gt;&amp;nbsp;I'd put together a walk through on how to get your development environment ready to write some &lt;a href=&quot;http://www.khronos.org/opencl/&quot;&gt;OpenCL&lt;/a&gt; code. This article by itself isn't of much use unless you can write some code already.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Today's post will be a walk through on writing your first OpenCL program. This example, much like a lot of the other entry-level OpenCL development tutorials will focus on performing addition between two lists of floating point numbers.&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;Lots to learn&lt;/h3&gt;&lt;div&gt;Unfortunately, OpenCL is a topic that brings a very steep learning curve. In order to understand even the most simple of programs you need to read a fair bit of code and hopefully be aware of what it's doing. Before we dive into any implementation, I'll take you on a brief tour of terms, types and definitions that will help you to understanding the code as it's presented.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;cl_platform_id&lt;/b&gt;&lt;br /&gt;&lt;div&gt;A cl_platform_id is obtained using &lt;a href=&quot;http://www.khronos.org/registry/cl/sdk/1.0/docs/man/xhtml/clGetPlatformIDs.html&quot;&gt;clGetPlatformIDs&lt;/a&gt;. A platform in OpenCL refers to the host execution environment and any attached devices. Platforms are what allow OpenCL to share resources and execute programs.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;cl_device_id&lt;/b&gt;&lt;br /&gt;&lt;div&gt;A cl_device_id is obtained using &lt;a href=&quot;http://www.khronos.org/registry/cl/sdk/1.0/docs/man/xhtml/clGetDeviceIDs.html&quot;&gt;clGetDeviceIDs&lt;/a&gt;. It's how your program will refer to the devices that your code will run on. A device is how OpenCL refers to &quot;something&quot; that will execute code (CPU, GPU, etc).&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;cl_context&lt;/b&gt;&lt;br /&gt;&lt;div&gt;A cl_context is obtained using &lt;a href=&quot;http://www.khronos.org/registry/cl/sdk/1.0/docs/man/xhtml/clCreateContext.html&quot;&gt;clCreateContext&lt;/a&gt;. A context is established across OpenCL devices. It's what OpenCL will use to manage command-queues, memory, program and kernel objects. It provides the ability to execute a kernel across many devices.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;cl_program&lt;/b&gt;&lt;br /&gt;&lt;div&gt;A cl_program is created from actual (string) source-code at runtime using &lt;a href=&quot;http://www.khronos.org/registry/cl/sdk/1.0/docs/man/xhtml/clCreateProgramWithSource.html&quot;&gt;clCreateProgramWithSource&lt;/a&gt;. They're created in conjunction with your context so that program creation is aware of where it'll be expected to run.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;After the cl_program reference is successfully established, the host program would typically call &lt;a href=&quot;http://www.khronos.org/registry/cl/sdk/1.0/docs/man/xhtml/clBuildProgram.html&quot;&gt;clBuildProgram&lt;/a&gt;&amp;nbsp;to take the program from its source code (string) state into an executable (binary) state.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;cl_command_queue&lt;/b&gt;&lt;br /&gt;&lt;div&gt;A cl_command_queue is established using &lt;a href=&quot;http://www.khronos.org/registry/cl/sdk/1.0/docs/man/xhtml/clCreateCommandQueue.html&quot;&gt;clCreateCommandQueue&lt;/a&gt;. A command queue is how work is scheduled to a device for execution. &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;cl_kernel&lt;/b&gt;&lt;br /&gt;&lt;div&gt;A cl_kernel is created using &lt;a href=&quot;http://www.khronos.org/registry/cl/sdk/1.0/docs/man/xhtml/clCreateKernel.html&quot;&gt;clCreateKernel&lt;/a&gt;. A kernel is a function contained within a compiled cl_program object. It's identified within the source code with a __kernel qualifier. You set the argument list for a cl_kernel object using &lt;a href=&quot;http://www.khronos.org/registry/cl/sdk/1.0/docs/man/xhtml/clSetKernelArg.html&quot;&gt;clSetKernelArg&lt;/a&gt;. To glue it all together, you use &lt;a href=&quot;http://www.khronos.org/registry/cl/sdk/1.0/docs/man/xhtml/clEnqueueNDRangeKernel.html&quot;&gt;clEnqueueNDRangeKernel&lt;/a&gt;&amp;nbsp;or &lt;a href=&quot;http://www.khronos.org/registry/cl/sdk/1.0/docs/man/xhtml/clEnqueueTask.html&quot;&gt;clEnqueueTask&lt;/a&gt;&amp;nbsp;to enqueue a task on the command queue to execute a kernel.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A side note here is that you can use &lt;a href=&quot;http://www.khronos.org/registry/cl/sdk/1.0/docs/man/xhtml/clEnqueueNativeKernel.html&quot;&gt;clEnqueueNativeKernel&lt;/a&gt;&amp;nbsp;to execute native C/C++ code that isn't compiled by OpenCL.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;At least if you can identify some form of meaning when you come across these type names, you won't be totally in the dark. Next up, we'll create a host program and OpenCL routine - compile, build and run!&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;The Host&lt;/h3&gt;&lt;div&gt;The host application is responsible for engaging with the OpenCL api to setup all of the objects described above. It's also responsible for locating the OpenCL source code and making it available for compilation at run time.&lt;br /&gt;&lt;br /&gt;In this first snippet of code, we use the OpenCL api to establish the management platform and devices that are available to execute our code. Majority of the OpenCL api standardises itself around returning error codes from all of the functions.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7669868.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;At this point, we have &quot;platform&quot; which will (&lt;i&gt;hopefully&lt;/i&gt;) contain a platform ID identifying our management platform and &quot;device&quot; should either refer to the GPU or CPU (failing to find a GPU).&lt;br /&gt;&lt;div&gt;&lt;br /&gt;The next step is to create a context and your OpenCL program from source.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7669938.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;We've done just that here, but the program isn't quite yet ready for execution. Before we can start using this, we need to build the program. The build process is very much a compilation &amp;amp; linking process that involves its own set of log message outputs, etc. You can make this part of your program as elaborate as you'd like. Here's an example compilation process.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7670168.js&quot;&gt;&lt;/script&gt; We've got a platform, device, context and program that's been built. We now need to shift contexts from the host program to the actual OpenCL code that we'll execute for the purposes of this example. We need to understand what the inputs, outputs, used resources, etc. of the OpenCL code is before we can continue to write the rest of our host. &lt;br /&gt;&lt;br /&gt;&lt;h3&gt;The OpenCL Code&lt;/h3&gt;&lt;div&gt;The main purpose of OpenCL code is really to operate arithmetically on arrays (or strings) of data. The example that I'm suggesting for the purposes of this article takes in two source arrays and produces another array which are the sum of each index. i.e.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;c[0] = a[0]&amp;nbsp;+ b[0]&lt;br /&gt;c[1] = a[1]&amp;nbsp;+ b[1]&lt;br /&gt;. . .&lt;br /&gt;. . .&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;As above, the source arrays are &quot;a&quot; and &quot;b&quot;. The result array (holding the sum of each source array at each index) is &quot;c&quot;.&lt;br /&gt;&lt;br /&gt;Here's the (rather simple) OpenCL code to achieve this.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7675033.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;That's all there is to it. Things to note are, any function that is to be called in the OpenCL context is called a &quot;kernel&quot;. Kernel's must be decorated with the &quot;__kernel&quot; modifier. In this example, the parameters that are passed in are decorated with the &quot;__global&quot; modifier. This tells OpenCL that these are objects allocated from the global memory pool. You can read up more about these modifiers &lt;a href=&quot;http://www.khronos.org/registry/cl/sdk/1.0/docs/man/xhtml/global.html&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;The final thing to note is the use of &lt;a href=&quot;http://www.khronos.org/registry/cl/sdk/1.0/docs/man/xhtml/get_global_id.html&quot;&gt;get_global_id&lt;/a&gt;. It's what gives us the particular index to process in our array here. The parameter that's supplies allows you to work with 1, 2 or 3 dimensional arrays. Anything over this, the arrays need to be broken down to use a smaller dimension count.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;h3&gt;Back to the Host&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Back in context of the host, we'll create the command queue and kernel objects. The command queue allows us to send commands to OpenCL like reading &amp;amp; writing to buffers or executing kernel code. The following code shows the creation of the command queue and kernel.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7675267.js&quot;&gt;&lt;/script&gt; Notice that we mentioned the kernel by name here. A kernel object refers to the function!&lt;br /&gt;&lt;br /&gt;Now that we have a function to execute (or kernel) we now need to be able to pass data to the function. We also need to be able to read the result once processing has finished. Our first job is allocating buffers that OpenCL will be aware of to handle these arrays.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7675181.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;In the above snippet, we've defined the source arrays and we've also created buffers that will hold the information (for use in our OpenCL code). Now all we need to do is to feed the source arrays into the buffers and supply all of the buffers as arguments to our kernel.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7675340.js&quot;&gt;&lt;/script&gt; Now we invoke OpenCL to do the work. In doing this, we need to supply the invocation with a global size and local size. Global size is used to specify the total number of work items being processed. In our case, this is ARRAY_SIZE. Local size is used as the number of work items in each local group. Local size needs to be a divisor of global size. For simplicity, I've set these both to &quot;ARRAY_SIZE&quot;.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7675450.js&quot;&gt;&lt;/script&gt; After all of the work is completed, we really want to take a look at the result. We'll send another request to the command queue to read that result array back into local storage. From there, we'll be able to print the results to screen.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7675493.js&quot;&gt;&lt;/script&gt; Fantastic. Everything's on screen now, we can see the results. All we'll do from here is clean up our mess and get out.&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7675542.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;What a marathon! Hopefully you've learnt something from this post. It's a lot to take in to get a &quot;Hello, World&quot; level application up and running.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Setup Debian for OpenCL Development</title>
   <link href="http://tuttlem.github.io/2013/11/25/setup-debian-for-opencl-development/"/>
   <updated>2013-11-25T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/11/25/setup-debian-for-opencl-development</id>
   <content type="html">&lt;h1&gt;Setup Debian for OpenCL Development&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;&lt;a href=&quot;http://www.khronos.org/opencl/&quot;&gt;OpenCL&lt;/a&gt; (or Open Computing Language) is a framework that allows you to write code across different connected devices to your computer. Code that you write can execute on CPUs, GPUs, DPSs amongst other pieces of hardware. The framework itself is a standard that puts the focus on running your code across these devices but also emphasises parallel computing.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Today's post will just be on getting your development environment setup on Debian Wheezy to start writing some code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Installation&lt;/h3&gt;&lt;div&gt;The installation process is pretty straight forward, but there are some choices in libraries. The major vendors (Intel, NVIDIA and AMD) all have development libraries that are installable from Debian's package repository. There's plenty of banter on the internet as to who's is better for what purpose.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;First off, we need to install the header files we'll use to create OpenCL programs.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo apt-get install opencl-headers&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This has now put all of the development headers in place for you to compile some code.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: plain&quot;&gt;$ ls -al /usr/include/CL&lt;br /&gt;total 1060&lt;br /&gt;drwxr-xr-x  2 root root   4096 Nov 25 22:51 .&lt;br /&gt;drwxr-xr-x 56 root root   4096 Nov 25 22:51 ..&lt;br /&gt;-rw-r--r--  1 root root   4859 Nov 15  2011 cl_d3d10.h&lt;br /&gt;-rw-r--r--  1 root root   4853 Apr 18  2012 cl_d3d11.h&lt;br /&gt;-rw-r--r--  1 root root   5157 Apr 18  2012 cl_dx9_media_sharing.h&lt;br /&gt;-rw-r--r--  1 root root   9951 Nov 15  2011 cl_ext.h&lt;br /&gt;-rw-r--r--  1 root root   2630 Nov 17  2011 cl_gl_ext.h&lt;br /&gt;-rw-r--r--  1 root root   7429 Nov 15  2011 cl_gl.h&lt;br /&gt;-rw-r--r--  1 root root  62888 Nov 17  2011 cl.h&lt;br /&gt;-rw-r--r--  1 root root 915453 Feb  4  2012 cl.hpp&lt;br /&gt;-rw-r--r--  1 root root  38164 Nov 17  2011 cl_platform.h&lt;br /&gt;-rw-r--r--  1 root root   1754 Nov 15  2011 opencl.h&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Secondly, we need to make a choice in what library we'll use:&lt;br /&gt;&lt;br /&gt;The &lt;b&gt;amd-opencl-dev &lt;/b&gt;package will install AMD's implementation, which you can read up on &lt;a href=&quot;http://developer.amd.com/resources/heterogeneous-computing/opencl-zone/&quot;&gt;here&lt;/a&gt;. NVIDIA's package is installable through the &lt;b&gt;nvidia-opencl-dev&lt;/b&gt;&amp;nbsp;package which you can read up on &lt;a href=&quot;https://developer.nvidia.com/opencl&quot;&gt;here&lt;/a&gt;. Finally, Intel's implementation is available through the &lt;b&gt;beignet-dev&lt;/b&gt;&amp;nbsp;package and you can read up on their implementation &lt;a href=&quot;http://software.intel.com/en-us/vcsource/tools/opencl&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;I went with AMD's.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo apt-get install amd-opencl-dev&lt;/pre&gt;&lt;br /&gt;From here, it's time to write some code. I'll have some more blog posts on the way which will be walk-throughs for your first applications.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing a Single Node Hadoop Server on Debian Wheezy</title>
   <link href="http://tuttlem.github.io/2013/11/24/installing-a-single-node-hadoop-server-on-debian-wheezy/"/>
   <updated>2013-11-24T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/11/24/installing-a-single-node-hadoop-server-on-debian-wheezy</id>
   <content type="html">&lt;h1&gt;Installing a Single Node Hadoop Server on Debian Wheezy&lt;/h1&gt;
&lt;div class='post'&gt;
Today's post is just a run sheet of steps to take to get a single-node &lt;a href=&quot;http://hadoop.apache.org/&quot;&gt;Hadoop&lt;/a&gt; server up and running on &lt;a href=&quot;https://wiki.debian.org/DebianWheezy&quot;&gt;Debian Wheezy&lt;/a&gt;. Keep in mind, this guide is for the 1.x.x series release of Hadoop.&lt;br /&gt;&lt;br /&gt;1. Install java 6 jdk (&lt;a href=&quot;http://ddmytrenko.blogspot.com.au/2012/02/installing-sun-java-6-jdk-on-debian.html&quot;&gt;http://ddmytrenko.blogspot.com.au/2012/02/installing-sun-java-6-jdk-on-debian.html&lt;/a&gt;)&lt;br /&gt;&lt;br /&gt;Add a line to apt sources for &quot;squeeze non-free&quot;&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo apt-get update&lt;br /&gt;$ sudo apt-get install sun-java6-jdk&lt;br /&gt;$ sudo update-java-alternatives -s java-6-sun&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;2. Add a haddop user&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo addgroup hadoop&lt;br /&gt;$ sudo adduser --ingroup hadoop hduser&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;3. Disable ipv6: add the following to the end of /etc/sysctl.conf&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: plain&quot;&gt;#disable ipv6&lt;br /&gt;net.ipv6.conf.all.disable_ipv6 = 1&lt;br /&gt;net.ipv6.conf.default.disable_ipv6 = 1&lt;br /&gt;net.ipv6.conf.lo.disable_ipv6 = 1&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;4. Add the following to ~/.bashrc&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;# Set Hadoop-related environment variables&lt;br /&gt;export HADOOP_HOME=/opt/hadoop&lt;br /&gt;&lt;br /&gt;# Set JAVA_HOME (we will also configure JAVA_HOME directly for Hadoop later on)&lt;br /&gt;export JAVA_HOME=/opt/jvm/jdk1.6.0_38&lt;br /&gt;&lt;br /&gt;# Add Hadoop bin/ and JAVA bin/ directory to PATH&lt;br /&gt;export PATH=$PATH:$HADOOP_HOME/bin&lt;br /&gt;export PATH=$PATH:$JAVA_HOME/bin&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;5. Download the &quot;bin&quot; flavour from here: &lt;a href=&quot;http://apache.mirror.uber.com.au/hadoop/common/stable/&quot;&gt;http://apache.mirror.uber.com.au/hadoop/common/stable/&lt;/a&gt; extract it, move it into /opt under the name &quot;hadoop&quot;&lt;br /&gt;&lt;br /&gt;6. hadoop-env.sh&lt;br /&gt;&lt;br /&gt;Open opt/hadoop/conf/hadoop-env.sh and set the JAVA_HOME environment variable to the Sun JDK/JRE 6 directory.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;# The java implementation to use.&amp;nbsp; Required.&lt;br /&gt;# export JAVA_HOME=/usr/lib/j2sdk1.5-sun&lt;br /&gt;to&lt;br /&gt;export JAVA_HOME=/opt/lib/jvm/java-6-sun&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;7. core-site.xml&lt;br /&gt;&lt;br /&gt;This is where Hadoop stores its Data.&lt;br /&gt;/opt/hadoop/conf/core-site.xml&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;&amp;lt;!-- In: conf/core-site.xml --&amp;gt;&lt;br /&gt;&amp;lt;!-- In: conf/core-site.xml --&amp;gt;&lt;br /&gt;&amp;lt;property&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;name&amp;gt;hadoop.tmp.dir&amp;lt;/name&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;value&amp;gt;/app/hadoop/tmp&amp;lt;/value&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;description&amp;gt;A base for other temporary directories.&amp;lt;/description&amp;gt;&lt;br /&gt;&amp;lt;/property&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;property&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;name&amp;gt;fs.default.name&amp;lt;/name&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;value&amp;gt;hdfs://localhost:54310&amp;lt;/value&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;description&amp;gt;The name of the default file system.&amp;nbsp; A URI whose&lt;br /&gt;&amp;nbsp; scheme and authority determine the FileSystem implementation.&amp;nbsp; The&lt;br /&gt;&amp;nbsp; uri's scheme determines the config property (fs.SCHEME.impl) naming&lt;br /&gt;&amp;nbsp; the FileSystem implementation class.&amp;nbsp; The uri's authority is used to&lt;br /&gt;&amp;nbsp; determine the host, port, etc. for a filesystem.&amp;lt;/description&amp;gt;&lt;br /&gt;&amp;lt;/property&amp;gt;&lt;br /&gt;&lt;/pre&gt;We need to create this directory and set ownership correctly:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ mkdir -p /app/hadoop/tmp&lt;br /&gt;$ chown hduser:hadoop /app/hadoop/tmp&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;8. mapred-site.xml&lt;br /&gt;&lt;br /&gt;vim mapred-site.xml&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;&amp;lt;!-- In: conf/mapred-site.xml --&amp;gt;&lt;br /&gt;&amp;lt;property&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;name&amp;gt;mapred.job.tracker&amp;lt;/name&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;value&amp;gt;localhost:54311&amp;lt;/value&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;description&amp;gt;The host and port that the MapReduce job tracker runs&lt;br /&gt;&amp;nbsp; at.&amp;nbsp; If &quot;local&quot;, then jobs are run in-process as a single map&lt;br /&gt;&amp;nbsp; and reduce task.&lt;br /&gt;&amp;nbsp; &amp;lt;/description&amp;gt;&lt;br /&gt;&amp;lt;/property&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;9. hdfs-site.xml&lt;br /&gt;&lt;br /&gt;vim hdfs-site.xml&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;&amp;lt;!-- In: conf/hdfs-site.xml --&amp;gt;&lt;br /&gt;&amp;lt;property&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;name&amp;gt;dfs.replication&amp;lt;/name&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;description&amp;gt;Default block replication.&lt;br /&gt;&amp;nbsp; The actual number of replications can be specified when the file is created.&lt;br /&gt;&amp;nbsp; The default is used if replication is not specified in create time.&lt;br /&gt;&amp;nbsp; &amp;lt;/description&amp;gt;&lt;br /&gt;&amp;lt;/property&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;10. Starting Hadoop (as hduser)&lt;br /&gt;&lt;br /&gt;Format the namenode&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ /opt/hadoop/bin/hadoop namenode -format&lt;/pre&gt;&lt;br /&gt;Start hadoop&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ /opt/hadoop/bin/start-all.sh&lt;/pre&gt;&lt;br /&gt;Up and running:&lt;br /&gt;&lt;br /&gt;NameNode daemon&lt;br /&gt;&lt;a href=&quot;http://localhost:50070/&quot;&gt;http://localhost:50070/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;JobTracker daemon&lt;br /&gt;&lt;a href=&quot;http://localhost:50030/&quot;&gt;http://localhost:50030/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;TaskTracker daemon&lt;br /&gt;&lt;a href=&quot;http://localhost:50060/&quot;&gt;http://localhost:50060/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Gouraud Shaing with Scan Line Polygons</title>
   <link href="http://tuttlem.github.io/2013/11/20/gouraud-shaing-with-scan-line-polygons/"/>
   <updated>2013-11-20T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/11/20/gouraud-shaing-with-scan-line-polygons</id>
   <content type="html">&lt;h1&gt;Gouraud Shaing with Scan Line Polygons&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;In my &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/11/scanline-based-filled-polygons.html&quot;&gt;previous post&lt;/a&gt;, we went through the basics of rasterising polygons on screen by use of horizontal lines. To sum up, we interpolated values along each edge of the polygon, collecting minimum and maximums for each y-axis instance.&lt;br /&gt;&lt;br /&gt;Today, we're going to define a colour value for each point on the polygon and interpolate the colours along each edge. This is the technique employed to draw polygons that are &lt;a href=&quot;http://en.wikipedia.org/wiki/Gouraud_shading&quot;&gt;Gouraud shaded&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;The Code&lt;/h3&gt;The structure of this is very similar to drawing a single colour block polygon. For a solid colour polygon, we interpolated the x values over the length of the y values. We'll now employ this same interpolation technique over the red, green, blue and alpha channels of each colour defined for each polygon point.&lt;br /&gt;&lt;br /&gt;Here's the scanline function.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7561758.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;An immediate code restructure difference here from the first tutorial, is I'm now passing an actual point object through as opposed to each component of each point being a function parameter. This is just to clean up the interface of these functions.&lt;br /&gt;&lt;br /&gt;We're creating differentials not only for x now but also the r, g, b and a components. These will form the start and ending colours for each horizontal line that we'll draw. We still have extra interpolation to do once we're in the horizontal line draw function as well. Here it is.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7561819.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Again, more interpolation of colour components. This is what will give us a smooth shading effect over the polygon.&lt;br /&gt;&lt;br /&gt;Finally, the actual polygon function is a piece of cake. It just gets a little more complex as we have to send in colours for each point defined.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7561874.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Aside from the interface changing (just to clean it up a bit) and managing r, g, b and a components - this hasn't really changed from the block colour version. If you setup this polygon draw in a render loop, you should end up with something like this:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-CiuOyHrMVSo/UoyhbG4z5OI/AAAAAAAAAw4/AcYzDBUEhmA/s1600/Screen+Shot+2013-11-20+at+9.47.20+pm.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;156&quot; src=&quot;http://1.bp.blogspot.com/-CiuOyHrMVSo/UoyhbG4z5OI/AAAAAAAAAw4/AcYzDBUEhmA/s320/Screen+Shot+2013-11-20+at+9.47.20+pm.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Smooth. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Scanline based filled Polygons</title>
   <link href="http://tuttlem.github.io/2013/11/19/scanline-based-filled-polygons/"/>
   <updated>2013-11-19T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/11/19/scanline-based-filled-polygons</id>
   <content type="html">&lt;h1&gt;Scanline based filled Polygons&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;In a &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/11/pixel-access-to-canvas-with-javascript.html&quot;&gt;previous post&lt;/a&gt; I laid down some foundation code to get access to the pixel buffer when in context of a HTML canvas. Good for those who have experience writing graphics code directly against the video buffer - it almost feels like you're writing to 0xA000 :-)&lt;br /&gt;&lt;br /&gt;Today's post will focus on drawing polygons to the screen using scan lines.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Scan lines&lt;/h3&gt;The whole idea here is that a polygon can be represented on screen as a series of horizontal lines. Take the following picture for example. You can see the red and blue horizontal lines making up the filling of the polygon.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-7VZcWuk1AkQ/UotS_qdPXrI/AAAAAAAAAwM/DlKjKBnH2lA/s1600/y.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;200&quot; src=&quot;http://1.bp.blogspot.com/-7VZcWuk1AkQ/UotS_qdPXrI/AAAAAAAAAwM/DlKjKBnH2lA/s200/y.png&quot; width=&quot;200&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;So, to define this all we do is take note of the minimum and maximum x values for every y-axis instance that there is a line on. We run through the array of values drawing horizontal lines at each instance, and then we have a polygon on screen - pretty easy.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Code&lt;/h3&gt;First of all, we'll define our drawing primitive for a horizontal line.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7544385.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;We pass in the two x values for the line to go between, the y value for the line to sit on. To help with the offset calculation we also pass in the width &quot;w&quot; to correctly calculate the pitch. Finally the colour components and buffer to draw to are passed in. Setting this code up in a run loop, you end up with something like this:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-QMhBzwZnDUI/UotUjD3Cj4I/AAAAAAAAAwY/JxoFPAPDovE/s1600/Screen+Shot+2013-11-19+at+10.06.53+pm.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;222&quot; src=&quot;http://2.bp.blogspot.com/-QMhBzwZnDUI/UotUjD3Cj4I/AAAAAAAAAwY/JxoFPAPDovE/s320/Screen+Shot+2013-11-19+at+10.06.53+pm.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;Yep, there's lots of horizontal lines.&lt;br /&gt;&lt;br /&gt;Referring to our horizontal line diagram above, we still need a way to walk the edges of the polygon so that we can get the minimum and maximum x values to start drawing. Because our basic unit is the pixel (considering we're rasterising to a pixelated display), we can easily calculate the gradient of the line that we need by:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;(change in x) / (change in y)&lt;br /&gt;&lt;br /&gt;For a line given by (x1, y1) - (x2, y2), this translates into:&lt;br /&gt;&lt;br /&gt;(x2 - x1) / (y2 - y1)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Taken out of context of maths, this just says to us: we want to walk from x1 to x2 using (y2 - y1) steps.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7544449.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;From the code above, we treat x1, y1 as the starting point and x2, y2 as the ending point. Our for-loop is biased in the positive direction, so it's important for us to flip the values if they come in inverted.&lt;br /&gt;&lt;br /&gt;The edges array that's passed in is prepared by the caller of this function. It's initialized with very unreasonable minimum and maximum values. We than run over all 4 polygon edges&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;(x1, y1) -&amp;gt; (x2, y2)&lt;br /&gt;&lt;br /&gt;(x2, y2) -&amp;gt; (x3, y3)&lt;br /&gt;&lt;br /&gt;(x3, y3) -&amp;gt; (x4, y4)&lt;br /&gt;&lt;br /&gt;(x4, y4) -&amp;gt; (x1, y1)&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;At the end of this process, &quot;edges&quot; is full of minimum/maximum values ready for drawing. Here's the code for the polygon.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7544554.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;This really is just putting all the pieces together. The building of the edges array is important - as is using the y co-ordinate (adjusted back to zero by proxy of the minimum y value) as an array index.&lt;br /&gt;&lt;br /&gt;Once you've got this setup in a random position &amp;amp; colour loop, you'll end up with something like this:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-D2yDU9iTdc0/UotZcoZ2jtI/AAAAAAAAAwo/QCW0Qi8rhSQ/s1600/Screen+Shot+2013-11-19+at+10.27.57+pm.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;200&quot; src=&quot;http://3.bp.blogspot.com/-D2yDU9iTdc0/UotZcoZ2jtI/AAAAAAAAAwo/QCW0Qi8rhSQ/s320/Screen+Shot+2013-11-19+at+10.27.57+pm.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;mmmm... Tasty.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Purging all of the data within Solr</title>
   <link href="http://tuttlem.github.io/2013/11/19/purging-all-of-the-data-within-solr/"/>
   <updated>2013-11-19T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/11/19/purging-all-of-the-data-within-solr</id>
   <content type="html">&lt;h1&gt;Purging all of the data within Solr&lt;/h1&gt;
&lt;div class='post'&gt;
During the test phases of getting your software setup, you'll find it useful to completely toast what ever data you've already indexed to start fresh.&lt;br /&gt;&lt;br /&gt;This is as simple as issuing a delete query with open criteria (*.*). The full query should translate to &amp;lt;delete&amp;gt;&amp;lt;query&amp;gt;*.*&amp;lt;/query&amp;gt;&amp;lt;/delete&amp;gt;.&lt;br /&gt;&lt;br /&gt;As a URL it'll look like this:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: plain&quot;&gt;http://[your solr server]:8080/solr/update?&lt;br /&gt;stream.body=%3Cdelete%3E%3Cquery%3E*:*%3C/query%3E%3C/delete%3E&amp;amp;commit=true&lt;/pre&gt;&lt;br /&gt;Note that there is a commit at the end of this URL which will perform the delete and commit the result all in the one invocation.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Pixel Access to the Canvas with Javascript</title>
   <link href="http://tuttlem.github.io/2013/11/18/pixel-access-to-the-canvas-with-javascript/"/>
   <updated>2013-11-18T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/11/18/pixel-access-to-the-canvas-with-javascript</id>
   <content type="html">&lt;h1&gt;Pixel Access to the Canvas with Javascript&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;Gaining pixel-level access using the HTML canvas opens up some possibilities for some frame-buffer style rasterisation. Today's post will focus on the code required to get you access to this array.&lt;br /&gt;&lt;br /&gt;Here's the code on how to get started:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7526425.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;First of all, we programmatically create our canvas object using &lt;a href=&quot;http://www.w3schools.com/jsref/met_document_createelement.asp&quot;&gt;document.createElement&lt;/a&gt;. Using the inner dimensions of the window, we can then set the canvas' size. Of course this can be custom set to the dimensions you require - I just like to take over the whole window!&lt;br /&gt;&lt;br /&gt;Using the &lt;a href=&quot;http://www.w3schools.com/tags/ref_canvas.asp&quot;&gt;canvas object&lt;/a&gt;, we then pull out the drawing context with getContext. The next part, using &lt;a href=&quot;http://www.w3schools.com/tags/canvas_createimagedata.asp&quot;&gt;createImageData&lt;/a&gt; we then get a reference to the frame-buffer to draw to. This gives us read/write access to the canvas through an array.&lt;br /&gt;&lt;br /&gt;Finally, we'll take note of the width and height (this will come in handy later) and then pop the canvas onto the page.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Frame-buffer structure&lt;/h3&gt;So, I say &quot;frame-buffer&quot; - but it's just an array. It's quite nicely laid out such that pixels start at every 4 elements within the array. The first element being the red component, second is green, third is blue and the fourth is the alpha.&lt;br /&gt;&lt;br /&gt;Calculating an offset into the array is a piece of cake. For example, take the following piece of code which will allow you to set a single pixel on the frame-buffer.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7526558.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;The main part to focus on here is the calculation of the offset. Above, I said it was important to take note of the dimensions - we're only using the width here. This is pretty straight forward calculation of an offset within a linear data segment with Cartesian co-ordinates.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Flip out!&lt;/h3&gt;Now that we've drawn all of the data to the image buffer (frame-buffer), we need a way to get it back onto our canvas. This is simply done using &lt;a href=&quot;http://www.w3schools.com/tags/canvas_putimagedata.asp&quot;&gt;putImageData&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/7526631.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;That's it for now. &lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;div class='comment'&gt;
&lt;div class='author'&gt;SEO Dewintec&lt;/div&gt;
&lt;div class='content'&gt;
This comment has been removed by a blog administrator.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Mpt Statusd Detected Non Optimal Raid Status</title>
   <link href="http://tuttlem.github.io/2013/11/18/mpt-statusd-detected-non-optimal-raid-status/"/>
   <updated>2013-11-18T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/11/18/mpt-statusd-detected-non-optimal-raid-status</id>
   <content type="html">&lt;h1&gt;Mpt Statusd Detected Non Optimal Raid Status&lt;/h1&gt;
&lt;div class='post'&gt;
After installing Debian within a few VMWare virtual machines, I keep getting a rather annoying and persistent &quot;mpt-statusd: detected non-optimal RAID status&quot; spamming out my unix mail box as well as /var/log/messages.&lt;br /&gt;&lt;br /&gt;Simplest solution that I've come across is to just . . .&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo apt-get remove mpt-status&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Yup! That's it.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Complementing MongoDB with Full Text Search from Solr</title>
   <link href="http://tuttlem.github.io/2013/11/18/complementing-mongodb-with-full-text-search-from-solr/"/>
   <updated>2013-11-18T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/11/18/complementing-mongodb-with-full-text-search-from-solr</id>
   <content type="html">&lt;h1&gt;Complementing MongoDB with Full Text Search from Solr&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;MongoDB is a great database, but one area that I've noticed it's been deficient in is full text search. Thankfully, there are some great tools around that we can employ to compliment Mongo and give it this functionality.&lt;br /&gt;&lt;br /&gt;Today's post will be a walk through to getting Solr &amp;amp; mongo-connector installed and configured on Debian Wheezy.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Get the software&lt;/h3&gt;First up, install Solr on tomcat with the tomcat administration tools&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo apt-get install solr-tomcat tomcat6-admin&lt;/pre&gt;&lt;br /&gt;Straight after this has installed, you'll need to configure a user to access these applications. Use your favorite text editor and open /etc/tomcat6/tomcat-users.xml. This file (like all of the configuration files) is really well commented. The steps I took here were:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Added a &quot;role&quot; node for &quot;manager-gui&quot;&lt;/li&gt;&lt;li&gt;Added &quot;manager-gui&quot; as a role to the &quot;tomcat&quot; user&lt;/li&gt;&lt;/ul&gt;In the end, you should have something sort-of like this:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: plain&quot;&gt;&amp;lt;role rolename=&quot;tomcat&quot;/&amp;gt;&lt;br /&gt;&amp;lt;role rolename=&quot;manager-gui&quot;/&amp;gt;&lt;br /&gt;&amp;lt;user username=&quot;tomcat&quot; password=&quot;tomcat&quot; roles=&quot;tomcat,manager-gui&quot;/&amp;gt; &lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Now that you've finished configuring all of the user access, restart tomcat.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo service tomcat restart&lt;/pre&gt;&lt;br /&gt;You can now check that tomcat is up and running by pointing your web browser at &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt;. When you click on the manager-app link, you'll be prompted for a username and password. As defined by the user configuration above, the username is &quot;tomcat&quot; and the password is &quot;tomcat&quot;. Have a click around, you should also see Solr installed in there also. &lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Solr Schema&lt;/h3&gt;Now it's time we tell Solr exactly what we want to index. Remember, it's going to be a client to our mongo database - so any interesting fields that you want indexed will need to be mentioned here.&lt;br /&gt;&lt;br /&gt;Solr's schema file is found at /etc/solr/conf/schema.xml. Everyone's requirements are way to broad for me to go into depth here on what to do, but it would be a good time to look up the documentation and learn about how you want your data attributed: &lt;a href=&quot;http://wiki.apache.org/solr/SchemaXml&quot;&gt;http://wiki.apache.org/solr/SchemaXml&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Connecting to Mongo&lt;/h3&gt;Next, we're going to connect Solr to mongo using &lt;a href=&quot;http://blog.mongodb.org/post/29127828146/introducing-mongo-connector&quot;&gt;mongo-connect&lt;/a&gt;. There's some more software that's needed to be installed here. mongo-connect is a python package that listens to mongo's oplog for &quot;interesting&quot; things, and then stores them away into Solr for fast searching later.&lt;br /&gt;&lt;br /&gt;We will need pip.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo apt-get install python-dev python-pip&lt;/pre&gt;&lt;br /&gt;We're also going to need some xml dependencies that mongo-connect relies on.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo apt-get install libxml2 libxml2-dev libxslt-dev&lt;/pre&gt;&lt;br /&gt;Install the lxml &amp;amp; cssselect python packages&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo pip install lxml cssselect&lt;/pre&gt;&lt;br /&gt;Finally, we install the mongo-connector &lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo pip install mongo-connector&lt;/pre&gt;&lt;br /&gt;&lt;h3&gt;Running the connector&lt;/h3&gt;Now that you're all installed, it's time to start indexing some data. Again, everyone's requirements are going to be quite different - so it's a good time to go out and take a look at the &lt;a href=&quot;https://github.com/10gen-labs/mongo-connector&quot;&gt;mongo-connector github page&lt;/a&gt; to understand the full usage of the command.&lt;br /&gt;&lt;br /&gt;A typical execution of the command would look like this:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ mongo-connector -m localhost:27217 -t http://localhost:8080/solr -o oplog_progress.txt -n alpha.foo,test.test -u _id -k auth.txt -a admin -d ./doc_managers/solr_doc_manager.py&lt;/pre&gt;&lt;br /&gt;From here, mongo-connector listens to changes and stores them away in Solr so that your full text search facility has them available.&lt;br /&gt;&lt;br /&gt;That's it for Solr &amp;amp; MongoDB.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Developer Documentation on Linux</title>
   <link href="http://tuttlem.github.io/2013/11/17/developer-documentation-on-linux/"/>
   <updated>2013-11-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/11/17/developer-documentation-on-linux</id>
   <content type="html">&lt;h1&gt;Developer Documentation on Linux&lt;/h1&gt;
&lt;div class='post'&gt;
Here's a quick shortcut to getting all of the developer documentation you'll need installed on a Linux (debian) machine.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt; &lt;pre class=&quot;brush: shell&quot;&gt;$ sudo apt-get install manpages manpages-dev manpages-posix manpages-posix-dev gcc-doc&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing node.js on Wheezy</title>
   <link href="http://tuttlem.github.io/2013/11/11/installing-node-js-on-wheezy/"/>
   <updated>2013-11-11T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/11/11/installing-node-js-on-wheezy</id>
   <content type="html">&lt;h1&gt;Installing node.js on Wheezy&lt;/h1&gt;
&lt;div class='post'&gt;
Here's a quick guide to getting &lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt; up and running on Debian Wheezy.&lt;br /&gt;&lt;br /&gt;First of all, you'll need all of the development tools required to build node.js on your machine.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo apt-get install python g++ make checkinstall&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Next, grab the latest &lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt; source from their website and extract it into a local folder&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ wget -N http://nodejs.org/dist/node-latest.tar.gz&lt;br /&gt;$ tar -zxvf node-latest.tar.gz&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;After you've got the source, change into the extracted folder and build &lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt; (the version I got was 0.10.21)&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ cd node-v0.10.21&lt;br /&gt;$ ./configure&lt;br /&gt;$ sudo checkinstall&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;A package should have now been created for you to install with &lt;a href=&quot;https://wiki.debian.org/dpkg&quot;&gt;dpkg&lt;/a&gt;. You can install it with the following command:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo dpkg -i node_*&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Done!&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Java 6 on Wheezy</title>
   <link href="http://tuttlem.github.io/2013/11/07/java-6-on-wheezy/"/>
   <updated>2013-11-07T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/11/07/java-6-on-wheezy</id>
   <content type="html">&lt;h1&gt;Java 6 on Wheezy&lt;/h1&gt;
&lt;div class='post'&gt;
Due to Java being removed from the main repositories for Debian, getting Java installed on your Wheezy machine takes a couple of extra steps.&lt;br /&gt;&lt;br /&gt;The following is how to get Java 6 installed when using Debian Wheezy.&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Change your /etc/apt/sources.list to include squeeze repositories &lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;deb http://mirror.aarnet.edu.au/debian/ squeeze non-free&lt;/pre&gt;&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Update!&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo apt-get update&lt;/pre&gt;&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Install what you need&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ apt-cache search sun-java                                         &lt;br /&gt;ia32-sun-java6-bin - Sun Java(TM) Runtime Environment (JRE) 6 (32-bit)&lt;br /&gt;sun-java6-bin - Sun Java(TM) Runtime Environment (JRE) 6 (architecture dependent files)&lt;br /&gt;sun-java6-demo - Sun Java(TM) Development Kit (JDK) 6 demos and examples&lt;br /&gt;sun-java6-fonts - Lucida TrueType fonts (from the Sun JRE)&lt;br /&gt;sun-java6-javadb - Java(TM) DB, Sun Microsystems' distribution of Apache Derby&lt;br /&gt;sun-java6-jdk - Sun Java(TM) Development Kit (JDK) 6&lt;br /&gt;sun-java6-jre - Sun Java(TM) Runtime Environment (JRE) 6 (architecture independent files)&lt;br /&gt;sun-java6-plugin - The Java(TM) Plug-in, Java SE 6&lt;br /&gt;sun-java6-source - Sun Java(TM) Development Kit (JDK) 6 source files&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;After installation, tell the OS which java to use&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ sudo update-java-alternatives -s java-6-sun&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;That's it.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Performance Monitoring a Linux Environment</title>
   <link href="http://tuttlem.github.io/2013/07/11/performance-monitoring-a-linux-environment/"/>
   <updated>2013-07-11T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/07/11/performance-monitoring-a-linux-environment</id>
   <content type="html">&lt;h1&gt;Performance Monitoring a Linux Environment&lt;/h1&gt;
&lt;div class='post'&gt;
This post is just a list of links I've collected for looking at a Linux system's performance.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;10 Useful Sar (Sysstat) Examples for UNIX / Linux Performance Monitoring &lt;/b&gt;&lt;br /&gt;&lt;a href=&quot;http://www.thegeekstuff.com/2011/03/sar-examples/&quot;&gt;http://www.thegeekstuff.com/2011/03/sar-examples/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Isolating Linux High System Load &lt;/b&gt;&lt;br /&gt;&lt;a href=&quot;http://www.tummy.com/articles/isolating-heavy-load/&quot;&gt;http://www.tummy.com/articles/isolating-heavy-load/&lt;/a&gt; &lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MongoDB Performance Monitoring</title>
   <link href="http://tuttlem.github.io/2013/07/11/mongodb-performance-monitoring/"/>
   <updated>2013-07-11T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/07/11/mongodb-performance-monitoring</id>
   <content type="html">&lt;h1&gt;MongoDB Performance Monitoring&lt;/h1&gt;
&lt;div class='post'&gt;
This post is just a list of bookmarks I'll keep to refer to for MongoDB performance analysis.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;MongoDB Monitoring&lt;/b&gt;&lt;br /&gt;&lt;a href=&quot;http://blog.serverdensity.com/mongodb-monitoring/&quot;&gt;http://blog.serverdensity.com/mongodb-monitoring/&lt;/a&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>ConfigFile Basics in Haskell</title>
   <link href="http://tuttlem.github.io/2013/07/04/configfile-basics-in-haskell/"/>
   <updated>2013-07-04T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/07/04/configfile-basics-in-haskell</id>
   <content type="html">&lt;h1&gt;ConfigFile Basics in Haskell&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;One of the first things that I reach for when writing an application that will be used outside the context of my development sandbox is a configuration library. Not having statically compiled values for variables is quite a valuable position to be in once your application has been deployed.&lt;br /&gt;&lt;br /&gt;Today's post will take you from 0 to up and running with a package called &lt;a href=&quot;http://hackage.haskell.org/packages/archive/ConfigFile/1.0.5/doc/html/Data-ConfigFile.html&quot;&gt;ConfigFile&lt;/a&gt; that is specifically designed to serve your applications with configuration data.&lt;br /&gt;&lt;br /&gt;Most of the content in this post is lifted directly from the documentation, so you'll be better off reading through those to gain a deeper understanding of the library. This post is more of a short-cut to get up and running.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Configuration format&lt;/h3&gt;If you've had much experience with administering windows back in the day when INI files ruled the earth, you'll be right at home with &lt;a href=&quot;http://hackage.haskell.org/packages/archive/ConfigFile/1.0.5/doc/html/Data-ConfigFile.html&quot;&gt;ConfigFile&lt;/a&gt;. For those of you who have never seen it before, it's really easy and you can read up on it &lt;a href=&quot;http://en.wikipedia.org/wiki/INI_file&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Files are broken into sections which contain a list of key/value pairs - done!&lt;br /&gt;&lt;br /&gt;For today's example, the configuration file will look as follows:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5927536.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;We'll end up with two keys, &quot;path&quot; and &quot;filename&quot; that have corresponding values in the &quot;Location&quot; section.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Structure&lt;/h3&gt;The thing I like most about the part of the application is that we can make a nice record based data structure in Haskell that will marry up to how our configuration file looks. The simple file that we've defined above, would look like this:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5927562.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;Once we fill one of these up, you can see that it'll be pretty natural to access these details.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Reading and Building&lt;/h3&gt;Finally - we need to read the values out of the config file and get them into our structure. The following block of code will do that for us.&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5927615.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;There's a few interesting points in here to note. The Error Monad is being used here to keep track of any failures during the config read process. &lt;a href=&quot;http://hackage.haskell.org/packages/archive/mtl/latest/doc/html/Control-Monad-Error.html#v:runErrorT&quot;&gt;runErrorT&lt;/a&gt; kicks this off for us. We then use &lt;a href=&quot;http://hackage.haskell.org/packages/archive/ConfigFile/1.0.5/doc/html/Data-ConfigFile.html#v:readfile&quot;&gt;readfile&lt;/a&gt; to open the config file with a sane parser that knows how to speak INI. Pulling the actual strings from the config is done by using &lt;a href=&quot;http://hackage.haskell.org/packages/archive/ConfigFile/1.0.5/doc/html/Data-ConfigFile.html#v:get&quot;&gt;get&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;From here, it's just wrapping the values up ready to send out. The final call is to &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:either&quot;&gt;either&lt;/a&gt;. Leaving the Error Monad, we're given an Either (left being the error, right being the value). I've used &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:either&quot;&gt;either&lt;/a&gt; here so I can provide an implementation for either scenario. If an error occurs (the first lambda) then I just toast-out of the application. If we get a config value back (the second lambda), that's what gets returned.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Conclusion&lt;/h3&gt;That's all there is to that. Remember, you won't escape from the IO Monad which is why the read function's return type has IO. When you want to use these values, it'll need to be within &quot;do&quot; constructs:&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5927677.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Cheers.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;div class='comment'&gt;
&lt;div class='author'&gt;Michael Tuttle&lt;/div&gt;
&lt;div class='content'&gt;
readConfig here is using &amp;quot;readfile&amp;quot; internally to actually hit the config file. Take a look at alternatives here - for instance, I can see &amp;quot;readhandle&amp;quot; and &amp;quot;readstring&amp;quot; in the documentation. You may be able to open the config file yourself (by other means - &amp;quot;openFile&amp;quot;) without needing to give a full path.&lt;br /&gt;&lt;br /&gt;In every implementation I&amp;#39;ve used this in, my config file has sat in the root of my cabal project. Specifying just the configuration filename has been sufficient.&lt;/div&gt;
&lt;/div&gt;
&lt;div class='comment'&gt;
&lt;div class='author'&gt;Rose Perrone&lt;/div&gt;
&lt;div class='content'&gt;
How can I run readConfig &amp;quot;~/proj/config_filename.cfg&amp;quot; without specifying a full path to the config file? I want other people to be able to use their local copy of my project without having to change this line in the source. I use an alias for running the haskell executable, so when I run the executable script from not within its directory, I get this error:&lt;br /&gt;&lt;br /&gt;Main: config_filename.cfg: openFile: does not exist (No such file or directory)&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Making Sense of the Linux "top" Report</title>
   <link href="http://tuttlem.github.io/2013/05/24/making-sense-of-the-linux-top-report/"/>
   <updated>2013-05-24T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/05/24/making-sense-of-the-linux-top-report</id>
   <content type="html">&lt;h1&gt;Making Sense of the Linux &quot;top&quot; Report&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;Working in a Linux environment for more and more of the day, it pays to know your tools really well. One tool that I use frequently to understand what a machine is doing is the &quot;top&quot; command. Today's post will take you through all of the figures on this report to help you understand what each means.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;The Command&lt;/h3&gt;The &lt;a href=&quot;http://linux.die.net/man/1/top&quot;&gt;top&lt;/a&gt; command is a very common tool used to &quot;display Linux tasks&quot; as the man page so helpfully tells us. Issuing this command at the shell will present the user with a few rows of figures followed by a list of all running processes on the system. Here is an extract of the report (just the upper lines that this post will focus on).&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-J1dAUFv5Ub8/UZ9G0XzeA7I/AAAAAAAAAss/2CBdFVmMhQo/s1600/top-sample.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;51&quot; src=&quot;http://1.bp.blogspot.com/-J1dAUFv5Ub8/UZ9G0XzeA7I/AAAAAAAAAss/2CBdFVmMhQo/s400/top-sample.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;Breaking Down the Summary&lt;/h3&gt;You can see from the excerpt above that quite a lot of information is packed into this part of the report. To breakdown this report, I'll just got through it line by line.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;top - 20:52:24 up 24 min,  2 users,  load average: 0.93, 1.01, 0.93&lt;/pre&gt;&lt;br /&gt;The first line tells us the following:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The current time (20:52:24)&lt;/li&gt;&lt;li&gt;The machine's up time (24 min)&lt;/li&gt;&lt;li&gt;How many user sessions currently (2)&lt;/li&gt;&lt;li&gt;The system's load average for the last minute (0.93), last 5 minutes (1.01) and last 15 minutes (0.93)&lt;/li&gt;&lt;/ul&gt;The system load average is an interesting one. A general rule of thumb is to investigate if you're seeing averages above 0.7. An average of 1.0 suggests that just enough work is getting processed by the machine, but is leaving you no headroom to move. Seeing a load of 5 and above is panic-time, systems stalling, trouble.&lt;br /&gt;&lt;br /&gt;For more information about these load values, take a look at &lt;a href=&quot;http://blog.scoutapp.com/articles/2009/07/31/understanding-load-averages&quot;&gt;Understanding Linux CPU Load - when should you be worried?&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;Tasks: 111 total,   1 running, 110 sleeping,   0 stopped,   0 zombie&lt;/pre&gt;&lt;br /&gt;The second line tells us the following:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The total number of tasks (111)&lt;/li&gt;&lt;li&gt;How many of those tasks are running (1)&lt;/li&gt;&lt;li&gt;How many of them are sleeping (110)&lt;/li&gt;&lt;li&gt;How many of them are stopped (0)&lt;/li&gt;&lt;li&gt;and, How many of them are waiting to be stopped (or zombie) (0)&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;%Cpu(s):  12.3 us,  4.9 sy,  0.0 ni, 81.8 id,  0.7 wa,  0.0 hi,  0.3 si,  0.0 st&lt;/pre&gt;&lt;br /&gt;The third line gives you a point in time view of how busy the CPU is and where its cycles are being used. It tells us the percentage of CPU being used for:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;User applications (12.3 us)&lt;/li&gt;&lt;li&gt;System applications (4.9 sy)&lt;/li&gt;&lt;li&gt;Applications that have had their &quot;nice&quot; value adjusted (0.0 ni)&lt;/li&gt;&lt;li&gt;Unused or Idle (81.8 id)&lt;/li&gt;&lt;li&gt;Waiting for I/O operations (0.7 wa)&lt;/li&gt;&lt;li&gt;Handling hardware interrupts (0.0 hi)&lt;/li&gt;&lt;li&gt;Handling software interrupts (0.3 si)&lt;/li&gt;&lt;li&gt;Stolen by the hypervisor (0.0 st) &lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;KiB Mem:   8129072 total,  1402664 used,  6726408 free,    69512 buffers&lt;/pre&gt;&lt;pre&gt;KiB Swap:  9920508 total,        0 used,  9920508 free,   620016 cached&lt;/pre&gt;&lt;br /&gt;The fourth and fifth lines deal with memory and swap utilisation. It tells us the following:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Total&lt;/li&gt;&lt;li&gt;Used&lt;/li&gt;&lt;li&gt;Free&amp;nbsp;&lt;/li&gt;&lt;li&gt;Buffers &amp;amp; Cached&lt;/li&gt;&lt;/ul&gt;That's it for the summary of the machine's activity. These are all the aggregate values which will give you an &quot;at a glance&quot; feel for how the machine is going. The next part of this post will be all about reading specific information from the process report. Here's an excerpt of the report.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-96sIylwcoDQ/UZ9TaeqDLXI/AAAAAAAAAs8/gAGD-cIp_XM/s1600/proc-sample.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;31&quot; src=&quot;http://3.bp.blogspot.com/-96sIylwcoDQ/UZ9TaeqDLXI/AAAAAAAAAs8/gAGD-cIp_XM/s400/proc-sample.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;Breaking Down the Process Report&lt;/h3&gt;To interrogate a single process, you can use the details within the process report. It will list out all of the processes currently managed by your system. The report columns as you look at it will provide the following information:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The process ID (PID)&lt;/li&gt;&lt;li&gt;The user who owns the process (USER)&lt;/li&gt;&lt;li&gt;The priority (PR)&lt;/li&gt;&lt;li&gt;The nice value (NI)&lt;/li&gt;&lt;li&gt;Virtual memory used by the process (VIRT)&lt;/li&gt;&lt;li&gt;Physical memory used by the process (RES)&lt;/li&gt;&lt;li&gt;Shared memory for the process (SHR)&lt;/li&gt;&lt;li&gt;Status of the process (S) (&lt;b&gt;S&lt;/b&gt;leeping, &lt;b&gt;R&lt;/b&gt;unning, &lt;b&gt;Z&lt;/b&gt;ombie)&lt;/li&gt;&lt;li&gt;Percentage of CPU used by this process (%CPU)&lt;/li&gt;&lt;li&gt;Percentage of memory used by this process (%MEM)&lt;/li&gt;&lt;li&gt;The time that this process has been active (TIME+)&lt;/li&gt;&lt;li&gt;The name of the process (COMMAND)&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;That's it for the &quot;top&quot; command in Linux. Remember, always read the &lt;a href=&quot;http://linux.die.net/man/1/top&quot;&gt;man pages&lt;/a&gt; for commands that you want to learn more about!&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>WYSIWYG Editor on Bootstrap</title>
   <link href="http://tuttlem.github.io/2013/05/17/wysiwyg-editor-on-bootstrap/"/>
   <updated>2013-05-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/05/17/wysiwyg-editor-on-bootstrap</id>
   <content type="html">&lt;h1&gt;WYSIWYG Editor on Bootstrap&lt;/h1&gt;
&lt;div class='post'&gt;
A WYSIWYG editor to quick-start that next CMS based idea. &lt;br /&gt;&lt;br /&gt;This one is based on twitter bootstrap.&lt;br /&gt;&lt;a href=&quot;http://www.blogger.com/goog_259371517&quot;&gt;&lt;br /&gt;&lt;/a&gt;&lt;a href=&quot;http://mindmup.github.io/bootstrap-wysiwyg/&quot;&gt;http://mindmup.github.io/bootstrap-wysiwyg/&lt;/a&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>More Beautiful Text</title>
   <link href="http://tuttlem.github.io/2013/05/17/more-beautiful-text/"/>
   <updated>2013-05-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/05/17/more-beautiful-text</id>
   <content type="html">&lt;h1&gt;More Beautiful Text&lt;/h1&gt;
&lt;div class='post'&gt;
Getting a wider array of fonts into your website is a pretty simple task these days. There's quite a selection of fonts that you can use offered on the web. Just take a look at &lt;a href=&quot;http://www.google.com/fonts/&quot;&gt;Google's repository&lt;/a&gt;&amp;nbsp;to see what I'm talking about.&lt;br /&gt;&lt;br /&gt;Once you've selected the font that's right for your application, you can import it to pages using the following directive:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;@import url(http://fonts.googleapis.com/css?family=Droid+Sans:400,700);&lt;/pre&gt;&lt;br /&gt;... and then finally use it in your css directives.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;font-family: &quot;Droid Sans&quot;, arial, verdana, sans-serif;&lt;/pre&gt;&lt;br /&gt;Easy.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Fasm Flat Assembler</title>
   <link href="http://tuttlem.github.io/2013/05/17/fasm-flat-assembler/"/>
   <updated>2013-05-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/05/17/fasm-flat-assembler</id>
   <content type="html">&lt;h1&gt;Fasm Flat Assembler&lt;/h1&gt;
&lt;div class='post'&gt;
A quick reminder post to myself to go and look at &lt;a href=&quot;http://flatassembler.net/download.php&quot;&gt;Flat Assembler&lt;/a&gt;. Interest was sparked initially from a article that was more of an x86 assembly tutorial &lt;a href=&quot;http://siyobik.info.gf/main/documents/view/x86-tutorial/&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Clojure UI Links</title>
   <link href="http://tuttlem.github.io/2013/05/17/clojure-ui-links/"/>
   <updated>2013-05-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/05/17/clojure-ui-links</id>
   <content type="html">&lt;h1&gt;Clojure UI Links&lt;/h1&gt;
&lt;div class='post'&gt;
Here's a handful of links that I'll bookmark here for later to do with UI programming in Clojure.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;a href=&quot;http://lifeofaprogrammergeek.blogspot.com.au/2009/05/3d-grapher-in-clojure.html&quot;&gt;http://lifeofaprogrammergeek.blogspot.com.au/2009/05/3d-grapher-in-clojure.html&lt;/a&gt;&lt;br clear=&quot;all&quot; /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;JOGL wikipedia example ported to Clojure&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://groups.google.com/forum/?fromgroups=#%21topic/clojure/DCgw3GRBYgo&quot;&gt;https://groups.google.com/forum/?fromgroups=#!topic/clojure/DCgw3GRBYgo&lt;/a&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;JOGL wikipedia&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Jogl&quot;&gt;http://en.wikipedia.org/wiki/Jogl&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Example swing code&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://groups.google.com/forum/?fromgroups=#%21topic/clojure/225S6DxYdBk&quot;&gt;https://groups.google.com/forum/?fromgroups=#!topic/clojure/225S6DxYdBk&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;MVC GUI Swing &amp;amp; Clojure&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://lifeofaprogrammergeek.blogspot.com.au/2009/05/model-view-controller-gui-in-clojure.html&quot;&gt;http://lifeofaprogrammergeek.blogspot.com.au/2009/05/model-view-controller-gui-in-clojure.html&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Android Development</title>
   <link href="http://tuttlem.github.io/2013/05/17/android-development/"/>
   <updated>2013-05-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/05/17/android-development</id>
   <content type="html">&lt;h1&gt;Android Development&lt;/h1&gt;
&lt;div class='post'&gt;
The rainy day will come where I'll want to further my Android Development skills, but it's just not today. This bookmark is to remind me to look at these &lt;a href=&quot;http://android-by-example.blogspot.com.au/2013/01/recently-i-have-started-translating.html&quot;&gt;Android and Java Tutorials&lt;/a&gt; when that time comes.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Testing REST APIs with cURL</title>
   <link href="http://tuttlem.github.io/2013/05/16/testing-rest-apis-with-curl/"/>
   <updated>2013-05-16T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/05/16/testing-rest-apis-with-curl</id>
   <content type="html">&lt;h1&gt;Testing REST APIs with cURL&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;Testing is a large component of any software development done, sometimes though - you don't want to go through a full unit test suite just to see what a REST service is doing. I've come across some interesting concepts with cURL that will certainly be a shortcut benefit to seeing what responses your REST services are returning.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Requests&lt;/h3&gt;You can simulate all of the different HTTP verbs against any URL you'd like using cURL with the following syntax at the console:&lt;br /&gt;&lt;br /&gt;Retrieve person (id: 1)&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ curl -i -X GET http://localhost/service/people/1&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Retrieve all people&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ curl -i -X GET http://localhost/service/people&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Delete person (id: 1)&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ curl -i -X DELETE http://localhost/service/people/1&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Create a new person&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ curl -i -X POST -H 'Content-Type: application/json' -d '{&quot;first_name&quot;: &quot;John&quot;, &quot;last_name&quot;: &quot;Smith&quot;}' http://localhost/service/people&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Modify a person (id: 1)&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ curl -i -X PUT -H 'Content-Type: application/json' -d '{&quot;first_name&quot;: &quot;Jane&quot;, &quot;last_name&quot;: &quot;Smith&quot;}' http://localhost/service/people/1&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Only a quick one.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A TCP Server Haskell Example</title>
   <link href="http://tuttlem.github.io/2013/05/15/a-tcp-server-haskell-example/"/>
   <updated>2013-05-15T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/05/15/a-tcp-server-haskell-example</id>
   <content type="html">&lt;h1&gt;A TCP Server Haskell Example&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;In today's post, I'll demonstrate (and explain) how to put together a very simple TCP server in Haskell. The most simple example that I can think of, that will still leave you with enough skeleton to get up and running yourself is an echo server.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;The Functional Specification&lt;/h3&gt;An Echo server. The drab, beige, sensible-older-brother in the server world. We'll accept incoming connections on a port and recite (echo) any data sent to us by the client. Simple.&lt;br /&gt;&lt;h3&gt;Design&lt;/h3&gt;Using the network, concurrency and system modules in Haskell, you're actually allowed a pretty simple and fluid design. Of course, you can make this as &quot;one-liner&quot; as you'd like, but for demonstration purposes today I'll break the server over a few parts:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Main program&lt;/li&gt;&lt;li&gt;Socket handler&lt;/li&gt;&lt;li&gt;Echo implementation&lt;/li&gt;&lt;/ul&gt;The main program will take care of getting us out of first gear. It'll setup a listening socket (or server socket) and then hand off client connection responsibilities to the socket handler. The socket handler will then hand the client off to the echo implementation to work with as well as ensure it's ready for any extra connections. Finally, the echo implementation will just facilitate the server's functionality layer in. It will just send back to the client what ever it has given.&lt;br /&gt;&lt;h3&gt;Code Walkthrough &lt;/h3&gt;The main program is very simple. Setup the server socket using &lt;a href=&quot;http://hackage.haskell.org/packages/archive/network/2.3.0.14/doc/html/Network.html#v:listenOn&quot;&gt;listenOn&lt;/a&gt; and then hand control over to the client handler.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5583842.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;The client handler (or socket handler as I called it above) accepts incoming client connections from the server socket using &lt;a href=&quot;http://hackage.haskell.org/packages/archive/network/2.3.0.14/doc/html/Network.html#v:accept&quot;&gt;accept&lt;/a&gt;. We can then set buffering options (to off) for the client connection with &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/System-IO.html#v:hSetBuffering&quot;&gt;hSetBuffering&lt;/a&gt;. From there we make the echo service implementation fire up on a thread of its own with &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent.html#v:forkIO&quot;&gt;forkIO&lt;/a&gt;. &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent.html#v:forkIO&quot;&gt;forkIO&lt;/a&gt; deserves a blog post of its own (as does the Concurrency module as a whole), and it will get one... just not today. Anyway, finally the client handler recurses on itself to handle the next client.&lt;br /&gt;&lt;br /&gt;It's a lot of text for some pretty simple code in the end.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5583932.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Finally, we have the actual implementation. This is the code that makes our server an echo server. We'll take a line of text in from the client socket using &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/System-IO.html#v:hGetLine&quot;&gt;hGetLine&lt;/a&gt; then we'll write it back to the client using &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/System-IO.html#v:hPutStrLn&quot;&gt;hPutStrLn&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5583956.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;And that's it. The full code listing for this echo server is below.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5583974.js&quot;&gt;&lt;/script&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Final thoughts&lt;/h3&gt;There is a fairly basic pattern that you can establish out of the module here that you can adapt for more complex servers of your own. Some further study of the IO system would be needed to develop binary communication protocols of your own, but if you're ok with plain text protocols - this should do just fine!&lt;br /&gt;&lt;br /&gt;Enjoy. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;div class='comment'&gt;
&lt;div class='author'&gt;Michael Tuttle&lt;/div&gt;
&lt;div class='content'&gt;
That looks really cool - nice and neat and simple. Thanks for the tip!&lt;/div&gt;
&lt;/div&gt;
&lt;div class='comment'&gt;
&lt;div class='author'&gt;Unknown&lt;/div&gt;
&lt;div class='content'&gt;
The pipes and pipes network libraries are worth a look too. They let you work at a higher level of abstraction which is nice and haskell-ey. Here&amp;#39;s a 2-line echo server using them:&lt;br /&gt;https://gist.github.com/jhickner/5589907&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Haskell Video Links</title>
   <link href="http://tuttlem.github.io/2013/03/19/haskell-video-links/"/>
   <updated>2013-03-19T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/03/19/haskell-video-links</id>
   <content type="html">&lt;h1&gt;Haskell Video Links&lt;/h1&gt;
&lt;div class='post'&gt;
A small list of video library links on the topic of Haskell are accumulating in my inbox, so I thought I'd compile them here for viewing later.&lt;br /&gt;&lt;br /&gt;Haskell video collection on YouTube&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/user/cdsmithgoogle&quot;&gt;http://www.youtube.com/user/cdsmithgoogle&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Happstack foundation example: ControlV paste board&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=7Wmszk4wZxQ&quot;&gt;http://www.youtube.com/watch?v=7Wmszk4wZxQ&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Happstack plugins&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=ok_gf0QVLnE&quot;&gt;http://www.youtube.com/watch?v=ok_gf0QVLnE&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Simon Peyton Jones: Haskell Tutorial (xmonad)&lt;br /&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/um/people/simonpj/papers/haskell-tutorial/index.htm&quot;&gt;http://research.microsoft.com/en-us/um/people/simonpj/papers/haskell-tutorial/index.htm&lt;/a&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Simon Peyton Jones: A History of Haskell&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/um/people/simonpj/papers/history-of-haskell/index.htm&quot;&gt;http://research.microsoft.com/en-us/um/people/simonpj/papers/history-of-haskell/index.htm&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;Video presentation on Haskell.org&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://www.haskell.org/haskellwiki/Video_presentations&quot;&gt;http://www.haskell.org/haskellwiki/Video_presentations&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;Code Deconstructed Series&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/user/jekor&quot;&gt;http://www.youtube.com/user/jekor&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Free Pascal and Lazarus</title>
   <link href="http://tuttlem.github.io/2013/03/19/free-pascal-and-lazarus/"/>
   <updated>2013-03-19T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/03/19/free-pascal-and-lazarus</id>
   <content type="html">&lt;h1&gt;Free Pascal and Lazarus&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://www.lazarus.freepascal.org/splash_logo.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;213&quot; src=&quot;http://www.lazarus.freepascal.org/splash_logo.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;As a bit of a bookmark note to myself, for one of those rainy days when I want to take a trip back to the 90's - it seems that some serious traction has been made in the Pascal community through the projects &lt;a href=&quot;http://www.freepascal.org/&quot;&gt;Free Pascal&lt;/a&gt; and &lt;a href=&quot;http://www.lazarus.freepascal.org/&quot;&gt;Lazarus&lt;/a&gt;.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>ASCII Star field</title>
   <link href="http://tuttlem.github.io/2013/03/11/ascii-star-field/"/>
   <updated>2013-03-11T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/03/11/ascii-star-field</id>
   <content type="html">&lt;h1&gt;ASCII Star field&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;With everything getting quite busy around here, I'd found less and less time to pay any attention to my Haskell programming adventures. I have found a little bit of time over the previous weekend to put together a small useless tidbit that incorporates some concepts that I'd like to use later.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The project that I've put together is a 3D star field simulation, written to the terminal using a set of Haskell &lt;a href=&quot;http://en.wikipedia.org/wiki/Ncurses&quot;&gt;ncurses&lt;/a&gt; bindings calls &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hscurses/1.3.0.2/doc/html/UI-HSCurses-Curses.html&quot;&gt;hscurses&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Today's post will take you through the whole unit itself (don't worry, it's quite simple and short) but outline some of the challenges and implementation ideas.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-mn6VD5_GYis/UT3NS1QFArI/AAAAAAAAAnE/jR3qXLYta78/s1600/Screen+Shot+2013-03-11+at+10.25.01+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;247&quot; src=&quot;http://2.bp.blogspot.com/-mn6VD5_GYis/UT3NS1QFArI/AAAAAAAAAnE/jR3qXLYta78/s320/Screen+Shot+2013-03-11+at+10.25.01+PM.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Trust me, it's so much more impressive when it's in motion &lt;b&gt;*facepalm*&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3&gt;Data structure&lt;/h3&gt;&lt;div&gt;The first job is to define a data structure that will suit our star field, or at least just 1 star in the field. We can make a list of these data structures later and call that list a &quot;star field&quot;. Whilst there are some more interesting characteristics we could define about a star, I've gone very simplistic making the star nothing more than a point in 3D space using record syntax.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5133608.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;We have an x, y and z co-ordinate to define that our star is &quot;somewhere&quot;.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Playing god&lt;/h3&gt;&lt;div&gt;We're able to define a star now that we have the structure to define it. Now it's time to &quot;create&quot; a star somewhere in our universe. In the following code snippet, I've created a star using a random number generator and have adjusted the numbers so that 0 is the mid point. The range should work out from -1 up to 1 for the x and y axis' and -500 up to -1 for the z axis (with negative numbers travelling into the screen).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5133634.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;Making a star just ends up being a little bit of random number generator management. We're using it three times, so we need to keep track of what it is throughout these generations and we'll also send it out at the end so that we can continue to use it.&lt;br /&gt;&lt;br /&gt;We can use this creation function in a recursive function that will allow us to build a randomized &quot;field&quot; of stars. Up above, I said that a star field was just a list of stars, and this is exactly what we return (plus the random number generator).&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5133656.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;This is a little bit awkward, only because we also need to be able to get the random number generator back out once we've used it so that it can continue to be &quot;further random&quot; in our program.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Moving through space&lt;/h3&gt;&lt;div&gt;Now that we've created a universe of stars (or a star field), we now need to be able to move ourselves within the field. To simulate this movement, all we're going to do is increment the z position of each star. Now we all know that it's not actually the stars that move, it should be us - but, we're in a computer simulation, so we'll just pretend.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The code is pretty straight forward. It'll take a list of stars (or a star field) in - increment the z co-ordinate for each and send out the adjusted list.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5133720.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;Don't go through the screen!!&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;We're incrementing these stars, over-and-over-and-over ... they're going to make it out of the screen, eeiiik! Even worse, they could get stuck right on the surface of the monitor screen! Whilst this may sound ok right now, later on we're going to &quot;project&quot; these 3D co-ordinates onto a 2D plane. In order to do this, we'll be dividing by that z co-ordinate, so we're really not in the business of dividing by zero here.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The following function will determine which stars need to be removed &quot;dead&quot;, which stars are still &quot;good&quot; and it will also generate new stars for us if need be.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Of course, in the off chance that we do need to generate more stars, we must supply the random number generator to do so.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5133758.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;3D Projection&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Turning a 3D point into a 2D point is a fairly straight-forward operation (if you've got all the facts). There are much, much, much more complex ways to do this but for the purposes of this demo I have simply divided by the z co-ordinate and added an offset based on the screen size.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5133766.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We take in a star, the screen width and screen height. The formula ends up looking something like this:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;x_2d = ((x_3d * 127) / z_3d) + (width / 2)&lt;br /&gt;y_2d = ((y_3d * 127) / z_3d) + (height / 2)&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;The constant 127 just gives us and adjustment for our viewport. It works quite well for this purpose, but you can read up more on the topic &lt;a href=&quot;http://en.wikipedia.org/wiki/3D_projection&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Processing a frame&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;To move through one &quot;quantum&quot; of time in our star field we really want to move the stars and make sure we're not going to do anything bad when we go to do our projections. So using advance and process, we can wrap this up for a frame like so.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5133815.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Most of the management of the star field is done now. We can now draw our star field using curses. Before we do that, lets look at some of these ncurses bindings for Haskell through hscurses.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Setting the scene&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The following code is pretty well commented and these curses calls align pretty well to their native library analogs. All of the custom code mentioned in here will only be for our star field. Here's the main function for our star field.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5133857.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The actual work of the star field is buried within &quot;runStars&quot; which I've commented below also.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5133873.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Finally, actually drawing a star. This is so simple. We move to the correct character cell and we put (of course) an asterisk!&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5133890.js&quot;&gt;&lt;/script&gt; You can see that I've assumed the terminal to be 80x25, but it's easy enough to ask curses what the dimensions of the terminal are and adjust them accordingly.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Conclusion&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Well, that's it really. It's simple, crude but so nerdy :-)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MongoDB Aggregation Framework</title>
   <link href="http://tuttlem.github.io/2013/03/05/mongodb-aggregation-framework/"/>
   <updated>2013-03-05T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/03/05/mongodb-aggregation-framework</id>
   <content type="html">&lt;h1&gt;MongoDB Aggregation Framework&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Sometimes having the power of MapReduce at your fingertips and applying this technology to simpler aggregate queries can be more hassle than it needs to be. MongoDB provides a simpler solution (for a simpler class of problems) in the form of the &lt;a href=&quot;http://docs.mongodb.org/manual/applications/aggregation/&quot;&gt;Aggregation framework&lt;/a&gt;. This framework allows you to develop queries within the mongo environment that are analogous to &lt;a href=&quot;http://www.w3schools.com/sql/sql_groupby.asp&quot;&gt;GROUP BY&lt;/a&gt;, &lt;a href=&quot;http://www.w3schools.com/sql/sql_having.asp&quot;&gt;HAVING&lt;/a&gt;, &lt;a href=&quot;http://www.w3schools.com/sql/sql_func_count.asp&quot;&gt;COUNT&lt;/a&gt;, &lt;a href=&quot;http://www.w3schools.com/sql/sql_func_sum.asp&quot;&gt;SUM&lt;/a&gt;, etc. that you would normally use in &quot;relational land&quot;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Today's post, I want to walk through a couple of simple queries on using this framework to maximise productivity when pivoting data.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Marrying the old with the new&lt;/h3&gt;&lt;div&gt;As a bit of a cheat's reference, the following table provides the some examples of aggregate queries in a relational database and how they transpose over to the Mongo aggregation environment.&lt;br /&gt;&lt;br /&gt;The source of this table can be found &lt;a href=&quot;http://docs.mongodb.org/manual/reference/sql-aggregation-comparison/&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;table&gt; &lt;tbody&gt;&lt;tr&gt;  &lt;td&gt;&lt;b&gt;Technique&lt;/b&gt;&lt;/td&gt;  &lt;td&gt;&lt;b&gt;Relational&lt;/b&gt;&lt;/td&gt;  &lt;td&gt;&lt;b&gt;Aggregation Framework&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;Criteria matching&lt;/td&gt;  &lt;td&gt;WHERE&lt;/td&gt;  &lt;td&gt;&lt;a href=&quot;http://docs.mongodb.org/manual/reference/aggregation/match/#_S_match&quot;&gt;$match&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;Grouping&lt;/td&gt;  &lt;td&gt;GROUP BY&lt;/td&gt;  &lt;td&gt;&lt;a href=&quot;http://docs.mongodb.org/manual/reference/aggregation/group/#_S_group&quot;&gt;$group&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;Aggregate criteria filtering&lt;/td&gt;  &lt;td&gt;HAVING&lt;/td&gt;  &lt;td&gt;&lt;a href=&quot;http://docs.mongodb.org/manual/reference/aggregation/match/#_S_match&quot;&gt;$match&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;Result projection&lt;/td&gt;  &lt;td&gt;SELECT&lt;/td&gt;  &lt;td&gt;&lt;a href=&quot;http://docs.mongodb.org/manual/reference/aggregation/project/#_S_project&quot;&gt;$project&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;Record sorting&lt;/td&gt;  &lt;td&gt;ORDER BY&lt;/td&gt;  &lt;td&gt;&lt;a href=&quot;http://docs.mongodb.org/manual/reference/aggregation/sort/#_S_sort&quot;&gt;$sort&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;Limiting result sets&lt;/td&gt;  &lt;td&gt;LIMIT or TOP&lt;/td&gt;  &lt;td&gt;&lt;a href=&quot;http://docs.mongodb.org/manual/reference/aggregation/limit/#_S_limit&quot;&gt;$limit&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;Accumulation&lt;/td&gt;  &lt;td&gt;SUM&lt;/td&gt;  &lt;td&gt;&lt;a href=&quot;http://docs.mongodb.org/manual/reference/aggregation/sum/&quot;&gt;$sum&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;Counting&lt;/td&gt;  &lt;td&gt;COUNT&lt;/td&gt;  &lt;td&gt;&lt;a href=&quot;http://docs.mongodb.org/manual/reference/aggregation/sum/&quot;&gt;$sum&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;Dropping&lt;/td&gt;  &lt;td&gt;SKIP&lt;/td&gt;  &lt;td&gt;&lt;a href=&quot;http://docs.mongodb.org/manual/reference/aggregation/skip/#_S_skip&quot;&gt;$skip&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;b&gt;Counting records&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;Sql example:&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;SELECT COUNT(*) AS count&lt;br /&gt;FROM items&lt;/pre&gt;&lt;br /&gt;Mongo example:&lt;br /&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.items.aggregate( [ &lt;br /&gt;{ $group: { _id: null,&lt;br /&gt;            count: { $sum: 1 } } } &lt;br /&gt;] )&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Accumulating values&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;Sql example:&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;SELECT SUM(price) AS total&lt;br /&gt;FROM items&lt;/pre&gt;&lt;br /&gt;Mongo example:&lt;br /&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.items.aggregate( [ &lt;br /&gt;{ $group: { _id: null,&lt;br /&gt;            total: { $sum: &quot;$price&quot; } } } &lt;br /&gt;] )&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Aggregation with identifier&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;Sql example:&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;SELECT category_id, SUM(price) AS total&lt;br /&gt;FROM items&lt;br /&gt;GROUP BY category_id&lt;/pre&gt;&lt;br /&gt;Mongo example:&lt;br /&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.items.aggregate( [ &lt;br /&gt;{ $group: { _id: &quot;$category_id&quot;,&lt;br /&gt;            total: { $sum: &quot;$price&quot; } } } &lt;br /&gt;] )&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Aggregation with identifier and sorting&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;Sql example:&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;SELECT category_id, SUM(price) AS total&lt;br /&gt;FROM items&lt;br /&gt;GROUP BY category_id&lt;br /&gt;ORDER BY total&lt;/pre&gt;&lt;br /&gt;Mongo example:&lt;br /&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.items.aggregate( [ &lt;br /&gt;{ $group: { _id: &quot;$category_id&quot;,&lt;br /&gt;            total: { $sum: &quot;$price&quot; } } },&lt;br /&gt;{ $sort: { total: 1 } } &lt;br /&gt;] )&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Multiple Aggregation&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;Sql example:&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;SELECT category_id, when SUM(price) AS total&lt;br /&gt;FROM items&lt;br /&gt;GROUP BY category_id, when&lt;/pre&gt;&lt;br /&gt;Mongo example:&lt;br /&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.items.aggregate( [ &lt;br /&gt;{ $group: { _id: { category_id: &quot;$category_id&quot;,&lt;br /&gt;                   when: &quot;$when&quot; },&lt;br /&gt;            total: { $sum: &quot;$price&quot; } } } &lt;br /&gt;] )&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Aggregate Filtration&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;Sql example:&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;SELECT category_id, count(*)&lt;br /&gt;FROM items&lt;br /&gt;GROUP BY category_id&lt;br /&gt;HAVING count(*) &amp;gt; 1&lt;/pre&gt;&lt;br /&gt;Mongo example:&lt;br /&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.items.aggregate( [ &lt;br /&gt;{ $group: { _id: &quot;$category_id&quot;,&lt;br /&gt;            count: { $sum: 1 } } },&lt;br /&gt;{ $match: { count: { $gt: 1 } } }  &lt;br /&gt;] )&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Multiple Aggregate Filtration&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;Sql example:&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;SELECT category_id, when, SUM(price) AS total&lt;br /&gt;FROM items&lt;br /&gt;GROUP BY category_id, when&lt;br /&gt;HAVING total &amp;gt; 100&lt;/pre&gt;&lt;br /&gt;Mongo example:&lt;br /&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.items.aggregate( [ &lt;br /&gt;{ $group: { _id: { category_id: &quot;$category_id&quot;,&lt;br /&gt;                   when: &quot;$when&quot; },&lt;br /&gt;            total: { $sum: &quot;$price&quot; } } },&lt;br /&gt;{ $match: { total: { $gt: 100 } } }  &lt;br /&gt;] )&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Aggregate with Source Filtration&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;Sql example:&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;SELECT category_id, SUM(price) AS total&lt;br /&gt;FROM items&lt;br /&gt;WHERE active = 1&lt;br /&gt;GROUP BY category_id&lt;/pre&gt;&lt;br /&gt;Mongo example:&lt;br /&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.items.aggregate( [ &lt;br /&gt;{ $match: { active: 1 } },&lt;br /&gt;{ $group: { _id: &quot;$category_id&quot;,&lt;br /&gt;            total: { $sum: &quot;$price&quot; } } }&lt;br /&gt;] )&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Aggregate Filtration with Source Filtration&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;Sql example:&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;SELECT category_id, SUM(price) AS total&lt;br /&gt;FROM items&lt;br /&gt;WHERE active = 1&lt;br /&gt;GROUP BY category_id&lt;br /&gt;HAVING total &amp;gt; 100&lt;/pre&gt;&lt;br /&gt;Mongo example:&lt;br /&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.items.aggregate( [ &lt;br /&gt;{ $match: { active: 1 } },&lt;br /&gt;{ $group: { _id: &quot;$category_id&quot;,&lt;br /&gt;            total: { $sum: &quot;$price&quot; } } },&lt;br /&gt;{ $match: { total: { $gt: 100 } } }&lt;br /&gt;] )&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Aggregated joins&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;Sql example:&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;SELECT category_id, SUM(co.weight) AS weight&lt;br /&gt;FROM items i, components co&lt;br /&gt;WHERE co.item_id = i.id&lt;br /&gt;GROUP BY category_id&lt;/pre&gt;&lt;br /&gt;Mongo example:&lt;br /&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.items.aggregate( [ &lt;br /&gt;{ $unwind: &quot;$components&quot; },&lt;br /&gt;{ $group: { _id: &quot;$category_id&quot;,&lt;br /&gt;            weight: { $sum: &quot;$components.weight&quot; } } }&lt;br /&gt;] )&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Sub-query Aggregation&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;Sql example:&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;SELECT COUNT(*)&lt;br /&gt;FROM (SELECT category_id, when&lt;br /&gt;      FROM items&lt;br /&gt;      GROUP BY category_id, when) AS Table1&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Mongo example:&lt;br /&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.items.aggregate( [ &lt;br /&gt;{ $group: { _id: { category_id: &quot;$category_id&quot;, &lt;br /&gt;                   when: &quot;$when&quot; } } },&lt;br /&gt;{ $group: { _id: null, count: { $sum: 1 } } }&lt;br /&gt;] )&lt;/pre&gt;&lt;br /&gt;&lt;h3&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;These are just some examples to get up and running. The documentation will guide you much better!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Stored Javascripts in MongoDB</title>
   <link href="http://tuttlem.github.io/2013/03/04/stored-javascripts-in-mongodb/"/>
   <updated>2013-03-04T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/03/04/stored-javascripts-in-mongodb</id>
   <content type="html">&lt;h1&gt;Stored Javascripts in MongoDB&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Coming from a relational database background, technologies such as stored procedures and user defined functions have always helped out when building a database infrastructure. MongoDB provides the same sort of code storage in stored javascripts in the database.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Creating a stored javascript&lt;/h3&gt;&lt;div&gt;Creating a stored javascript into a database is a straight forward process of adding an item to the system.js collection.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre&gt;&amp;gt; db.collection.js.save({_id: &quot;greaterThan10&quot;, &lt;br /&gt;...                      value: function (x) { return x &amp;gt; 10 }});&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Ok, this isn't the most useful of functions. We're testing if the value passed in the greater than 10. We're able to use this in queries of our own using $where syntax like so:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&amp;gt; db.people.find({$where: &quot;greaterThan10(this.age)&quot;})&lt;/pre&gt;&lt;br /&gt;This would get all of the &quot;people&quot; documents out of the database where they were over the age of 10. This is quite verbose of such a simple example, but you can see that by filling out the function in the saved javascript with more complex operations, you could achieve a lot with a little.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Removing a stored javascript&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Working with the collection as usual, you can simply remove your stored javascript by id.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&amp;gt; db.collection.js.remove({_id: &quot;greaterThan10&quot;})&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;Testing&amp;nbsp;&lt;/h3&gt;&lt;div&gt;As a final note, once you've created your stored javascript you can test it using eval easy enough.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre&gt;&amp;gt; db.eval(&quot;return greaterThan10(9);&quot;)&lt;br /&gt;false&lt;br /&gt;&amp;gt; db.eval(&quot;return greaterThan10(11);&quot;)&lt;br /&gt;true&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;This is just a short introduction into the world of stored javascripts. The internal workings of MongoDB is all based on javascript, so it's a good idea to have your skills nice and sharp before going in!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MapReduce parameters in Mongo</title>
   <link href="http://tuttlem.github.io/2013/03/04/mapreduce-parameters-in-mongo/"/>
   <updated>2013-03-04T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/03/04/mapreduce-parameters-in-mongo</id>
   <content type="html">&lt;h1&gt;MapReduce parameters in Mongo&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;I had &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/a-brief-mapreduce-tutorial-for-mongodb.html&quot;&gt;previously written&lt;/a&gt; about MapReduce within the MongoDB context and as I refer back to that article I'm noticing that I'm using more features of this framework than I have explained initially. I today's post, I want to go through all of the parameters when defining a MapReduce query within MongoDB.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;MapReduce&lt;/h3&gt;&lt;div&gt;Referring back to &lt;a href=&quot;http://docs.mongodb.org/manual/applications/map-reduce/&quot;&gt;the manual on MapReduce&lt;/a&gt;, the function signature looks as follows:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre&gt;db.collection.mapReduce(&lt;br /&gt;  &amp;lt;mapfunction&amp;gt;,&lt;br /&gt;  &amp;lt;reducefunction&amp;gt;,&lt;br /&gt;  {&lt;br /&gt;    out: &amp;lt;collection&amp;gt;,&lt;br /&gt;    query: &amp;lt;document&amp;gt;,&lt;br /&gt;    sort: &amp;lt;document&amp;gt;,&lt;br /&gt;    limit: &amp;lt;number&amp;gt;,&lt;br /&gt;    finalize: &amp;lt;function&amp;gt;,&lt;br /&gt;    scope: &amp;lt;document&amp;gt;,&lt;br /&gt;    jsMode: &amp;lt;boolean&amp;gt;,&lt;br /&gt;    verbose: &amp;lt;boolean&amp;gt;&lt;br /&gt;  }&lt;br /&gt;)&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;b&gt;mapFunction&lt;/b&gt;&lt;br /&gt;&lt;div&gt;The map function is a function that takes no arguments that you use to associate values to keys. Using the emit function, you can map values to a key for use later in your reduce function.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;reduceFunction&lt;/b&gt;&lt;br /&gt;The reduce function is a function that will take in a single key and an array of values. The purpose of the code inside the reduce function is to reduce your mapped values down into the aggregate values that you're looking for.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;out&lt;/b&gt;&lt;/div&gt;&lt;div&gt;The out parameter takes the name of the collection that your mapReduce query will target. This is where the result will be stored.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;query&lt;/b&gt;&lt;br /&gt;&lt;div&gt;The query parameter takes a document which acts as query criteria that will filter the data set that the map function (and therefore by process - the reduce function) will actually see.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;limit&lt;/b&gt;&lt;br /&gt;&lt;div&gt;The limit parameter allows you to constrain the number of items presented to your mapReduce process.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;finalize&lt;/b&gt;&lt;br /&gt;&lt;div&gt;The finalize function is a function that is executed after your reduce process. It's presented with a key and reduced value to work with. This is where you'd perform any ancillary processing on the reduced set prior to returning the result.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;scope&lt;/b&gt;&lt;br /&gt;&lt;div&gt;The scope parameter allows you to specify global variables that your map, reduce and finalize functions can access. This is particularly handy for MapReduce operations that are reliant on parameters external to your process.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;jsMode&lt;/b&gt;&lt;br /&gt;&lt;div&gt;The jsMode parameter determines how the MapReduce process will handle data between the map and reduce steps. Turning this on will force mongo to not convert your mapped results into BSON objects. This can make your queries run faster but they are constrained by the number of unique keys that can be worked on.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;verbose&lt;/b&gt;&lt;br /&gt;Turning the verbose parameter on will give you some timing profiling for your query.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;That's it for the MapReduce function call within Mongo.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Pygame Part 5 Music</title>
   <link href="http://tuttlem.github.io/2013/02/24/pygame-part-5-music/"/>
   <updated>2013-02-24T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/02/24/pygame-part-5-music</id>
   <content type="html">&lt;h1&gt;Pygame Part 5 Music&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;In the previous article in this series, we were talking about adding sound effects to our games for that extra level of immersion. Sounds effects really do add that needed atmosphere to your game, but so does music. Music provides the perfect ambient touch to that game scene or just gives you an excuse to get your &quot;8-bit&quot; on!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In today's post, we'll load some music from disk and play it while our ball is moving around the screen.&amp;nbsp;We'll be using the &lt;a href=&quot;http://en.wikipedia.org/wiki/WAV&quot;&gt;WAV format&lt;/a&gt; today for our media.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Get loaded&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Using our code from the last article, all we need to do is issue a call to &lt;a href=&quot;http://www.pygame.org/docs/ref/music.html#pygame.mixer.music.load&quot;&gt;pygame.mixer.music.load&lt;/a&gt;&amp;nbsp;to get the wave file off disk and into memory. Once we've done this, we can start playing the loaded music track using &lt;a href=&quot;http://www.pygame.org/docs/ref/music.html#pygame.mixer.music.play&quot;&gt;pygame.mixer.music.play&lt;/a&gt;. It takes a few parameters specific to playing the track, but for our purposes we'll play the track once and that's it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here's the code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5023016.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So now our ball is flying around the window with Toto cranking out &quot;Africa&quot; in the background. Awesome :)&lt;br /&gt;&lt;br /&gt;Very simple code but very effective in adding atmosphere, ambience and emotion to your digital landscape.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Pygame Part 4 Sounding Off</title>
   <link href="http://tuttlem.github.io/2013/02/24/pygame-part-4-sounding-off/"/>
   <updated>2013-02-24T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/02/24/pygame-part-4-sounding-off</id>
   <content type="html">&lt;h1&gt;Pygame Part 4 Sounding Off&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Welcome to part 4 in this pygame series. We've been very visual so far, centring all of our topics on video-based items. Today's post, we're going to talk about audio and getting it integrated into your game. Sound effects are a great way to add atmosphere to your game and games just wouldn't be right without it. It's also very simple to get up and running.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Just a final introductory point, we'll be using the &lt;a href=&quot;http://en.wikipedia.org/wiki/WAV&quot;&gt;WAV format&lt;/a&gt; today as our media. Looking at the &lt;a href=&quot;http://www.pygame.org/docs/ref/mixer.html&quot;&gt;documentation for the sound module&lt;/a&gt; in pygame, it appears that you can also use the &lt;a href=&quot;http://en.wikipedia.org/wiki/Ogg&quot;&gt;OGG format&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Loading a sound&lt;/h3&gt;&lt;div&gt;The first thing you'll need to do is to initialize the mixer framework. All of this leans on the &lt;a href=&quot;http://www.libsdl.org/projects/SDL_mixer/&quot;&gt;SDL_mixer&lt;/a&gt; module, so if you've done some &lt;a href=&quot;http://www.libsdl.org/&quot;&gt;SDL&lt;/a&gt; before, this will all be very familiar (but much easier). We'll use &lt;a href=&quot;http://www.pygame.org/docs/ref/mixer.html#pygame.mixer.init&quot;&gt;pygame.mixer.init&lt;/a&gt; to initialize the mixer module before use. It takes in all of the usuals (which you can read up on in the documentation), but they're all defaulted nicely for quick use. We'll then load a sound by creating a new Sound object using &lt;a href=&quot;http://www.pygame.org/docs/ref/mixer.html#pygame.mixer.Sound&quot;&gt;pygame.mixer.Sound&lt;/a&gt;. The Sound object has all of the functions of immediate use to us like &lt;a href=&quot;http://www.pygame.org/docs/ref/mixer.html#Sound.play&quot;&gt;play&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We'll be using the code from &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/02/pygame-part-3-loading-image.html&quot;&gt;Tutorial 3&lt;/a&gt; here. The bouncing object around the screen is going to make a sound whenever it hits a boundary. Sounds pretty straight-forward, and it is. Here's the code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/5022653.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And that's it really. You can see the calls to play, placed inside of the if blocks for when the ball is detected at the boundaries. I would screenshot this application as a picture for this article, but it's pretty useless to do so as it's an article on sound!&lt;br /&gt;&lt;br /&gt;Have fun.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Pygame Part 3 Loading An Image</title>
   <link href="http://tuttlem.github.io/2013/02/19/pygame-part-3-loading-an-image/"/>
   <updated>2013-02-19T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/02/19/pygame-part-3-loading-an-image</id>
   <content type="html">&lt;h1&gt;Pygame Part 3 Loading An Image&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;In the previous tutorials in this series, we learnt how to &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/02/pygame-part-1-window.html&quot;&gt;open a window&lt;/a&gt; and how to &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/02/pygame-part-2-eventing.html&quot;&gt;respond to the quit event&lt;/a&gt;. In today's post, we're going to actually put something on the screen!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Depending on how your pygame installation has been applied, you may or may not have access to load different sorts of graphic formats into your game. For today's purposes, I'll just be loading &lt;a href=&quot;http://en.wikipedia.org/wiki/BMP_file_format&quot;&gt;bitmap format&lt;/a&gt; (BMP) - seems pretty common amongst a lot of people's installations.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Images&lt;/h3&gt;&lt;div&gt;To load and work with images in our game, we'll be employing the help of the &lt;a href=&quot;http://www.pygame.org/docs/ref/image.html&quot;&gt;pygame.image&lt;/a&gt; module. The &lt;a href=&quot;http://www.pygame.org/docs/ref/image.html#pygame.image.load&quot;&gt;load function&lt;/a&gt;&amp;nbsp;in this module takes in a path to where your image is on disk and returns you a &lt;a href=&quot;http://www.pygame.org/docs/ref/surface.html&quot;&gt;Surface&lt;/a&gt; with your image loaded up on it. The other item of interest in the example code is that because we have been returned a&amp;nbsp;&lt;a href=&quot;http://www.pygame.org/docs/ref/surface.html&quot;&gt;Surface&lt;/a&gt;, we get all of the goodies that come along with it including being able to get the rectangle that bounds the image so we can measure it on screen.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here's the code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/4985286.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;This still hasn't changed much through all of these posts. You'll see that actually getting the image involved in your game is achieved by using the &lt;a href=&quot;http://www.pygame.org/docs/ref/surface.html#Surface.blit&quot;&gt;blit&lt;/a&gt; function which draws a surface to another using a rectangle.&lt;br /&gt;&lt;br /&gt;Providing your image is called spot and it's a blue ball, you should have something like this:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-eXL7kfPAjxk/USNsSXZqX5I/AAAAAAAAAmw/YaAlL7XXgB4/s1600/Screen+Shot+2013-02-19+at+10.11.52+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;277&quot; src=&quot;http://2.bp.blogspot.com/-eXL7kfPAjxk/USNsSXZqX5I/AAAAAAAAAmw/YaAlL7XXgB4/s320/Screen+Shot+2013-02-19+at+10.11.52+PM.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;That's about it really.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Pygame Part 2 Eventing</title>
   <link href="http://tuttlem.github.io/2013/02/18/pygame-part-2-eventing/"/>
   <updated>2013-02-18T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/02/18/pygame-part-2-eventing</id>
   <content type="html">&lt;h1&gt;Pygame Part 2 Eventing&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;In my &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/02/pygame-part-1-window.html&quot;&gt;previous post&lt;/a&gt;&amp;nbsp;in this article series, we created a window and repeatedly painted black to the screen. A major flaw had crept into this application already. We weren't considering the operating system what so ever and therefore this made for a very unresponsive application.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Events help our pygame applications respond to &quot;things&quot; that happen. This could be a key being pressed, the mouse being moved or simply that a quit message was sent to the application.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Today's post will focus on processing events in our pygame application.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Listening for Events&lt;/h3&gt;&lt;div&gt;The &lt;a href=&quot;http://www.pygame.org/docs/ref/event.html&quot;&gt;documentation&lt;/a&gt; on the event module in pygame is quite extensive. It covers everything off in the API and is the perfect reference for when you're stuck. We're interested in &lt;a href=&quot;http://www.pygame.org/docs/ref/event.html#pygame.event.poll&quot;&gt;pygame.event.poll&lt;/a&gt; for our purposes. We'll use this function to continuously check for events of interest that have occurred.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The only change from our initial code is that our game is controlled by a boolean as to weather it is still running or not. That variable then gets flipped if a quit message is detected by the framework.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here's the code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/4976682.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This is a pretty simple example and don't let it fool you. The eventing system will cover all of your needs as far as responding to in-game actions.&lt;br /&gt;&lt;br /&gt;Running this code, the application will now respond to the operating system and will terminate gracefully when it receives a quit message.&lt;br /&gt;&lt;br /&gt;Simple.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Pygame Part 1 The Window</title>
   <link href="http://tuttlem.github.io/2013/02/17/pygame-part-1-the-window/"/>
   <updated>2013-02-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/02/17/pygame-part-1-the-window</id>
   <content type="html">&lt;h1&gt;Pygame Part 1 The Window&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;It's easy to be productive when you've got good tools. I've forever been building game engines in an attempt that I'll actually put it to use one day to write a game. The constant distraction is adding just the &quot;1 feature more&quot; which in turn ends up stopping you from actually writing a game. It's time to look for help.&amp;nbsp;&lt;a href=&quot;http://www.pygame.org/&quot;&gt;Pygame&lt;/a&gt; is exactly what someone like me needs to squeeze the excuses. With a fully-featured game library, there's no more needing to build the library - all you need to do is be productive writing your game!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I hope to put together a handful of tutorials that I can come back to at anytime and already have a head start.&amp;nbsp;These tutorials will assume that you already have a pygame environment up and running. There's plenty of tutorials around the traps already to get you on your way, I've even done one for OSX &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/12/pygame-virtualenv-pip-homebrew.html&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To start off, today's tutorial will do nothing more than get a window on screen, repeatedly painting black.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;The code&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/4970913.js&quot;&gt;&lt;/script&gt; You can see here that getting a window up and running is very straight forward. We initialise the framework, setup the display and start painting.&lt;br /&gt;&lt;br /&gt;All going well, if you run this code from your console, you should end up with something like this.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-da79gYox4Lo/USCxara_UzI/AAAAAAAAAmg/N4XkUsss3ss/s1600/Screen+Shot+2013-02-17+at+8.30.28+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;277&quot; src=&quot;http://2.bp.blogspot.com/-da79gYox4Lo/USCxara_UzI/AAAAAAAAAmg/N4XkUsss3ss/s320/Screen+Shot+2013-02-17+at+8.30.28+PM.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;That's it. Couldn't be easier!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Bootstrap your NASM programs with NASMX</title>
   <link href="http://tuttlem.github.io/2013/02/15/bootstrap-your-nasm-programs-with-nasmx/"/>
   <updated>2013-02-15T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/02/15/bootstrap-your-nasm-programs-with-nasmx</id>
   <content type="html">&lt;h1&gt;Bootstrap your NASM programs with NASMX&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;I'd been looking over the past couple of nights for a way that I could simplify the &lt;a href=&quot;http://en.wikipedia.org/wiki/System_call&quot;&gt;syscall interface&lt;/a&gt; from NASM's perspective, just so I could clean up a lot of code that filled registers directly. I made a start on a couple of prototype projects, but never even thought to look outside and find out if someone had done the same.&lt;br /&gt;&lt;br /&gt;&quot;Surely, someone has been here before&quot;, I thought!&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;NASMX&lt;/h3&gt;&lt;div&gt;Yes, someone has been here before! &lt;a href=&quot;http://www.asmcommunity.net/projects/nasmx/&quot;&gt;NASMX&lt;/a&gt;&amp;nbsp;is a collection of include files specifically designed to wrap all of this system call code&amp;nbsp;intuitively&amp;nbsp;into a rather nicely presentable interface. Their &lt;a href=&quot;http://sourceforge.net/projects/nasmx/&quot;&gt;SourceForge project page&lt;/a&gt;&amp;nbsp;doesn't contain much documentation, but once you download the library you'll also receive a handful of demonstration programs using the library.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;An example&lt;/h3&gt;&lt;div&gt;First of all, you include the required header files.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/4956583.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Next, like any decent &quot;Hello World&quot; application you declare the data you require.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/4956598.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Finally, the application call looks very human (for assembly language)&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/4956613.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;That's it! The code above is not my own, I've just dissected the &quot;Hello World&quot; example that comes in the library's zip package.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>64bit ABI Cheatsheet</title>
   <link href="http://tuttlem.github.io/2013/02/14/64bit-abi-cheatsheet/"/>
   <updated>2013-02-14T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/02/14/64bit-abi-cheatsheet</id>
   <content type="html">&lt;h1&gt;64bit ABI Cheatsheet&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Using a few different articles around the web, I thought it might be a good idea to aggregate all of the information around calling conventions in 64bit land. This could come in handy when wanting to write a cross OS compliant library at the assembly level.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This particular article will directly target the assembly programming layer so that topics like C++ name mangling and caller clean-up are removed from its scope.&lt;/div&gt;&lt;h3&gt;References&lt;/h3&gt;&lt;div&gt;x86 calling conventions&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/X86_calling_conventions&quot;&gt;http://en.wikipedia.org/wiki/X86_calling_conventions&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;x86-64.org documentation&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://www.x86-64.org/documentation/&quot;&gt;http://www.x86-64.org/documentation/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Mac OSX 64 bit Assembly System Calls&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://thexploit.com/secdev/mac-os-x-64-bit-assembly-system-calls/&quot;&gt;http://thexploit.com/secdev/mac-os-x-64-bit-assembly-system-calls/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Microsoft&lt;/h3&gt;&lt;div&gt;Windows will use &lt;b&gt;RCX&lt;/b&gt;, &lt;b&gt;RDX&lt;/b&gt;, &lt;b&gt;R8 &lt;/b&gt;and &lt;b&gt;R9 &lt;/b&gt;for the first four integer or pointer arguments. &lt;b&gt;XMM0&lt;/b&gt;, &lt;b&gt;XMM1&lt;/b&gt;, &lt;b&gt;XMM2 &lt;/b&gt;and &lt;b&gt;XMM3 &lt;/b&gt;are used for floating point arguments. Additional arguments are passed via the stack (right to left).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;An integer or pointer return value will be returned in &lt;b&gt;RAX&lt;/b&gt;. Floating point return will be in &lt;b&gt;XMM0&lt;/b&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;System V&lt;/h3&gt;&lt;div&gt;System V operating systems will use &lt;b&gt;RDI&lt;/b&gt;, &lt;b&gt;RSI&lt;/b&gt;, &lt;b&gt;RDX&lt;/b&gt;, &lt;b&gt;RCX&lt;/b&gt;, &lt;b&gt;R8 &lt;/b&gt;and &lt;b&gt;R9&lt;/b&gt;. &lt;b&gt;XMM0&lt;/b&gt;, &lt;b&gt;XMM1&lt;/b&gt;, &lt;b&gt;XMM2&lt;/b&gt;, &lt;b&gt;XMM3&lt;/b&gt;, &lt;b&gt;XMM4&lt;/b&gt;, &lt;b&gt;XMM5&lt;/b&gt;, &lt;b&gt;XMM6 &lt;/b&gt;and &lt;b&gt;XMM7 &lt;/b&gt;will be used to pass floating point parameters. &lt;b&gt;RAX &lt;/b&gt;will hold the syscall number. Additional arguments are passed via the stack (right to left).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Return values are sent back via &lt;b&gt;RAX&lt;/b&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Syscall Numbers&lt;/h3&gt;&lt;div&gt;It's interesting to note the structure of the syscall number when it comes time to execute. Looking at &lt;a href=&quot;http://www.opensource.apple.com/source/xnu/xnu-792.13.8/osfmk/mach/i386/syscall_sw.h&quot;&gt;syscall_sw.h&lt;/a&gt;, you'll see that apple machines want a 2 in the higher-order double word such that the &quot;write&quot; syscall, normally passed as 0x04 would be passed as 0x2000004 in OSX.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;That's it for today. Just a cheat sheet really.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Entering Unicode Characters in VIM</title>
   <link href="http://tuttlem.github.io/2013/02/10/entering-unicode-characters-in-vim/"/>
   <updated>2013-02-10T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/02/10/entering-unicode-characters-in-vim</id>
   <content type="html">&lt;h1&gt;Entering Unicode Characters in VIM&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Just a quick tip sheet on how to enter unicode characters into a text page when using vim. From time to time I've needed characters listed up &lt;a href=&quot;http://www.fileformat.info/info/unicode/char/search.htm&quot;&gt;here&lt;/a&gt;&amp;nbsp;just to give my applications that little extra touch.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Entering characters by code&lt;/h3&gt;&lt;div&gt;To enter a character by its decimal value&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre&gt;^Vnnn&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To enter a character by its octal value&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre&gt;^Vonnn&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To enter a character by its hex value&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre&gt;^Vxnn&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To enter a character by its hex value for BMP unicode codepoints&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre&gt;^Vunnnn&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To enter a character by its hex value for any unicode codepoint&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre&gt;^VUnnnnnnnn&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In all of these examples, the n's are the code and ^V means Control-V.&lt;br /&gt;&lt;br /&gt;That's it!&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Working with Audio in Haskell (Part 1)</title>
   <link href="http://tuttlem.github.io/2013/02/09/working-with-audio-in-haskell-part-1/"/>
   <updated>2013-02-09T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/02/09/working-with-audio-in-haskell-part-1</id>
   <content type="html">&lt;h1&gt;Working with Audio in Haskell (Part 1)&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;Digital signal processing&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Audio_signal_processing&quot;&gt;audio processing&lt;/a&gt;&amp;nbsp;and the like are all rather complex topics of study. I have a personal interest in these fields as I try to create guitar processing effects from time to time. Today's post is all about taking the first steps in getting our hands on some audio and associated information from within Haskell.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;hsndfile&lt;/h3&gt;&lt;div&gt;For today's post, I'll be using the library &lt;a href=&quot;http://www.haskell.org/haskellwiki/Hsndfile&quot;&gt;hsndfile&lt;/a&gt;&amp;nbsp;to do all of the heavy lifting as far as opening audio files and interpreting information. The files that we'll work with will need to be in &lt;a href=&quot;http://en.wikipedia.org/wiki/WAV&quot;&gt;wave format&lt;/a&gt;. The demonstration in this post will simply open an audio file, read some information about the file and then close the file.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Project setup&lt;/h3&gt;&lt;div&gt;I've created a Haskell project using cabal so that I can manage the hsndfile dependency locally to this application. You may already have this installed globally on your system, but if you follow along here, you should have it installed to your project in not time.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Setup your project as usual:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ mkdir sndtest&lt;br /&gt;$ cd sndtest&lt;br /&gt;$ touch LICENSE&lt;br /&gt;$ cabal init&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Just select all of the defaults when setting up your project (well, that's what I did, anyway).&lt;br /&gt;&lt;br /&gt;We need to add&amp;nbsp;&lt;a href=&quot;http://www.haskell.org/haskellwiki/Hsndfile&quot;&gt;hsndfile&lt;/a&gt;&amp;nbsp;as a dependency to our project, so we'll specify this in our &quot;sndtest.cabal&quot; file. Open it up and make sure that your &quot;build-depends&quot; reads as follows.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;build-depends:         base ==4.5.*,&lt;br /&gt;                       hsndfile ==0.5.3&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Of course, you may have some different version of base, but here's where I was at anyway.&lt;br /&gt;&lt;br /&gt;Create a new file in your project called &quot;Test.hs&quot;. We'll now fill out this file with the code that will open a file, read its information, close the file and then display the information to screen.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/4743448.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;This is pretty straight forward. First up, we import &quot;Sound.File.SndFile&quot; qualified as &quot;SF&quot; so we know when we're using something from this import.&lt;br /&gt;&lt;br /&gt;Dissecting the main function, firstly we open the file using &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hsndfile/latest/doc/html/Sound-File-Sndfile.html#v:openFile&quot;&gt;openFile&lt;/a&gt;. This function expects the path to the audio file (in this case we're using &quot;test.wav&quot; which by the way you'll have to find something), we're only reading from the file at the moment so we specify &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hsndfile/latest/doc/html/Sound-File-Sndfile.html#v:ReadMode&quot;&gt;ReadMode&lt;/a&gt;&amp;nbsp;and finally we have the info parameter which is useful to us when we're writing a new file (so we can tell it what format to write in, etc), but for reading we just use &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hsndfile/latest/doc/html/Sound-File-Sndfile.html#v:defaultInfo&quot;&gt;defaultInfo&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;We now read the stream information about the file using &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hsndfile/latest/doc/html/Sound-File-Sndfile.html#v:hInfo&quot;&gt;hInfo&lt;/a&gt;, the result of which will give us back a value of type &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hsndfile/latest/doc/html/Sound-File-Sndfile.html#t:Info&quot;&gt;Info&lt;/a&gt;. This info packet tells us the number of frames in the file, the sample rate, number of channels, header and sample format, number of sections and if the file is seekable or not.&lt;br /&gt;&lt;br /&gt;Now that we have the information from the stream, we can close it off. We do this with &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hsndfile/latest/doc/html/Sound-File-Sndfile.html#v:hClose&quot;&gt;hClose&lt;/a&gt;. Now we can interrogate the Info value with a series of print statements.&lt;br /&gt;&lt;br /&gt;We've got a module ready to run, but we need to tell our project that it's the entry point to run. In the &quot;sndtest.cabal&quot; file, make sure you set your &quot;main-is:&quot; attribute like so.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;main-is:           Test.hs&lt;/pre&gt;&lt;br /&gt;&lt;h3&gt;Build and Run&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;We've created our project and finished our code. Let's build and run the application.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The first build is going to take a bit more time as cabal-dev will need to resolve all of the dependencies that it doesn't yet have. Get this process moving with the following command.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ cabal-dev install&lt;/pre&gt;&lt;br /&gt;All going well, you should be able to launch your executable and check out the results:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ dist/build/sndtest/sndtest&lt;br /&gt;format:      Format {headerFormat = HeaderFormatWav, sampleFormat = SampleForm&lt;br /&gt;atPcm16, endianFormat = EndianFile}&lt;br /&gt;sample rate: 48000&lt;br /&gt;channels:    2&lt;br /&gt;frames:      302712&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;That's it for today's post. Hopefully I'll get back to this topic soon so I can write some more about audio processing.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>GUI Programming with Gtk in Haskell</title>
   <link href="http://tuttlem.github.io/2013/02/09/gui-programming-with-gtk-in-haskell/"/>
   <updated>2013-02-09T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/02/09/gui-programming-with-gtk-in-haskell</id>
   <content type="html">&lt;h1&gt;GUI Programming with Gtk in Haskell&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;If you do spend a bit of time writing applications in Haskell, you'll probably be writing a lot of console programs. I love writing console programs but sometimes you just want a bit of GUI. In today's post, I want to do a walkthrough of getting an application up and running with the help of Gtk Haskell bindings&amp;nbsp;&lt;a href=&quot;http://projects.haskell.org/gtk2hs/&quot;&gt;Gtk2Hs&lt;/a&gt;. The result code is actually the &quot;Hello World&quot; example they provide, but this should still serve as a good walkthrough.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Gtk2Hs&lt;/h3&gt;&lt;div&gt;As I mentioned in the introduction, we'll be using the Haskell bindings for Gtk&amp;nbsp;&lt;a href=&quot;http://projects.haskell.org/gtk2hs/&quot;&gt;Gtk2Hs&lt;/a&gt;&amp;nbsp;to accomplish our UI. As you'd expect, it's very much like writing Gtk applications using other language bindings, only this way we get to use our functional brains to get there.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Take a look through the package up on &lt;a href=&quot;http://hackage.haskell.org/package/gtk-0.12.0&quot;&gt;Hackage&lt;/a&gt;&amp;nbsp;as well as the &lt;a href=&quot;http://www.haskell.org/haskellwiki/Gtk2Hs&quot;&gt;Wiki Article&lt;/a&gt; about the library. This should give even the uninitiated a bit of the background story behind the library.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Project Setup&lt;/h3&gt;&lt;div&gt;Start a new project in the usual fashion with cabal.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ mkdir guitest&lt;br /&gt;$ cd guitest&lt;br /&gt;$ touch LICENSE&lt;br /&gt;$ cabal init&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;There are quite a list of dependencies to use the package &quot;gtk&quot; as listed on the&amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/package/gtk-0.12.0&quot;&gt;Hackage&lt;/a&gt;&amp;nbsp;page. One dependency is that you need to have &quot;gtk2hs-buildtools&quot; installed. Get these installed into your project with the following command.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ cabal-dev install gtk2hs-buildtools&lt;/pre&gt;&lt;br /&gt;Now that you've installed these tools, you'll need to get them on your path so that they are available at compile time. You can do this with the following command.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ export PATH=~/projdir/cabal-dev/bin:$PATH&lt;/pre&gt;&lt;br /&gt;The other requirements which might just be localised to my environment (OSX 10.8) is that I needed to make pkg-config aware of the &quot;pc&quot; files for X11. I did this simply by running the following command.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;export PKG_CONFIG_PATH=/opt/X11/lib/pkgconfig/&lt;/pre&gt;&lt;br /&gt;Finally for dependencies is making your project file aware of the dependencies on the application. As I mentioned before, there are a few and these just get listed under your &quot;build-depends&quot; attribute in your cabal project file. Here's how mine looks.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;build-depends:       base ==4.5.*,   &lt;br /&gt;                     gtk ==0.12.4,   &lt;br /&gt;                     cairo ==0.12.4, &lt;br /&gt;                     glib ==0.12.4,  &lt;br /&gt;                     pango ==0.12.4, &lt;br /&gt;                     gio ==0.12.4    &lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Create a new file in your project called &quot;Test.hs&quot; and add the following code. This code is very simple. It opens a window, adds a button (with an event handler attached) and that's about it.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/tuttlem/4744834.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;This code is pretty straight forward and it almost reads like english so you can see exactly what it's doing.&lt;br /&gt;&lt;br /&gt;Now that we have a main module, it's time to tell our project file that it exists and that it's where we'll find our &quot;main&quot; function. You do this by setting the &quot;main-is&quot; attribute to this file's name &quot;Test.hs&quot; in your cabal file.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;main-is:             Test.hs&lt;/pre&gt;&lt;br /&gt;&lt;h3&gt;Build and Run&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;It's time to give this bad boy a go. This first build will feel like it's taking forever, but it'll only be on the first time while cabal-dev gets all of the dependencies together and builds them. Subsequent builds will be much quicker.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Build your project with the following command.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;$ cabal-dev install&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Go and make a coffee, then another one .. do all of your shopping, come back ... aaannnnndd ....&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-Mz5UA3upxBM/URYw0pKxg_I/AAAAAAAAAmQ/DoK8SkCl4YM/s1600/Screen+Shot+2013-02-09+at+9.18.58+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-Mz5UA3upxBM/URYw0pKxg_I/AAAAAAAAAmQ/DoK8SkCl4YM/s1600/Screen+Shot+2013-02-09+at+9.18.58+PM.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;You end up with a rather unimpressive (but working) gtk application! Well, there's still more to learn on this topic, this is only the start.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Mutable State with IORef</title>
   <link href="http://tuttlem.github.io/2013/02/01/mutable-state-with-ioref/"/>
   <updated>2013-02-01T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/02/01/mutable-state-with-ioref</id>
   <content type="html">&lt;h1&gt;Mutable State with IORef&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Haskell goes to great lengths to control state but one way you can achieve mutable state in Haskell is by use of &lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-IORef.html&quot;&gt;IORef&lt;/a&gt;. IORef gives you the ability to assign a reference to a variable in the &lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/System-IO.html#t:IO&quot;&gt;IO monad&lt;/a&gt;. This at least decorates your code in such a way that it's obvious to you, the developer and Haskell that there will be side effects.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Today's post, I'll create a very simple example usage of IORef. We'll construct a counter that we can increment and decrement.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Declaring our type&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4689143.js&quot;&gt;&lt;/script&gt; First of all, we import Data.IORef to give us access to IORef. We declare our counter data type using record style, the only member of which is the value that counts. It's an IORef Int to mean it references a variable in the IO monad that will be of type Int. So, it's not so blatant that you're dragging the integer value around with you, rather you're dragging something closer to a pointer to the value or reference.&lt;br /&gt;&lt;br /&gt;To build one of our types, we need to use &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-IORef.html#v:newIORef&quot;&gt;newIORef&lt;/a&gt;&amp;nbsp;which references our actual value and we wrap it up in our Counter data type.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4689602.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;makeCounter takes in an initial integer that will seed our counter and returns a Counter in the IO monad.&lt;br /&gt;&lt;br /&gt;Getting our hands on the reference and doing something with it is pretty simple with the use of &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-IORef.html#v:modifyIORef&quot;&gt;modifyIORef&lt;/a&gt;. Using this information, we can increment our counter with the following function.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4689654.js&quot;&gt;&lt;/script&gt; modifyIORef actually gives us the ability to pass a function to modify the referenced value. Be careful with modifyIORef though. As with a lot of things in Haskell, this is lazy. We're operating on IO actions here so it's all &quot;promises to do something&quot; or &quot;will do it later when I need to&quot; type operations, so repeatedly calling this without emitting the value will make these promises pile up. There is a strict and non-lazy evaluated version called modifyIORef'.&lt;br /&gt;&lt;br /&gt;Finally, when we want to get our hands on the referenced value and do something with it (in our example here, we'll just present it to screen) we use &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-IORef.html#v:readIORef&quot;&gt;readIORef&lt;/a&gt;. readIORef will take our IORef and just made it a value in the IO monad meaning we can simply use &quot;&amp;lt;-&quot; to emit the value.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4689688.js&quot;&gt;&lt;/script&gt; This all pretty straight forward. Seeing this Counter run from GHCI is pretty straight forward.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;λ&amp;gt; c &amp;lt;- makeCounter 1&lt;br /&gt;λ&amp;gt; showCounter c&lt;br /&gt;1&lt;br /&gt;λ&amp;gt; incCounter 1 c&lt;br /&gt;λ&amp;gt; showCounter c&lt;br /&gt;2&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;There you have it - mutable state with IORef.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Write yourself a Scheme in 48 Hours</title>
   <link href="http://tuttlem.github.io/2013/01/29/write-yourself-a-scheme-in-48-hours/"/>
   <updated>2013-01-29T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/29/write-yourself-a-scheme-in-48-hours</id>
   <content type="html">&lt;h1&gt;Write yourself a Scheme in 48 Hours&lt;/h1&gt;
&lt;div class='post'&gt;
A small bookmark to myself, wikibooks has an import of Johnathan Tang's &lt;a href=&quot;http://jonathan.tang.name/files/scheme_in_48/tutorial/overview.html&quot;&gt;Write Yourself a Scheme in 48 Hours&lt;/a&gt; that I've come across.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours&quot;&gt;http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Looks quite good if you've already gone through the language cruft that all of the other tutorials put you through first.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Making a Big Math Library (Part 2)</title>
   <link href="http://tuttlem.github.io/2013/01/29/making-a-big-math-library-part-2/"/>
   <updated>2013-01-29T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/29/making-a-big-math-library-part-2</id>
   <content type="html">&lt;h1&gt;Making a Big Math Library (Part 2)&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;In the &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/making-big-math-library.html&quot;&gt;previous post&lt;/a&gt;, we had setup a basic array data type to act as a very big number. We implemented an initialise, increment and decrement function. Today we'll extend on this library by adding some zero testing. It is of interest to us when our numbers are zero and when they aren't.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Scanning our number&lt;/h3&gt;&lt;div&gt;The plan of attack is to use a scan string quad-word (scasq). We're going to enumerate our array, testing each block for zero. If we make it to the end of the array, we have a zero number. If our scanning got interrupted by a non-zero number, our overall number couldn't possibly be zero.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here's the code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4660728.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;Now that we've got this function, we can wrap it up with a print so we can visually see if a number is zero or not. This will also give you basic usage of the function above.&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4660742.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;&lt;h3&gt;In action&lt;/h3&gt;&lt;div&gt;Now that we've got a little helper function to wrap up our is-zeroness and reporting on this to the console, we're free to test it out as follows.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4660760.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;To which we end up with a result looking like this.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;➜  bigmath  ./bigmath&lt;br /&gt;The number was zeroThe number was not zero                               &lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;As expected. Initially the number was zero, after incrementation is was not.&lt;br /&gt;&lt;br /&gt;There's some basic logic testing for your big number.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Monads</title>
   <link href="http://tuttlem.github.io/2013/01/28/monads/"/>
   <updated>2013-01-28T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/28/monads</id>
   <content type="html">&lt;h1&gt;Monads&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Following on from my previous posts about &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/functors-in-haskell.html&quot;&gt;functors&lt;/a&gt;, &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/applicative-functors-in-haskell.html&quot;&gt;applicative functors&lt;/a&gt; and &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/applying-applicative.html&quot;&gt;applying applicative&lt;/a&gt;&amp;nbsp;it would only be natural for me to post a follow up on the topic of Monads. Monads take shape very similarly to applicative functors so for this post to make sense, I suggest you read the previous articles so that you have a chance to follow along.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What is a Monad?&lt;/h3&gt;&lt;div&gt;At a code level, a Monad is a type that is an instance of the &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:Monad&quot;&gt;Monad&lt;/a&gt; type class. At a concept level a Monad allows you to provide a function that is context-unaware to operate over values that are wrapped in a context. Immediately, you'd think that this is weaker functionality that what was defined for applicative functors - and you'd be right in thinking so, but Monads do provide a very natural way to write code against our types.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here is the type definition for a Monad.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4654705.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Moving through all of the defined functions, you first see &quot;return&quot;. &quot;return&quot; is the same as &quot;pure&quot; which we defined when making an applicative functor. &quot;return&quot;'s role in this type is to lift a value into a context. The next function you see is &quot;&amp;gt;&amp;gt;=&quot; which is pronounced &quot;bind&quot;. This is the major difference right here. The &quot;bind&quot; function is what takes a value wrapped in a context &lt;b&gt;&quot;m a&quot; &lt;/b&gt;and takes a function with a parameter of &lt;b&gt;&quot;a&quot; &lt;/b&gt;returning a wrapped b as &lt;b&gt;&quot;m b&quot;&lt;/b&gt;, with the function returning a b in a context &quot;&lt;b&gt;m b&quot;&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;The remaining two operations are rarely delved into as their default implementations suffice majority of scenarios.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Laws&lt;/h3&gt;&lt;div&gt;There are some laws that need to be abided by when implementing Monads.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Left Identity suggests that&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;x &amp;gt;&amp;gt;= f is the same thing as f x&amp;nbsp;&lt;/pre&gt;&lt;br /&gt;Right Identity suggests that&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;m &amp;gt;&amp;gt;= return is the same as m&lt;/pre&gt;&lt;br /&gt;Associativity suggests that&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;(m &amp;gt;&amp;gt;= f) &amp;gt;&amp;gt;= g is the same as m &amp;gt;&amp;gt;= (\x -&amp;gt; f x &amp;gt;&amp;gt;= g)&lt;/pre&gt;&lt;br /&gt;Such that it shouldn't matter how these calls are nested together.&lt;/div&gt;&lt;h3&gt;Custom context&lt;/h3&gt;&lt;div&gt;Applying this knowledge to our rather useless example &quot;CustomContext&quot; discussed &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/applying-applicative.html&quot;&gt;here&lt;/a&gt;, we can make this type a monad with the following definition.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4654745.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Ok, so - as prophesied &quot;return&quot; is doing the same thing as &quot;pure&quot; did for us - it's just lifting a plain value into our context. &quot;&amp;gt;&amp;gt;=&quot; or &quot;bind&quot; on the other hand is taking the value out of its context and applying a function to it.&lt;br /&gt;&lt;br /&gt;We can check out our bind implementation in action with the following simple examples.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;λ&amp;gt; CustomContext 3 &amp;gt;&amp;gt;= \x -&amp;gt; return (x + 1)&lt;br /&gt;CustomContext 4&lt;br /&gt;λ&amp;gt; CustomContext &quot;Hello&quot; &amp;gt;&amp;gt;= \x -&amp;gt; return (x ++ &quot; World!&quot;)&lt;br /&gt;CustomContext &quot;Hello World!&quot;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Our value is having a function applied to it. Values are getting de-contexted, worked-on than re-contexted. Pretty straight forward.&lt;br /&gt;&lt;br /&gt;To show you how &quot;&amp;gt;&amp;gt;=&quot; can work for us, I've created a function that will accumulate even numbers as they are received into it. If an odd number is encountered, the accumulated total get wiped back to zero until conditions are met to have another two consecutive calls with even numbers.&lt;br /&gt;&lt;br /&gt;Here's how the function looks.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4654909.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Using guards, we filter out odd numbers sending the result back to zero otherwise we continue to accumulate. Note how the inputs are just plain integers but the output is an integer wrapped in one of our CustomContext types. With the use of &quot;&amp;gt;&amp;gt;=&quot; the following calls are possible.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;λ&amp;gt; accumEven 0 2&lt;br /&gt;CustomContext 2&lt;br /&gt;λ&amp;gt; accumEven 0 2 &amp;gt;&amp;gt;= accumEven 4&lt;br /&gt;CustomContext 6&lt;br /&gt;λ&amp;gt; accumEven 0 2 &amp;gt;&amp;gt;= accumEven 4 &amp;gt;&amp;gt;= accumEven 7&lt;br /&gt;CustomContext 13&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;First of all, we're freely using wrapped and un-wrapped contexts thanks to that bind operator. More interestingly (and demonstrative to our purposes here), the last example appears to be in error, but it's really not. Think about it this way.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;accumEven 0 2 = 2&lt;br /&gt;accumEven 4 2 = 6&lt;br /&gt;accumEven 6 7 = 13&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;So you can see here that the next sub-sequent call to &quot;accumEven&quot; would finish with a 0 (zero) value as the 13 would be carried onto the next call and would be tested for evenness. Even if this isn't the best example, it still demonstrates how bind is sending information between the calls.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;do Notation&lt;/h3&gt;&lt;div&gt;Another nicety when working with Monads is &quot;do&quot; notation. &quot;do&quot; notation allows you to clean up a lot of the boilerplate that builds up around the functionality you write when working with monadic values. Here's a very simple function that builds a CustomContext from two other CustomContexts by adding them.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4655091.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;You can see how things start to get a bit gnarly once you chain more calls together. Using &quot;do&quot; notation, this gets cleaned up pretty well. The above can be re-written like so.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4655121.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;That's so much easier to read! There's &quot;do&quot; notation at work for you, anyway.&lt;br /&gt;&lt;br /&gt;Well, that's all there is for Monads right now. As soon as I try something useful with them, I'll post a follow-up article of Monads in Application.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Making a Big Math Library</title>
   <link href="http://tuttlem.github.io/2013/01/28/making-a-big-math-library/"/>
   <updated>2013-01-28T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/28/making-a-big-math-library</id>
   <content type="html">&lt;h1&gt;Making a Big Math Library&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;In most of your day to day applications, numbers that fit within 8, 16, 32 and 64 bits are enough. Sometimes you may need to stretch out into your floating point processor to include some more precision and start looking at 80 bit numbers.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Today's post, I want to start on a library in assembly language that works on even bigger numbers. There are going to be some caveats or conditions that we'll establish up front, but they will be big numbers!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The design considerations for this library will be as follows:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Unsigned integers&lt;/li&gt;&lt;li&gt;Fixed size&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;With this information, we can now start to build our library.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;The big number data type&lt;/h3&gt;&lt;div&gt;Well, it's not really that special at all. We just need to define an array of quad-words to the length that we want. So, an example would look like this.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4652710.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;That's all pretty simple. A number is just an array of a pre-defined length. With a length to 10, at 64 bits per array index we've got ourselves a 640 bit number. Quite large. In fact, we're talking numbers up to 4.562441e+192. Now that's impressive.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Lets operate!&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;We've got a very impressive data type that we can declare where ever we want, but how do we use it? We need to define all of the management, arithmetic, logic and printing ourselves. First of all though, we'll want to be able to zero out our number, which is just continually writing zeros over our memory buffer (much like a memset).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4652737.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;Excellent. We can initialize our big number now to zero so that we have a starting point. Next, we'll want to be able to debug any problems that we may have while building this library, so its going to be of great benefit to be able to see what the value is of our number.&lt;br /&gt;&lt;br /&gt;The following code leans on some assembly I had written in a &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/printing-registers-value-in-hex.html&quot;&gt;previous article&lt;/a&gt; which displays the value in RAX. Here's how we'll print our big number to screen.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4652780.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Most obvious thing to note here is that we're moving through the bignumber back-to-front so that it's presented on screen in a human manner. We can test what we have so far is working by writing a small piece of test code.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4652889.js&quot;&gt;&lt;/script&gt; &lt;/div&gt;&lt;div&gt;Which, rather uninterestingly will just spit out a massive list of zeros.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&lt;/pre&gt;&lt;br /&gt;So, lets do something a little more interesting. The smallest pieces of arithmetic that I think we can implement for these numbers is increment and decrement.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Increment&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;This is straight forward. Add 1 to the lowest part of the number. If that part of the number just &quot;clocked&quot;, or reset to zero - we must carry our value onto a higher block.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4652917.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Alright, we've got incrementation going on here. The most interesting case for us to test is when a block is sitting on the carry boundary or sitting at 0xffffffffffffffff. After we increment that, we should see that clear out to zero and the next block to get a 1.&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4652929.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Which results in the following.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF&lt;br /&gt;&lt;br /&gt;0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Those massive trails of zeros are getting annoying. We can clean them up later by making our print routine a little smarter. But you can see that we've successfully incremented over a boundary so that our next higher block gets a one.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Decrement&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;This is pretty much as straight forward as incrementing, on this time we're not going to carry to a higher quad-word, we're going to borrow from it if we do cross a boundary. Here's the code for a decrement.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4652945.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;This really is the increment routine just with the numeric direction reversed. Making sure that we are on the right track, we can test out the decrement across a boundary again.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4652953.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;The output of which looks like this.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF&lt;br /&gt;&lt;br /&gt;0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000&lt;br /&gt;&lt;br /&gt;000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Again, it's pretty hideous with the trailing zeros, but you can see this in action now. Back and forth, across boundaries - no sweat.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Conclusion&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Well, this is just the tip of the iceberg for this particular library. I'd hope to demonstrate logical testing, addition, subtraction, multiplication and division as well shortly.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The best part about these routines is that if you wanted to operate on 6400 bit numbers, all you have to do is change the constant &quot;bignum_size&quot; that I'd set earlier to 100.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Monoids and Associativity</title>
   <link href="http://tuttlem.github.io/2013/01/25/monoids-and-associativity/"/>
   <updated>2013-01-25T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/25/monoids-and-associativity</id>
   <content type="html">&lt;h1&gt;Monoids and Associativity&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;Associativity is a property of a function which has an output equivalent&amp;nbsp;no matter what order the function is applied. Addition and product are examples of mathematical functions that are associative as opposed to subtraction and division which are not.&lt;br /&gt;&lt;br /&gt;Today's post will focus on associative functions and their definitions through Monoids in Haskell.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Associative functions&lt;/h3&gt;In the introduction to this post, I spoke about associative functions and gave a few examples. Here are those examples again, but demonstrated mathematically.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;(5 * 7) * 9 == 5 * (7 * 9)&lt;br /&gt;(5 + 7) + 9 == 5 + (7 + 9)&lt;br /&gt;(5 - 7) - 9 != 5 - (7 - 9)&lt;br /&gt;(5 / 7) / 9 != 5 / (7 / 9)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;These examples are pretty straight forward in their reading. You can see clearly that the product and addition operators are associative, subtraction and division not.&lt;br /&gt;&lt;br /&gt;String concatenation (or array concatenation) is also associative such that:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&quot;Hello &quot; ++ (&quot;World&quot; ++ &quot;!&quot;) == (&quot;Hello &quot; ++ &quot;World&quot;) ++ &quot;!&quot;&lt;/pre&gt;&lt;br /&gt;These proofs are pretty straight forward. I think that you should have the idea of what associative functions are by now.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Monoids&lt;/h3&gt;&lt;div&gt;Monoids are Haskell's way of decorating a type that is functionally associative. The definition of a Monoid is as follows.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4627949.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;You can find more information specifically about the type up on the &lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-Monoid.html&quot;&gt;Haskell Wiki&lt;/a&gt;. From the definition above, we can see that there are 3 functions to be defined.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;mempty&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;mempty is the identity value for the monoid. It acts more like a constant rather than a function.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;mappend&lt;/h3&gt;&lt;div&gt;mappend is the binary function that can be used between two of these typed Monoids.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;mconcat&lt;/h3&gt;&lt;div&gt;mconcat folds the mappend function between the elements of an array of Monoids.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Monoid Laws&lt;/h3&gt;&lt;div&gt;Above, I have gone through the basic principals of associative functions which by-and-large cover off on the laws that a Monoid must abide by. There are some explicit ways of writing this concept, there are as follows.&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;pre&gt;mempty `mappend` x = x&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;pre&gt;x `mappend` mempty = x&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;pre&gt;(x `mappend` y) `mappend` z = x `mappend` (y `mappend` z)&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;That's Monoids for you. Take a look as some example implementations on the Wiki and around the web.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Applying Applicative</title>
   <link href="http://tuttlem.github.io/2013/01/25/applying-applicative/"/>
   <updated>2013-01-25T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/25/applying-applicative</id>
   <content type="html">&lt;h1&gt;Applying Applicative&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;In a &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/applicative-functors-in-haskell.html&quot;&gt;previous post&lt;/a&gt;, I had pretty much got the textbook definition down for an Applicative Functor and shown some of its pre-existing uses. Today's post, I want to walk through some code that I've written that implements Applicative.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Put it in context!&lt;/h3&gt;&lt;div&gt;Right on! It's all about context. When making instances of the &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:Functor&quot;&gt;Functor&lt;/a&gt; typeclass, it's all about defining &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:fmap&quot;&gt;fmap&lt;/a&gt; appropriately to &quot;operate&quot; on the data that sits in a context.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;What's a context then? The books and articles that I've read use pre-existing types as examples. A list for instance is a context, &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:Either&quot;&gt;Either&lt;/a&gt; is a context, &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:Maybe&quot;&gt;Maybe&lt;/a&gt; is a context. All of these things wrap data. So, let's make our own context to put something in.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4633650.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;There's our context, &quot;CustomContext&quot;. It just wraps around something .. anything. We can apply a functor instance to this with the following.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4633664.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:fmap&quot;&gt;fmap&lt;/a&gt;&amp;nbsp;allows a function to get inside the context and operate on the inner data - alright, I've said this already. Proof that all of this is working is as follows.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;λ&amp;gt; let x = CustomContext 10&lt;br /&gt;λ&amp;gt; x                       &lt;br /&gt;CustomContext 10           &lt;br /&gt;λ&amp;gt; fmap (+5) x             &lt;br /&gt;CustomContext 15           &lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;We wrapped 10 in a context. We applied the function (+5) to the value inside our context. We got back a 15 wrapped in a context.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Moving into Applicative territory now, it's not only the value that we operate on that has the context this time - it's also the function that we apply. We use the &quot;pure&quot; function to lift a value inside a context and we use &quot;&amp;lt;*&amp;gt;&quot; to apply a function to a value (both being inside their respective contexts).&lt;br /&gt;&lt;br /&gt;Here's how we'll define Applicative for our type.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4633738.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;The implementation of &quot;pure&quot; is straight forward, we're just going to pop the value in a &quot;CustomContext&quot; context. The sequential application function &quot;&amp;lt;*&amp;gt;&quot; is implemented very much how fmap was implemented, in fact it's the same. The difference comes in with how the parameters are supplied. We're taking the function out of the context, we take the value out of the context - we apply the function and wrap the result in the context.&lt;br /&gt;&lt;br /&gt;Here it is in action.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;λ&amp;gt; CustomContext (+5) &amp;lt;*&amp;gt; CustomContext 10&lt;br /&gt;CustomContext 15                          &lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;Also, with the use of &quot;pure&quot; lifting our values or functions into the context.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;λ&amp;gt; pure (+5) &amp;lt;*&amp;gt; CustomContext 10&lt;br /&gt;CustomContext 15                 &lt;br /&gt;λ&amp;gt; CustomContext (+5) &amp;lt;*&amp;gt; pure 10&lt;br /&gt;CustomContext 15                 &lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Excellent. We've done it.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Conclusion&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;This may not be the most feature-rich example, but it should give you good insight into the implementation and workings of Applicative.&lt;/div&gt;&lt;div&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>type, newtype & data</title>
   <link href="http://tuttlem.github.io/2013/01/24/type-newtype-data/"/>
   <updated>2013-01-24T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/24/type-newtype-data</id>
   <content type="html">&lt;h1&gt;type, newtype &amp; data&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;This post is just a small write up on the differences between these three keywords and their uses within Haskell.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;type&lt;/h3&gt;&lt;div&gt;Using the &quot;type&quot; keyword is the same as just referring to the actual type that you've declared. In other words, &quot;type&quot; just lets you make a synonym for the original type.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4613925.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;Using these, we'll be able to refer to a Card list as a Deck. They can be used&amp;nbsp;interchangeably as they'll directly cast. All this really does for us, is gives a pre-existing type a more meaningful name to our code.&lt;br /&gt;&lt;h3&gt;newtype&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Using the &quot;newtype&quot; keyword, we make a thin wrapper around an existing type. Something that will be treated differently at compile time, but will be directly translatable (and not subject to conversion) at runtime.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4599121.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&quot;newtype&quot; only allows you one constructor and one field. It's important that its used when you're creating data entries that have these constraints on them. These attributes make &quot;newtype&quot; a great candidate for when you just want to add a typeclass instance to an existing type.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;data&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The &quot;data&quot; keyword allows you to build much more complex types. With the &quot;data&quot; keyword, you can have as many constructors and fields as you like.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4614176.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;Of course, it would make more sense to use &quot;record syntax&quot; when defining these datatypes above.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4614325.js&quot;&gt;&lt;/script&gt; &lt;h3&gt;Wrapping up&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Use &quot;type&quot; to give your types more meaningful names&lt;/li&gt;&lt;li&gt;Use &quot;newtype&quot; if you just want to take an existing type and add a typeclass instance to it&lt;/li&gt;&lt;li&gt;Use &quot;data&quot; if you want to create your own datatype&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing Debian Squeeze on a T400</title>
   <link href="http://tuttlem.github.io/2013/01/24/installing-debian-squeeze-on-a-t400/"/>
   <updated>2013-01-24T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/24/installing-debian-squeeze-on-a-t400</id>
   <content type="html">&lt;h1&gt;Installing Debian Squeeze on a T400&lt;/h1&gt;
&lt;div class='post'&gt;
This post is just a quick guide for myself on getting &lt;a href=&quot;http://www.debian.org/&quot;&gt;Debian&lt;/a&gt; Squeeze installed on my T400. This guide will assume that you have already downloaded &lt;a href=&quot;http://www.debian.org/CD/netinst/&quot;&gt;netinst&lt;/a&gt; media, burnt it to CD.&lt;br /&gt;&lt;br /&gt;Everything out of the box works pretty well. Wifi needs a little extra attention, so .. onto the guide.&lt;br /&gt;&lt;h3&gt;Before you begin&lt;/h3&gt;You'll need these from off the web:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;iwlwifi-5000-1.ucode, iwlwifi-5000-2.ucode&lt;/li&gt;&lt;li&gt;wireless-tools&lt;/li&gt;&lt;li&gt;libpcsclite&lt;/li&gt;&lt;li&gt;libnl&lt;/li&gt;&lt;li&gt;libdbus&lt;/li&gt;&lt;li&gt;wpa_supplicant&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;b&gt;*Note*&lt;/b&gt; Through the installation process, the installer will complain that you don't have some non-free firmware. Whilst you can write the requested files&amp;nbsp;&lt;i&gt;iwlfifi-5000-2.ucode&lt;/i&gt; &amp;amp; &lt;i&gt;iwlwifi-5000-1.ucode&lt;/i&gt; to a USB stick and supply it to the installer, I still wasn't able to get wifi running through the installer. I activate it later.&lt;br /&gt;&lt;br /&gt;Continue the installation as normal until you're at the other end.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Get wireless running&lt;/h3&gt;The part of the guide is roughly based on the &lt;a href=&quot;http://wiki.debian.org/WiFi&quot;&gt;WIFI guide&lt;/a&gt; on the Debian site as well as the &lt;a href=&quot;http://wiki.debian.org/WiFi/HowToUse#Command_Line&quot;&gt;WIFI HowTo&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Once you're system is up, mount your media that has &lt;i&gt;wireless-tools. &lt;/i&gt;Install this package with the following command.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;# dpkg -i wireless-tools*.deb&lt;/pre&gt;&lt;br /&gt;Also install &lt;i&gt;wpa_supplicant&lt;/i&gt;&amp;nbsp;while you're there.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;# dpkg -i libpcsclite*.deb&lt;br /&gt;# dpkg -i libnl*.deb&lt;br /&gt;# dpkg -i libdbus*.deb&lt;br /&gt;# dpkg -i wpa_supplicant*.deb&lt;/pre&gt;&lt;br /&gt;Next, we'll add an entry into the /etc/network/interfaces file for our wireless interface. It should look something like the following.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;auto wlan0&lt;br /&gt;iface wlan0 inet dhcp&lt;br /&gt;    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;We now need to configure wpa_supplicant in the file that we specified above. Create a new file at /etc/wpa_supplicant/wpa_supplicant.conf and add the following details.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;ctrl_interface=/var/run/wpa_supplicant&lt;br /&gt;&lt;br /&gt;ap_scan=1&lt;br /&gt;&lt;br /&gt;network={&lt;br /&gt;      ssid=&quot;network-name&quot;&lt;br /&gt;      key_mgmt=WPA-PSK&lt;br /&gt;      psk=&quot;secret-key&quot;&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;Bring the wireless interface up.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;# ifup wlan0&lt;/pre&gt;&lt;br /&gt;You should have an IP address now.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Setting up software sources&lt;/h3&gt;&lt;div&gt;First things first. We need to change our sources list for apt. Change /etc/apt/sources.list to look like the following&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre&gt;deb http://mirror.aarnet.edu.au/debian stable main contrib non-free&lt;br /&gt;deb-src http://mirror.aarnet.edu.au/debian stable main contrib non-free&lt;br /&gt;&lt;br /&gt;deb http://ftp.debian.org/debian/ squeeze-updates main contrib non-free&lt;br /&gt;deb-src http://ftp.debian.org/debian/ squeeze-updates main contrib non-free&lt;br /&gt;&lt;br /&gt;deb http://security.debian.org/ squeeze/updates main contrib non-free&lt;br /&gt;deb-src http://security.debian.org/ squeeze/updates main contrib non-free&lt;br /&gt;&lt;br /&gt;deb http://www.deb-multimedia.org squeeze main non-free&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Update and upgrade the system here.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;# aptitude update &amp;amp;&amp;amp; aptitude upgrade&lt;/pre&gt;&lt;br /&gt;Add keyring package for the &lt;a href=&quot;http://deb-multimedia.org/&quot;&gt;Debian Multimedia&lt;/a&gt; repository.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;# aptitude install deb-multimedia-keyring&lt;/pre&gt;&lt;br /&gt;Re-update!&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;# aptitude update&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Get the basics installed&lt;/h3&gt;&lt;div&gt;The staple applications need to get onto the machine, so we'll install them now.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre&gt;# aptitude install zsh sudo vim git lynx&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Setup sudo by adding your normal user account to the group &quot;sudo&quot;.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;# usermod michael -aG sudo&lt;/pre&gt;&lt;br /&gt;Now, leave the root account alone!&lt;br /&gt;&lt;br /&gt;Change your default shell to zsh with the following command&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;$ chsh -s /usr/bin/zsh michael&lt;/pre&gt;&lt;br /&gt;With git installed, you'll be able to clone your dotfiles repository and take most of the configuration headaches away pretty quickly.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;X (xfce)&lt;/h3&gt;&lt;div&gt;Install X server, xfce, gdm and associated utilities with the following.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre&gt;$ sudo aptitude install xorg xfce4 xfce4-goodies gdm&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Install a &quot;sane&quot; browser.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;pre style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;$ sudo aptitude install chromium-browser&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3&gt;&lt;/h3&gt;&lt;h3&gt;&lt;/h3&gt;&lt;h3&gt;Development Environment&lt;/h3&gt;&lt;div&gt;Install the standard build tools. You'll need to add the testing repository as described in &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/getting-c11-support-in-debian.html&quot;&gt;this post&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;$ sudo aptitude install --target-release testing nasm gcc-4.7 g++-4.7 make&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Haskell goes on next. Take it from the testing repository also as it'll be a later version.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;$ sudo aptitude install --target-release testing haskell-platform&lt;br /&gt;$ cabal update&lt;br /&gt;$ cabal install cabal-install&lt;br /&gt;$ cabal install cabal-dev&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Python and associated environments - getting 2.7 as the default version for the machine.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;$ sudo aptitude install --target-release testing python2.7&lt;br /&gt;$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 2&lt;br /&gt;$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.6 1&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;pre style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;$ sudo aptitude install --target-release testing python-setuptools&lt;/pre&gt;&lt;br /&gt;easy_install, pip &amp;amp; virtualenv next.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;$ sudo easy_install pip&lt;br /&gt;$ sudo pip install virtualenv&lt;/pre&gt;&lt;br /&gt;Install RVM&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;$ curl -L https://get.rvm.io | bash -s stable --ruby&lt;/pre&gt;&lt;br /&gt;Follow the requirements as directed by the RVM requirements screen. Perform usual ruby system updates.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;$ gem update --system&lt;br /&gt;$ gem update&lt;/pre&gt;&lt;br /&gt;&lt;h3&gt;To be continued . . .&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Applicative Functors in Haskell</title>
   <link href="http://tuttlem.github.io/2013/01/22/applicative-functors-in-haskell/"/>
   <updated>2013-01-22T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/22/applicative-functors-in-haskell</id>
   <content type="html">&lt;h1&gt;Applicative Functors in Haskell&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;As a follow up to my &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/functors-in-haskell.html&quot;&gt;previous post&lt;/a&gt;&amp;nbsp;on Functors, it's a natural progression for me to do a post on the more advanced version, the Applicative Functor. In a normal functor, you'll map a function over a functor and applicative functor is a reverse view of this where it'll allow you to map many functor values over a single function.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What is an Applicative Functor?&lt;/h3&gt;&lt;div&gt;At the code level, an Applicative Functor is any type that is in instance of the &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&amp;nbsp;typeclass. At a concept level, the Applicative Functor has not only the values in &quot;a context&quot; but also the function that we'll apply is in a context. This differs from just a normal Functor (&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/functors-in-haskell.html&quot;&gt;read more here&lt;/a&gt;) where it's only the value that's wrapped in a context.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;An &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html#t:Applicative&quot;&gt;Applicative Functor&lt;/a&gt;&amp;nbsp;has 2 functions that require implementation. &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html#v:pure&quot;&gt;pure&lt;/a&gt;&amp;nbsp;and &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;. This typeclass and functions are defined as follows.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4589744.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;The definition for&amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html#v:pure&quot;&gt;pure&lt;/a&gt;&amp;nbsp;on Hoogle suggests that it will&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;Lift a value&lt;/i&gt;&lt;/blockquote&gt;&quot;Lifting&quot; is very well described in articles all over the web. Here's the &lt;a href=&quot;http://www.haskell.org/haskellwiki/Lifting&quot;&gt;Haskell Wiki's article&lt;/a&gt;&amp;nbsp;on Lifting.&amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html#v:pure&quot;&gt;pure&lt;/a&gt;&amp;nbsp;takes in a value and returns an applicative value around that value. It's actually quite a simple definition when you read it.&lt;br /&gt;&lt;br /&gt;The other function defined here is&amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;. &amp;nbsp;The definition for&amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&amp;nbsp;on Hoolgle suggests that it will perform&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;Sequential application&lt;/i&gt;&lt;/blockquote&gt;The definition of sequential application here can be expanded such that&amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&amp;nbsp;takes a function &lt;b&gt;(a -&amp;gt; b)&amp;nbsp;&lt;/b&gt;wrapped up in a functor&amp;nbsp;&lt;b&gt;f&lt;/b&gt; and another functor value &lt;b&gt;f a&lt;/b&gt;. It'll extract the function from the first parameter &lt;b&gt;(a -&amp;gt; b)&lt;/b&gt;, map it over the functor value &lt;b&gt;f a&lt;/b&gt;&amp;nbsp;to produce a result &lt;b&gt;f b&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;The concept is very similar to what we've seen before in mapping scenarios, it's just that we &quot;map&quot; with different &quot;things&quot;. Today we're mapping with functor values over a function.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Pure&lt;/h3&gt;Here's some examples of&amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html#v:pure&quot;&gt;pure&lt;/a&gt;&amp;nbsp;in action. You'll see that when we're casting to a type, we receive the appropriate value back&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;&amp;gt; pure &quot;Hey&quot; :: Maybe String&lt;br /&gt;Just &quot;Hey&quot;&lt;br /&gt;&lt;br /&gt;&amp;gt; pure &quot;Should be in a List&quot; :: [String]&lt;br /&gt;[&quot;Should be in a List&quot;]&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;You can see here that the value is &quot;lifted&quot; by&amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html#v:pure&quot;&gt;pure&lt;/a&gt;&amp;nbsp;into the container (in this case either a Maybe or a List).&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&amp;lt;*&amp;gt;&lt;/h3&gt;For the next set of examples, I'll show you some usages of &amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;. You'll need to keep in the front of your mind that all functions on the left hand side are applied to all values on the right hand side, so we end up with a&amp;nbsp;Cartesian&amp;nbsp;effect.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;&amp;gt; [sin, cos, tan] &amp;lt;*&amp;gt; [pi, pi, pi]&lt;br /&gt;[1.2246467991473532e-16,1.2246467991473532e-16,1.2246467991473532e-16,-1.0,-1.0,-1.0,-1.2246467991473532e-16,-1.2246467991473532e-16,-1.2246467991473532e-16]&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The&amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&amp;nbsp;function is left associable, so when you start chaining calls together it's the leftmost that is evaluated first.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;&amp;gt; [(+),(*)] &amp;lt;*&amp;gt; [1,2] &amp;lt;*&amp;gt; [3,4]&lt;br /&gt;[4,5,5,6,3,4,6,8]&lt;br /&gt;&lt;br /&gt;(which is really)&lt;br /&gt;[1+3,1+4,2+3,2+4,1*3,1*4,2*3,2*4]&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;h3&gt;Applicative Style&lt;/h3&gt;You can see how using this &quot;applicative style&quot; in code can often be swapped 1-for-1 with list comprehensions as you achieve the same permuted or&amp;nbsp;Cartesian&amp;nbsp;effect. Take this for example.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;&amp;gt; [salutation ++ name | salutation &amp;lt;- [&quot;Hello &quot;, &quot;Goodbye &quot;, &quot;Yo! &quot;], name &amp;lt;- [&quot;John&quot;, &quot;Mary&quot;, &quot;Anne&quot;]]&lt;br /&gt;[&quot;Hello John&quot;,&quot;Hello Mary&quot;,&quot;Hello Anne&quot;,&quot;Goodbye John&quot;,&quot;Goodbye Mary&quot;,&quot;Goodbye Anne&quot;,&quot;Yo! John&quot;,&quot;Yo! Mary&quot;,&quot;Yo! Anne&quot;]&lt;br /&gt;&lt;br /&gt;&amp;gt; (++) &amp;lt;$&amp;gt; [&quot;Hello &quot;, &quot;GoodBye &quot;, &quot;Yo! &quot;] &amp;lt;*&amp;gt; [&quot;John&quot;, &quot;Mary&quot;, &quot;Anne&quot;]&lt;br /&gt;[&quot;Hello John&quot;,&quot;Hello Mary&quot;,&quot;Hello Anne&quot;,&quot;Goodbye John&quot;,&quot;Goodbye Mary&quot;,&quot;Goodbye Anne&quot;,&quot;Yo! John&quot;,&quot;Yo! Mary&quot;,&quot;Yo! Anne&quot;]&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;You can see that when dealing with lists, the following is true:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;pure f &amp;lt;*&amp;gt; xs == fmap f xs&lt;/pre&gt;&lt;br /&gt;In this context, &quot;pure f&quot; is putting f into a list. &quot;[f] &amp;lt;*&amp;gt; xs&quot; just applies each function in the left list to the right.&lt;br /&gt;&lt;br /&gt;Another implementation of the Applicative Functor that doesn't follow the same notion of a List is its use with IO. The idea of the applicative functor still holds, but when dealing with IO its the actions that are operated on. This can be thought of in the same way as sequencing and mapping in one.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;ZipList&lt;/h3&gt;Another type that is an instance of&amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&amp;nbsp;is the &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html#v:ZipList&quot;&gt;ZipList&lt;/a&gt;. The&amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html#v:ZipList&quot;&gt;ZipList&lt;/a&gt;&amp;nbsp;type is defined as follows.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4591634.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;When we use applicative style on a normal list, we end up with a Cartesian product of the two lists involved. A&amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html#v:ZipList&quot;&gt;ZipList&lt;/a&gt;&amp;nbsp;differs here by operating on indicies in either list that are the same. Index [0] on the left gets applied to Index [0] on the right. Index [1] on the left gets applied to Index [1] on the right, and so on.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Applicative Functor Laws&lt;/h3&gt;&lt;div&gt;Finally, there are a few laws that applicative functors must abide by, they are as follows.&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;pre&gt;pure id &amp;lt;*&amp;gt; v = v&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;pre&gt;pure (.) &amp;lt;*&amp;gt; u &amp;lt;*&amp;gt; v &amp;lt;*&amp;gt; w = u &amp;lt;*&amp;gt; (v &amp;lt;*&amp;gt; w)&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;pre&gt;pure f &amp;lt;*&amp;gt; pure x = pure (f x)&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;pre&gt;u &amp;lt;*&amp;gt; pure y = pure ($ y) &amp;lt;*&amp;gt; u&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;Applying applicative functors for yourself&lt;/h3&gt;&lt;div&gt;This has been a very difficult topic that I've burnt some time on as late. There are plenty of examples of how this knowledge has been applied for a List or Maybe, but I've struggled to apply this to a type of my own. So far though, I've come across &lt;a href=&quot;http://en.wikibooks.org/wiki/Haskell/Applicative_Functors&quot;&gt;this article on Applicative Functors&lt;/a&gt; on the Hakell Wiki and most notably this sentence:&lt;/div&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;Anytime you feel the need to define different higher order functions to accommodate for function-arguments with a different number of arguments, think about how defining a proper instance of Applicative can make your life easier.&lt;/blockquote&gt;That to me makes sense. So, if you have a function that operates on a particular type and you'd like to apply that function to &quot;n&quot; arguments - you'd normally create an fmap clone that would cater for that many arguments. Using an applicative functor, the re-creation of the fmap instance goes away as your higher-order function can expect any number of arguments.&lt;br /&gt;&lt;br /&gt;Because of this, the following is true.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4601255.js&quot;&gt;&lt;/script&gt; That's it for today's post. I hope to update this post with some more examples and information as I discover it!&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Building a Tree</title>
   <link href="http://tuttlem.github.io/2013/01/21/building-a-tree/"/>
   <updated>2013-01-21T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/21/building-a-tree</id>
   <content type="html">&lt;h1&gt;Building a Tree&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Following up from a &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/basic-lexical-analysis-in-c.html&quot;&gt;previous post&lt;/a&gt;&amp;nbsp;I had written on lexical analysis, I wanted to take you through the conversion of a list of scanned items into a tree that will become of more use once we start to compile to executable instructions.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Why a tree?&lt;/h3&gt;&lt;div&gt;When you look at a sequence of scanned items that come out of the lexer, its one-dimensional structure doesn't allow you to apply precedence easily. A tree structure lends itself very well to this problem exactly. See the following example. First, I'll give you an expression and then I'll (try) to put a tree together from said expression.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;As an expression:&lt;br /&gt;(x &amp;gt; 5) &amp;amp;&amp;amp; ((y &amp;lt; 3) || (z &amp;gt;= 6))&lt;br /&gt;&lt;br /&gt;As a tree:&lt;br /&gt;&lt;br /&gt;                 &amp;amp;&amp;amp;&lt;br /&gt;               /    \&lt;br /&gt;             /        \&lt;br /&gt;            &amp;gt;         ||&lt;br /&gt;           / \       /  \&lt;br /&gt;          x   5     &amp;lt;    &amp;gt;=&lt;br /&gt;                   / \   / \&lt;br /&gt;                  y   3 z  6 &lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;I do appologise for my ASCII art, but you get the idea. We now have an order of&amp;nbsp;precedence&amp;nbsp;as we move from the root (or the top) of the tree down through the branches until we reach the leaf nodes which end up as our values that we're testing.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Making the list into a tree&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;We have a list of scanned items on one hand, we need to make it a tree. These (tree-related) problems lend themselves really well to recursive solutions, and you'll see this pop up quite a bit when working with tree structures. Here's how we define a node within the tree (which is actually how we'll refer to the tree overall).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4583311.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Pretty easy and illustrative of the tree above. We have information &quot;here&quot; and we have further trees &quot;left&quot; and &quot;right&quot;. The generation process is pretty straight forward. You need to keep in mind the following though:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;New scope (or a left paren) means we need to recurse a level deeper&lt;/li&gt;&lt;li&gt;End of scope (or a right paren) means we need to drop out to get back to a level above in the recursion stack&lt;/li&gt;&lt;li&gt;Any operator is just the value &quot;here&quot;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Three simple rules all wrapped up in the crux of a switch statement here.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4583314.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This code is commented fairly well. It's a pretty straight forward concept anyway. From here you should have no trouble translating the expression tree which we've just generated into your own programs execution paradigms.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;The source code that these articles are based upon is available in my &lt;a href=&quot;https://github.com/tuttlem/&quot;&gt;GitHub repository&lt;/a&gt; in a project called &lt;a href=&quot;https://github.com/tuttlem/Umpire&quot;&gt;Umpire&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Basic Lexical Analysis in C#</title>
   <link href="http://tuttlem.github.io/2013/01/21/basic-lexical-analysis-in-c/"/>
   <updated>2013-01-21T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/21/basic-lexical-analysis-in-c</id>
   <content type="html">&lt;h1&gt;Basic Lexical Analysis in C#&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Creating your own languages can be a fun challenge at times, it can also be a very intimidating beast if you don't break the problems down into small enough sub-problems. Each step of the compilation process is as important as the rest, so today's post is going to be about performing basic &lt;a href=&quot;http://en.wikipedia.org/wiki/Lexical_analysis&quot;&gt;Lexical Analysis&lt;/a&gt;&amp;nbsp;to tokenize your input.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Mission parameters&lt;/h3&gt;&lt;div&gt;We'll be designing a language that looks very similar to C-style boolean logic. It'll basically be an &quot;if-statement machine&quot; that we'll have in the end. The sorts of code strings that we'll look to analyse will be something like this.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;// numeric value comparison&lt;br /&gt;4 &amp;lt; 7&lt;br /&gt;&lt;br /&gt;// logic concatenation and scope&lt;br /&gt;(4 &amp;lt; 7) &amp;amp;&amp;amp; ((9 &amp;gt;= 7) || (10 != 2))&lt;br /&gt;&lt;br /&gt;// string matching&lt;br /&gt;&quot;Hello&quot; ~ &quot;Hello, World&quot;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;You can see how these will become quite complex quite quickly but that's not for us to worry about now. All we want to worry about is encountering items of interest in our strings and producing a list of tokens that we've found.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Scanning the string&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&quot;Things of interest&quot; is what I called it above. The things of interest are say, the numeric values or the strings or the logical operator or the expression operators. When we want to interpret strings, we call on our friend Mr. Regular Expression.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;First thing I've done is to load an array with regular expressions matching the &quot;things of interest&quot; and generating a token for each of these.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4581991.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For every regular expression, you can see that I've assigned a symbolic token. That way we can scan a string and get a &quot;hard-reference&quot; to something of interest that we need to do something with. Scanning a string is just iterating over the characters, finding a regular expression match and adding it to the list.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4582060.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;By this point, we're either handed back a list of &quot;ScanItem&quot; objects that describes for us what our code is and looks like or an exception is thrown complaining about syntax problems. We can further use this list to start building expression trees to execute.&lt;br /&gt;&lt;br /&gt;The code in the article is based on a project that I'm currently working on called Umpire. The source code can be found in my &lt;a href=&quot;https://github.com/tuttlem/Umpire/&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Migrating from bash to zsh on OSX</title>
   <link href="http://tuttlem.github.io/2013/01/19/migrating-from-bash-to-zsh-on-osx/"/>
   <updated>2013-01-19T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/19/migrating-from-bash-to-zsh-on-osx</id>
   <content type="html">&lt;h1&gt;Migrating from bash to zsh on OSX&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;There's plenty of shells around these days to try out and see what fits. I've forever used bash and have become quite accustomed to it in day to day usage. I've heard plenty of murmurs around the use of zsh and how all of my bash skills would translate directly but I would get some extra added benefits.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It's time for me to dive in!&amp;nbsp;This post is to take you through a migration process from bash to zsh. I expect that this post will grow over time.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Installation&lt;/h3&gt;&lt;div&gt;I'll assume that you're using &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;brew&lt;/a&gt;&amp;nbsp;in your installation of OSX just to lower the level of insanity of your life.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Type the following in your shell to get zsh installed.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ brew install zsh&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;br /&gt;Next, you'll need to register it as an acceptable shell for OSX to use, so to do this add a line referencing your newly installed zsh to your /etc/shells file. Here's how mine looks, my new entry was added to the bottom.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;# List of acceptable shells for chpass(1).&lt;br /&gt;# Ftpd will not allow users to connect who are not using&lt;br /&gt;# one of these shells.&lt;br /&gt;&lt;br /&gt;/bin/bash&lt;br /&gt;/bin/csh&lt;br /&gt;/bin/ksh&lt;br /&gt;/bin/sh&lt;br /&gt;/bin/tcsh&lt;br /&gt;/bin/zsh&lt;br /&gt;/usr/local/bin/zsh&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;When brew installed zsh for me, it also reported that there was some extra administration that needed to happen. It said:&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;If you have administrator privileges, you must fix an Apple missconfiguration in Mac OS X 10.7 Lion by renaming /etc/zshenv to/etc/zprofile, or Zsh will have the wrong PATH when executednon-interactively by scripts. &lt;br /&gt;&lt;br /&gt;Alternatively, install Zsh with /etc disabled: &lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;brew install --disable-etcdir zsh &lt;/blockquote&gt;So, I just renamed /etc/zshenv to /etc/zprofile with the following command to comply.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ sudo mv /etc/zshenv /etc/zprofile&lt;/pre&gt;&lt;br /&gt;Now you can register zsh as the default shell for OSX with the following command.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ chsh -s /usr/local/bin/zsh&lt;/pre&gt;&lt;br /&gt;Fantastic. Close your terminal and reopen a new one - you're now in zsh.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Kickstart&lt;/h3&gt;&lt;div&gt;To drop yourself &quot;right in it&quot;, head on over to the &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;oh-my-zsh&lt;/a&gt;&amp;nbsp;repository and get yourself some theming happening.&amp;nbsp;The installation instructions over there are very straight forward, and you'll go from % sign to something spectacular in no time at all.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Enable ATI Drivers in Debian x64</title>
   <link href="http://tuttlem.github.io/2013/01/19/enable-ati-drivers-in-debian-x64/"/>
   <updated>2013-01-19T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/19/enable-ati-drivers-in-debian-x64</id>
   <content type="html">&lt;h1&gt;Enable ATI Drivers in Debian x64&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;Today's post, I'll run through the procedures that I've just conducted to get AMD ATI drivers running on my T400 in Debian.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Doing easily with &quot;non-free&quot;&lt;/h3&gt;To save myself a few manual installation steps, I ended up just enabling non-free on my repositories. In order to do this, open up /etc/apt/sources.list and for your main repository line (which will look something similar to this)&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;deb http://http.us.debian.org/debian stable main contrib&lt;/pre&gt;&lt;br /&gt;Just add &quot;non-free&quot; into repositories that you need, like so.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;deb http://http.us.debian.org/debian stable main contrib non-free&lt;/pre&gt;&lt;br /&gt;After performing any changes to your sources list, it's always an idea to update your package lists with the following command.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ sudo aptitude update&lt;/pre&gt;&lt;br /&gt;&lt;h3&gt;Installing the driver&lt;/h3&gt;After you've enabled &quot;non-free&quot; on your repository, installation is a piece of cake. Remove the existing radeon driver from your system like so.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ sudo apt-get remove --purge xserver-xorg-video-radeon&lt;/pre&gt;&lt;br /&gt;Install the new drivers and associated utilities.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ sudo apt-get install fglrx-driver fglrx-control fglrx-glx fglrx-atieventsd fglrx-modules-dkms&lt;/pre&gt;&lt;br /&gt;Be sure to install 32-bit support for your 32-bit applications as well.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ sudo apt-get install fglrx-glx-ia32&lt;/pre&gt;&lt;br /&gt;&lt;h3&gt;Finishing up&lt;/h3&gt;A minor amount of housekeeping is required to enable the driver for use. First up, the module that we've just installed needs to be enabled at boot. To do this, I've added &quot;fglrx&quot; to my /etc/modules file. The /etc/modules file on my Debian laptop reads like this.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;# /etc/modules: kernel modules to load at boot time.&lt;br /&gt;#&lt;br /&gt;# This file contains the names of kernel modules that should be loaded&lt;br /&gt;# at boot time, one per line. Lines beginning with &quot;#&quot; are ignored.&lt;br /&gt;# Parameters can be specified after the module name.&lt;br /&gt;&lt;br /&gt;fglrx&lt;br /&gt;firewire-sbp2&lt;br /&gt;loop&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Finally, X needs to be to told that you want to use the fglrx driver. This is pretty simple, by setting your &quot;Driver&quot; to &quot;fglrx&quot; in your /etc/X11/xorg.conf. For reference, here is my config.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;Section &quot;ServerLayout&quot;&lt;br /&gt; Identifier     &quot;aticonfig Layout&quot;&lt;br /&gt; Screen      0  &quot;aticonfig-Screen[0]-0&quot; 0 0&lt;br /&gt;EndSection&lt;br /&gt;&lt;br /&gt;Section &quot;Module&quot;&lt;br /&gt;EndSection&lt;br /&gt;&lt;br /&gt;Section &quot;Monitor&quot;&lt;br /&gt; Identifier   &quot;aticonfig-Monitor[0]-0&quot;&lt;br /&gt; Option     &quot;VendorName&quot; &quot;ATI Proprietary Driver&quot;&lt;br /&gt; Option     &quot;ModelName&quot; &quot;Generic Autodetecting Monitor&quot;&lt;br /&gt; Option     &quot;DPMS&quot; &quot;true&quot;&lt;br /&gt;EndSection&lt;br /&gt;&lt;br /&gt;Section &quot;Device&quot;&lt;br /&gt; Identifier  &quot;aticonfig-Device[0]-0&quot;&lt;br /&gt; Driver      &quot;fglrx&quot;&lt;br /&gt; BusID       &quot;PCI:1:0:0&quot;&lt;br /&gt;EndSection&lt;br /&gt;&lt;br /&gt;Section &quot;Screen&quot;&lt;br /&gt; Identifier &quot;aticonfig-Screen[0]-0&quot;&lt;br /&gt; Device     &quot;aticonfig-Device[0]-0&quot;&lt;br /&gt; Monitor    &quot;aticonfig-Monitor[0]-0&quot;&lt;br /&gt; DefaultDepth     24&lt;br /&gt; SubSection &quot;Display&quot;&lt;br /&gt;  Viewport   0 0&lt;br /&gt;  Depth     24&lt;br /&gt; EndSubSection&lt;br /&gt;EndSection&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;You should have no problems wowing all your friends with crazy window composition now! &lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Functors in Haskell</title>
   <link href="http://tuttlem.github.io/2013/01/18/functors-in-haskell/"/>
   <updated>2013-01-18T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/18/functors-in-haskell</id>
   <content type="html">&lt;h1&gt;Functors in Haskell&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/derived-instances-for-types-in-haskell.html&quot;&gt;In a previous post&lt;/a&gt;, I had lightly grazed the surface of the topic of Functors in Haskell and I thought it was time to come back and be a little more comprehensive about it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Without further ado, let's talk about Functors.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What is a Functor?&lt;/h3&gt;&lt;div&gt;At the code level, a Functor is any type that is an instance of the &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:Functor&quot;&gt;Functor&lt;/a&gt; typeclass. At a concept level, a Functor is something that can be mapped over. As soon as anyone says something like this to me I immediately start thinking of any enumerated type (array, list, vector, etc) and this is right.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A&amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:Functor&quot;&gt;Functor&lt;/a&gt;&amp;nbsp;only needs to implement 1 function, &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:fmap&quot;&gt;fmap&lt;/a&gt;. How this looks in Haskell is as follows.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4564195.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Reading this gets to be a mouthful, but bear with me. This definition says: &quot;for my first parameter, I want a function that takes an &lt;b&gt;&lt;i&gt;a&lt;/i&gt;&lt;/b&gt; type and returns a &lt;b&gt;&lt;i&gt;b&lt;/i&gt;&lt;/b&gt;; for my second parameter, I want an &lt;b&gt;&lt;i&gt;a&lt;/i&gt;&lt;/b&gt; value wrapped by this functor and I will return you a &lt;b&gt;&lt;i&gt;b&lt;/i&gt;&lt;/b&gt; value wrapped by this functor&quot;.&lt;br /&gt;&lt;br /&gt;I've tried to place emphasis on a's and b's in that previous sentence, otherwise it reads like rather difficult english.&lt;br /&gt;&lt;br /&gt;Applying this knowledge to a living-breathing example, I'll show you the &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:Maybe&quot;&gt;Maybe&lt;/a&gt; type.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4564268.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;Looking at this we can see that when a &quot;Just&quot; value comes through, it's the value (wrapped in the Just) that has the function applied to it. When nothing comes through, we don't care for the function - we know that the return is going to be Nothing. The important thing to note here is that it's the value (wrapped in the Just) that's being operated on.&lt;br /&gt;&lt;br /&gt;Seeing this in action always helps an explanation.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;ghci&amp;gt; fmap (replicate 3) (Just 4)&lt;br /&gt;Just [4, 4, 4]&lt;/pre&gt;&lt;br /&gt;The way that I read this is: &quot;A function&quot; &lt;b&gt;(fmap)&lt;/b&gt;&amp;nbsp;&quot;that takes a function&quot; &lt;b&gt;(replicate 3)&lt;/b&gt;&amp;nbsp;&quot;and a functor value&quot; &lt;b&gt;(Just 4)&lt;/b&gt;&amp;nbsp;&quot;that then maps that function&quot; &lt;b&gt;(replicate 3)&lt;/b&gt;&amp;nbsp;&quot;over the inner value&quot; &lt;b&gt;(4)&lt;/b&gt;&amp;nbsp;&quot;which gets wrapped up in the functor&quot; &lt;b&gt;(Just)&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;This is the best way that I could think of to structure this sentence. It makes sense to me, I hope it helps you also. Again, the important thing to remember is that it's the inner-value that's getting processed which is why we ended up with &lt;i&gt;Just [4, 4, 4]&lt;/i&gt;&amp;nbsp;rather than &lt;i&gt;[Just 4, Just 4, Just 4]&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;Finally, when you're implementing functors of your own there are laws that must be met.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Law #1&lt;/b&gt;: Mapping the &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:id&quot;&gt;id&lt;/a&gt;&amp;nbsp;function over any functor value should produce the functor value that we supplied. Meaning:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;fmap id = id&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;Law #2&lt;/b&gt;: Mapping two composed functions over a functor value should be the same as functionally composing those two functions. Meaning:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;fmap (f . g) = fmap f . fmap g&lt;/pre&gt;&lt;br /&gt;This second law makes sense once you think about performing fmap over a function, as it's just the same as function composition.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;fmap (*15) (-2) == (*15) . (-2)&lt;/pre&gt;&lt;br /&gt;This post should arm you sufficiently to start inflicting your own Functors on the world.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Uniform Initialization with C++11</title>
   <link href="http://tuttlem.github.io/2013/01/17/uniform-initialization-with-c-11/"/>
   <updated>2013-01-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/17/uniform-initialization-with-c-11</id>
   <content type="html">&lt;h1&gt;Uniform Initialization with C++11&lt;/h1&gt;
&lt;div class='post'&gt;
Initialization of variables types has received a face lift with the new version of the C++ standard. Previously trying to initialize a populated list was impossible and you were left writing helper functions to transform array values into other container types, or worse you'd end up with code that looked like this.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4551170.js&quot;&gt;&lt;/script&gt; C++11 includes a feature called &quot;Uniform Initialization&quot; which aims to solve this problem. The above code now turns into this.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4551177.js&quot;&gt;&lt;/script&gt; Much better. This isn't where the&amp;nbsp;convenience&amp;nbsp;ends though. Take the following example. Because the &quot;person&quot; class defines a constructor taking in first_name, last_name and age we are able to use uniform initialization to setup these variables.&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4551245.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;The same syntax works with any of the enumerated containers. Using the person class from above, we can make a map of employee records by doing the following.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4551296.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;You can see how this syntax makes the initialization process a much more pleasant experience in C++ now. That's all for this one.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Rvalue references in C++11</title>
   <link href="http://tuttlem.github.io/2013/01/17/rvalue-references-in-c-11/"/>
   <updated>2013-01-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/17/rvalue-references-in-c-11</id>
   <content type="html">&lt;h1&gt;Rvalue references in C++11&lt;/h1&gt;
&lt;div class='post'&gt;
This is the biggest change (shift anyway) in C++'s thinking with the new standard. This preview of Rvalue references probably isn't pitched at the novice and a bit of prior knowledge is assumed. You'll want to know the differences between an &lt;a href=&quot;http://publib.boulder.ibm.com/infocenter/comphelp/v7v91/index.jsp?topic=%2Fcom.ibm.vacpp7a.doc%2Flanguage%2Fref%2Fclrc05lvalue.htm&quot;&gt;Lvalue and an Rvalue&lt;/a&gt;, you'll also want to understand how &lt;a href=&quot;http://publib.boulder.ibm.com/infocenter/lnxpcomp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8l.doc%2Flanguage%2Fref%2Fcplr382.htm&quot;&gt;temporary objects work&lt;/a&gt;&amp;nbsp;but most importantly why they're evil in some scenarios.&lt;br /&gt;&lt;br /&gt;With all of that information under our belt, I can see that the Rvalue reference came to fruition to resolve the copy problem. Returning a temporary object from a function that you'd use in your program would cause an expensive copy operation, now this is is resolved with move semantics.&lt;br /&gt;&lt;br /&gt;Rather than that expensive copy operation, the value that's returned is pilfered to the calling code and the temporary object is left empty, ergo a move occurs.&lt;br /&gt;&lt;br /&gt;An Rvalue reference is defined in code like so.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4555645.js&quot;&gt;&lt;/script&gt; The double ampersand (&amp;amp;&amp;amp;) tells us that it's an Rvalue reference. We can give our own classes the ability to &quot;move&quot; a value by introducing a move constructor and operator like so.&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4555709.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;The STL containers have all been optimised to use move syntax, so you'll pick up this copy-free functionality on the way.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>nullptr in C++11</title>
   <link href="http://tuttlem.github.io/2013/01/17/nullptr-in-c-11/"/>
   <updated>2013-01-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/17/nullptr-in-c-11</id>
   <content type="html">&lt;h1&gt;nullptr in C++11&lt;/h1&gt;
&lt;div class='post'&gt;
It happened! It finally happened! &quot;NULL&quot; has a real identity within the language. Forever I'd used the notion of NULL in my C &amp;amp; C++ to really mean &quot;0&quot; (zero) under the covers.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4552930.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Of course, I'd never defined it myself. It was always done for me in one of the many include files drawn into my program. One of the problems with this particular define is for overloaded methods. If you were to pass &quot;NULL&quot; in its defined state above, you'd be guessing as to which overload is called.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4552962.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Well, now we have &quot;nullptr&quot; in C++11. &quot;nullptr&quot; is castable to any pointer type.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4552990.js&quot;&gt;&lt;/script&gt; The castability also covers off on boolean expressions, so the following if-trees will still work.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4552999.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Finally, &quot;nullptr&quot; is of type &quot;nullptr_t&quot;. If you're going to find it of use to you to guarantee that a null pointer is going to be passed into a method, you could type your method using the type &quot;nullptr_t&quot;.&lt;br /&gt;&lt;br /&gt;Null now has a home.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Initial investigations of C++11</title>
   <link href="http://tuttlem.github.io/2013/01/17/initial-investigations-of-c-11/"/>
   <updated>2013-01-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/17/initial-investigations-of-c-11</id>
   <content type="html">&lt;h1&gt;Initial investigations of C++11&lt;/h1&gt;
&lt;div class='post'&gt;
I've written a lot of C and C++ code in my time but I have slipped as of late on keeping up with the published standards. Trying to remain abreast of too many things at once confuses me!&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So, today's post I'll just be linking to all of the features that I've blogged about so far with C++11 that I hope should also give you a sniff to what's inside.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/lambda-expressions-with-c11.html&quot;&gt;Lambda Expressions in C++11&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/auto-and-decltype-in-c11.html&quot;&gt;auto and decltype in C++11&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/defaulted-and-deleted-functions-in-c11.html&quot;&gt;Defaulted and Deleted functions in C++11&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/uniform-initialization-with-c11.html&quot;&gt;Uniform Initialization in C++11&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/enum-classes-in-c11.html&quot;&gt;Enum Classes in C++11&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/nullptr-in-c11.html&quot;&gt;nullptr in C++11&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/delegating-constructors-in-c11.html&quot;&gt;Delegating Constructors in C++11&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/rvalue-references-in-c11.html&quot;&gt;Rvalue references in C++11&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Enum Classes in C++11</title>
   <link href="http://tuttlem.github.io/2013/01/17/enum-classes-in-c-11/"/>
   <updated>2013-01-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/17/enum-classes-in-c-11</id>
   <content type="html">&lt;h1&gt;Enum Classes in C++11&lt;/h1&gt;
&lt;div class='post'&gt;
Enums in C/C++ have traditionally just been a pretty face for an integer value. That hasn't changed so much, but a new breed of enumeration has been added with C++11: enter the enum class.&lt;br /&gt;&lt;br /&gt;Enum classes have been introduced as a &quot;strongly typed&quot; enum. This gives you type safety in your enums so that you don't perform comparisons between enum types and if you do you'll need to explicitly define how the two should be compared.&lt;br /&gt;&lt;br /&gt;The other major benefit is improved scoping. Enum class values must always mention the enumeration that they belong to in order to be used.&lt;br /&gt;&lt;br /&gt;Here's an example of an enum class.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4551444.js&quot;&gt;&lt;/script&gt; Immediately the only difference that you'll see here is the addition of the word &quot;class&quot;. You can still&amp;nbsp;explicitly&amp;nbsp;type and value your enumerations. Here's the same example above only written more verbosely.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4551454.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;An example usage of these enum classes goes as follows.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4551472.js&quot;&gt;&lt;/script&gt; Well, there you have it. A brief tour of enum classes in C++11.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Delegating Constructors in C++11</title>
   <link href="http://tuttlem.github.io/2013/01/17/delegating-constructors-in-c-11/"/>
   <updated>2013-01-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/17/delegating-constructors-in-c-11</id>
   <content type="html">&lt;h1&gt;Delegating Constructors in C++11&lt;/h1&gt;
&lt;div class='post'&gt;
One of the annoyances I've always had with C++ was its lack of elegant handling of constructors. You'd always be forced to swallow the bitter pill of an initializer function that each of your constructors would call.&lt;br /&gt;&lt;br /&gt;It always felt clunky to me. With C++11 introducing Delegating Constructors, this has all gone now.&lt;br /&gt;&lt;br /&gt;Take this simple person class, for example. No magic going on here, just a straight forward class and is how we'd implement multiple constructors without the use of an initialiser.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4555283.js&quot;&gt;&lt;/script&gt; Here we have a &quot;person&quot; class with three constructors all providing their own implementation of how a person object should initialized. This just isn't nice for a couple of reasons. The first is violation of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Don't_repeat_yourself&quot;&gt;DRY&lt;/a&gt;&amp;nbsp;principle, we're repeating ourselves the whole time which goes hand in hand with the second - each constructor initializes the object in its own way.&lt;br /&gt;&lt;br /&gt;So, the previous answer to this problem was to implement an initializer function which did this work for us.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4555304.js&quot;&gt;&lt;/script&gt; This is better. We've got one way to initialize our class, we're not repeating ourselves. Life is good.&lt;br /&gt;&lt;br /&gt;But now (in C++11), there's a better way. Here I'll show you how to re-implement this class using delegating constructors for the most elegant of solutions.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4555333.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;We've got our most general case constructor (in this case the construct taking in all three names) actually doing the work. The remaining two constructors then just leverage off the functionality defined in the general case. No re-implementation, no initialization function needed.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Getting C++11 support in Debian</title>
   <link href="http://tuttlem.github.io/2013/01/16/getting-c-11-support-in-debian/"/>
   <updated>2013-01-16T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/16/getting-c-11-support-in-debian</id>
   <content type="html">&lt;h1&gt;Getting C++11 support in Debian&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;The repository for the current stable version of Debian (squeeze) doesn't include a compiler with C++11 support. Today's post will take you through adding a testing repository so that you can get a compiler with this support in it.&lt;br /&gt;&lt;br /&gt;We needed to do &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/12/installing-haskell-platform-on-debian.html&quot;&gt;something similar&lt;/a&gt;&amp;nbsp;in a previous post when we were upgrading haskell platform for Debian. This won't stray to far from that.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;The Steps&lt;/h3&gt;&lt;div&gt;First up, we need to enable the testing repository. Adding the following lines to /etc/apt/sources.list will do this for us.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre&gt;deb http://mirror.to.debian.repo/debian/ wheezy main    &lt;br /&gt;deb-src http://mirror.to.debian.repo/debian/ wheezy main&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Next, we'll add an entry into the /etc/apt/preferences file to give preference to the &quot;squeeze&quot; (stable) repository over &quot;wheezy&quot; (testing) by adding these lines.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;Package: *            &lt;br /&gt;Pin: release n=squeeze&lt;br /&gt;Pin-Priority: 900     &lt;br /&gt;                      &lt;br /&gt;Package: *            &lt;br /&gt;Pin: release n=wheezy &lt;br /&gt;Pin-Priority: 200&lt;/pre&gt;&lt;br /&gt;Finally, you'll be able to install clang with the following command. Take note that we're giving the install command the switches &quot;--target-release testing&quot;, which tells aptitude to install this unit of software and its dependencies from the testing repository.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;$ sudo aptitude update &amp;amp;&amp;amp; sudo aptitude upgrade&lt;br /&gt;$ sudo aptitude --target-release testing install clang&lt;/pre&gt;&lt;br /&gt;You're done. C++11 support on your Debian box.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Defaulted and Deleted Functions in C++11</title>
   <link href="http://tuttlem.github.io/2013/01/16/defaulted-and-deleted-functions-in-c-11/"/>
   <updated>2013-01-16T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/16/defaulted-and-deleted-functions-in-c-11</id>
   <content type="html">&lt;h1&gt;Defaulted and Deleted Functions in C++11&lt;/h1&gt;
&lt;div class='post'&gt;
A default (and more efficient) implementation can be given to your functions using the &quot;default&quot; keyword. This is the usage of a defaulted function in C++11.&amp;nbsp;In this example, my &quot;person&quot; class has no written implementation for its constructor or destructor.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4543939.js&quot;&gt;&lt;/script&gt; The opposite to a defaulted function is a deleted function. The deleted function allows you to remove the implementation of a function by specifying the &quot;delete&quot; keyword. In C++ this is useful to us if we want to remove the copy constructor from classes that C++ so nicely provides for us. In this example, you can see that we've shut down the copy constructor as well as the assignment operator so that copying will no longer be supported.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4543965.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;That's it for these two features. Simple, but effective.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>auto and decltype in C++11</title>
   <link href="http://tuttlem.github.io/2013/01/16/auto-and-decltype-in-c-11/"/>
   <updated>2013-01-16T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/16/auto-and-decltype-in-c-11</id>
   <content type="html">&lt;h1&gt;auto and decltype in C++11&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Type brevity has never been C++'s strong suit, especially when you start dealing with template classes. It's just a mess! One of the nifty features that comes along with the C++11 standard is the ability to not need to specify the type. This leaves it as the job for the compiler to complete.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This will only be a short post on auto and decltype's usage.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Usage&lt;/h3&gt;&lt;div&gt;To use the &quot;auto&quot; keyword, just declare your variables as &quot;auto&quot;. Here are some variables for some simple data types/&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4542642.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;One of the problems I've always had, iterating over STL containers is how verbose the type becomes when you declare your iterator. You can use the &quot;auto&quot; keyword here to simplify this greatly now.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4542661.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;That is an improvement out of sight!&lt;br /&gt;&lt;br /&gt;decltype operates along the same paradigm but instead of operating on a variable's type, it will take the type of an expression's result and allow you to bind a name to it.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4542697.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Using &quot;auto&quot; throughout your code guarantees you that there won't be any conversions going on to that variable. This in itself is a few layers of performance sapping translation gone! Just the cleanliness of the code is worth its weight in gold!&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Viewing RDoc Sets</title>
   <link href="http://tuttlem.github.io/2013/01/15/viewing-rdoc-sets/"/>
   <updated>2013-01-15T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/15/viewing-rdoc-sets</id>
   <content type="html">&lt;h1&gt;Viewing RDoc Sets&lt;/h1&gt;
&lt;div class='post'&gt;
You can start an internal web server that will serve all of your installed gemsets' documentation simply by issuing the following command at the console.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ gem server&lt;br /&gt;Server started at http://0.0.0.0:8808&lt;/pre&gt;&lt;br /&gt;Point your web browers to the machine on port 8808 and you're away!&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Using cabal-dev to keep a tidy house</title>
   <link href="http://tuttlem.github.io/2013/01/15/using-cabal-dev-to-keep-a-tidy-house/"/>
   <updated>2013-01-15T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/15/using-cabal-dev-to-keep-a-tidy-house</id>
   <content type="html">&lt;h1&gt;Using cabal-dev to keep a tidy house&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;I've fallen into the trap (not just with Haskell) on many occasions. You install that one library dependency that ends up mowing over every other working application's dependencies and then BOOM... you've just lost most of your hair.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://hackage.haskell.org/package/cabal-dev&quot;&gt;cabal-dev&lt;/a&gt;&amp;nbsp;gives Haskell developers the luxury of sandboxed development allowing them isolation between library versions installed.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I don't know why I haven't written about this sooner, but here's a short guide to using cabal-dev.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Quick usage&lt;/h3&gt;&lt;div&gt;Starting a new application with cabal&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ mkdir myapp&lt;br /&gt;$ cd myapp&lt;br /&gt;$ touch LICENSE&lt;br /&gt;$ cabal init  &lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Compiling and installing your application&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ cabal-dev install&lt;/pre&gt;&lt;br /&gt;Installing libraries&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ cabal-dev install package-name&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Lambda Expressions with C++11</title>
   <link href="http://tuttlem.github.io/2013/01/15/lambda-expressions-with-c-11/"/>
   <updated>2013-01-15T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/15/lambda-expressions-with-c-11</id>
   <content type="html">&lt;h1&gt;Lambda Expressions with C++11&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;A whole raft of goodness has been delivered with the most recent C++ standard, &lt;a href=&quot;http://en.wikipedia.org/wiki/C%2B%2B11&quot;&gt;C++11&lt;/a&gt;. One of these features is the inclusion of lambda expressions. Today's post will take you through the basic syntax for lambdas in C++.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Basic Assignment&lt;/h3&gt;&lt;div&gt;You can assign a lambda to a variable quite simply with the following syntax.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4538150.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;I agree that this is a pretty ass-about-face way of printing &quot;Hello, World&quot; to the screen - but it's done through C++11's lambda syntax.&lt;br /&gt;&lt;br /&gt;Passing variables into a lambda expression and getting return values is quite trivial also.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4538172.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;You can nest lambdas pretty easily also. Heres is a multiply-then-divide example where the division operation is the nested operation. Multiplication occurs at the top-level lambda.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4538211.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;This syntax also allows you to define higher-order functions, so that you can return function object back to the caller for later use. Here, I've made a multiplier factory. You give it one side of the multiplication and it'll hand you back a function that will multiply by that number.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4538232.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;We've done something a little bit different here. You can see that we've used a term inside the square brackets for the returned function. C++ having a major focus on performance gives the developer as much flexibility as possible when handling values. The information specified within the square braces tells the lambda closure how to handle variables referenced within.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Handling outside state within a lambda&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The developer describes to the lambda how she wants variables captured by making specifications within the square brackets. Some examples of what you might see look like this.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Specification&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Meaning&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;[]&lt;/td&gt;&lt;td&gt;Don't capture anything&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;[&amp;amp;]&lt;/td&gt;&lt;td&gt;Capture any variable by reference&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;[=]&lt;/td&gt;&lt;td&gt;Capture any variable used making a copy of it&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;[=, &amp;amp;x]&lt;/td&gt;&lt;td&gt;Capture any variable used making a copy of it except for x. Capture x by reference.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;[y]&lt;/td&gt;&lt;td&gt;Capture y by making a copy but nothing else.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;[this]&lt;/td&gt;&lt;td&gt;Capture the enclosing class' pointer&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So, we can be quite specific in telling the compiler how we want referenced variables handled within our lambda closure.&lt;br /&gt;&lt;br /&gt;Finally, I want to present some code on using lambdas with existing constructs. In this example, I'll reduce a list of integers by accumulating them into a variable referenced outside of a closure.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4538430.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;You can see that is is quite a fluent style for writing lambdas.&lt;br /&gt;&lt;br /&gt;This post only scratches the surface. Applying these in a real project is going to be key to discovering the depths of lambdas, but they're alive and well in C++(11) land, that's for sure.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;div class='comment'&gt;
&lt;div class='author'&gt;nick black&lt;/div&gt;
&lt;div class='content'&gt;
Great post, thanks! I think there might have been more difference between C++11 and C++03 than there was C++03 and C99.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Haskell Setup on OSX</title>
   <link href="http://tuttlem.github.io/2013/01/15/haskell-setup-on-osx/"/>
   <updated>2013-01-15T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/15/haskell-setup-on-osx</id>
   <content type="html">&lt;h1&gt;Haskell Setup on OSX&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Just a quick post to note down the steps that I follow to setup my Haskell development environment. A lot of this has been lifted from this article &lt;a href=&quot;http://bob.ippoli.to/archives/2013/01/11/getting-started-with-haskell/&quot;&gt;here&lt;/a&gt;, which is a great &quot;getting started&quot; style article - certainly worth the read.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This setup is for OSX. Homebrew is used to perform software installations.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Guide&lt;/h3&gt;&lt;div&gt;Step 1. Install haskell-platform with brew&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ brew install haskell-platform&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Step 2. Ensure that ~/.cabal/bin takes priority in your PATH variable by adding the following into your ~/.bashrc file.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;export PATH=/home/user/.cabal/bin:$PATH&lt;/pre&gt;&lt;br /&gt;Step 3. Update cabal&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ cabal update&lt;/pre&gt;&lt;br /&gt;Step 4. Turn on library profiling using the following command&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ for f in ~/.cabal/config; do \&lt;br /&gt;    cp $f $f.old &amp;amp;&amp;amp; \&lt;br /&gt;    sed -E 's/(-- )?(library-profiling: )False/\2True/' &amp;lt; $f.old &amp;gt; $f; \&lt;br /&gt;done&lt;/pre&gt;&lt;br /&gt;Step 5. Install cabal-install&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ cabal install cabal-install&lt;/pre&gt;&lt;br /&gt;Step 6. Install cabal-dev (from source)&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ git clone https://github.com/creswick/cabal-dev.git /tmp/cabal-dev-src &amp;amp;&amp;amp; \&lt;br /&gt;    (cd /tmp/cabal-dev-src; cabal install) &amp;amp;&amp;amp; \&lt;br /&gt;    rm -rf /tmp/cabal-dev-src&lt;/pre&gt;&lt;br /&gt;Step 7. Setup GHCi so it has a sane prompt&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ echo ':set prompt &quot;λ&amp;gt; &quot;' &amp;gt;&amp;gt; ~/.ghci&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;That's it. Development environment is ready to go.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>C++ References</title>
   <link href="http://tuttlem.github.io/2013/01/15/c-references/"/>
   <updated>2013-01-15T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/15/c-references</id>
   <content type="html">&lt;h1&gt;C++ References&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;I've always thought of a reference as the half-way house between pointers and statically allocated objects. References are in-fact addresses but they are used within our code just like objects as opposed to requiring pointer syntax.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Some facts ..&lt;/h3&gt;&lt;div&gt;&lt;b&gt;How reference are defined&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;You declare a reference variable using the ampersand (&amp;amp;) to modify the type declaration.&lt;/div&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;type&amp;amp; var;&amp;nbsp;&lt;/span&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;b&gt;A reference must be&amp;nbsp;initialised&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This is pretty basic, it just means that when you declare your reference it must start out with a place to reference.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4537852.js&quot;&gt;&lt;/script&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;A reference cannot be changed&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;When we initialise a reference to point to a variable, that's it. We can't change what the reference points to. This caught be out to begin with, but it's pretty easy stuff.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4537892.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Makes sense. Gives references a sense of stubbornness (and sanity).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Pointer&amp;nbsp;compatibility&amp;nbsp;through dereferencing&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;I see a fair bit of banter on &quot;how to convert pointer to reference&quot;, etc. It's really quite simple and it's also &amp;nbsp;subject to the same assignment laws as above.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4537933.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;These concepts really come into their own (I think) once you start using them within your own class structures. It's a much more natural feel to deal with references rather than pointers and a bit easier to read as well.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>GLFW-b from Haskell</title>
   <link href="http://tuttlem.github.io/2013/01/14/glfw-b-from-haskell/"/>
   <updated>2013-01-14T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/14/glfw-b-from-haskell</id>
   <content type="html">&lt;h1&gt;GLFW-b from Haskell&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;I've previously posted about getting up and running with OpenGL from Haskell &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/opengl-glut-haskell.html&quot;&gt;here&lt;/a&gt;, but I've since learned of &lt;a href=&quot;http://www.glfw.org/&quot;&gt;GLFW&lt;/a&gt;&amp;nbsp;and some of its bindings into Haskell in the form of &lt;a href=&quot;http://hackage.haskell.org/package/GLFW&quot;&gt;glfw&lt;/a&gt;&amp;nbsp;and &lt;a href=&quot;http://hackage.haskell.org/package/GLFW-b&quot;&gt;glfw-b&lt;/a&gt;. The posts that I have been reading seem to present glfw-b with a more Haskell-style interface so this is the binding choice that I've decided to go with.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Today, I'll walk you through a very simple application that will present you with a 2D drawing surface ready to go. It will demonstrate how to respond to window resize events, key input, GL setup and teardown.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;There is some great resources around for these bindings. The &lt;a href=&quot;http://www.haskell.org/haskellwiki/GLFW&quot;&gt;Haskell Wiki&lt;/a&gt; has an article on GLFW with a link to some GLFW-b ports of the &lt;a href=&quot;http://nehe.gamedev.net/&quot;&gt;nehe tutorials&lt;/a&gt; &lt;a href=&quot;http://hackage.haskell.org/package/nehe-tuts&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The code for this is available in my &lt;a href=&quot;https://github.com/tuttlem/haskets&quot;&gt;haskets&lt;/a&gt; repository. Here's the &lt;a href=&quot;https://raw.github.com/tuttlem/haskets/master/glfw/First.hs&quot;&gt;direct link&lt;/a&gt; to the file we'll be analysing.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-aPw7-CRRMjw/UPPCxR9z0dI/AAAAAAAAAk4/J2ZUX2_6jHc/s1600/Screen+Shot+2013-01-14+at+6.32.45+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;326&quot; src=&quot;http://1.bp.blogspot.com/-aPw7-CRRMjw/UPPCxR9z0dI/AAAAAAAAAk4/J2ZUX2_6jHc/s400/Screen+Shot+2013-01-14+at+6.32.45+PM.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;The code&lt;/h3&gt;&lt;div&gt;First off, we'll take a look at what's being imported into this application.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4528618.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;The GLFW bindings come into the program on the first line. This really is the bridge between OpenGL and your presentation layer to get a window running and some sort of eventing communication being routed into your program.&lt;br /&gt;&lt;br /&gt;OpenGL and GLU raw are just as they say. You'll see code in this tutorial that looks directly from these APIs. The names aren't lying.&lt;br /&gt;&lt;br /&gt;Finally here we just have some program management handling exit codes and execution life.&lt;br /&gt;&lt;br /&gt;After we've imported everything that we need, it's time to setup the GL scene as if all of the window management stuff has already been done.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4529208.js&quot;&gt;&lt;/script&gt; These are all looking like very natural GL calls. The code commentary should guide you through what's happening here.&lt;br /&gt;&lt;br /&gt;When the window that's hosting our application changes dimensions, our program will be sent a message updating us on what the new dimensions are. Here's how we adapt to these changes in 2D.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4529230.js&quot;&gt;&lt;/script&gt; These are all standard OpenGL calls also. The signature of the resize function delivers us the updated width and height to use.&lt;br /&gt;&lt;br /&gt;Drawing our scene is extremely basic. We're clearing the screen (to black, as above). That's it.&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4529240.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;'nuff said. To destroy all of the resources we've utilised in the target windowing system we issue some teardown functions.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4529256.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Handling keyboard input is just a matter of using KeyCallback.&lt;br /&gt;&lt;br /&gt;The teardown handler is entered when the escape key is hit. Any other key is ignored.&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4529268.js&quot;&gt;&lt;/script&gt; All of these function definitions are really no good to us unless we can bind them into the framework. This will bring all of these functions to life. The next block of code is the main program for the application. It'll be heavily commented.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4529317.js&quot;&gt;&lt;/script&gt; So, that's it for GLFW-b for Haskell. Not so intimidating and actually quite inviting to develop against!&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Writing a Window Manager for X11</title>
   <link href="http://tuttlem.github.io/2013/01/12/writing-a-window-manager-for-x11/"/>
   <updated>2013-01-12T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/12/writing-a-window-manager-for-x11</id>
   <content type="html">&lt;h1&gt;Writing a Window Manager for X11&lt;/h1&gt;
&lt;div class='post'&gt;
As a bit of a bookmark to myself, I just wanted to post about writing a window manager for X windows. A lot of the material that I've seen around the place in articles and posts themselves have all pointed me towards downloading the out-of-print &lt;a href=&quot;http://oreilly.com/openbook/&quot;&gt;O'Reilly Open Book&lt;/a&gt; site.&lt;br /&gt;&lt;br /&gt;Some of the books of interest to a window manager programmer are&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.archive.org/details/xlibretmanver1102nyemiss&quot;&gt;Xlib Reference Manual&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.archive.org/details/xlibrefmanv115ed02nyemiss&quot;&gt;Xlib Reference Manual Volume 2&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.archive.org/details/xtoolkitintrinsi04nyemiss&quot;&gt;X Toolkit Intrinsics Programming Manual&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.archive.org/details/xtoolkitintrirefman05oreimiss&quot;&gt;X Toolkit Intrinsics Reference Manual&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;I'm sure that there is plenty of other reference material around, but a lot of people were suggesting to put a copy of these in your claw - so I have.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Digging around a little bit more, I came across &lt;a href=&quot;http://incise.org/tinywm.html&quot;&gt;TinyWM&lt;/a&gt;.&amp;nbsp;&lt;a href=&quot;http://incise.org/tinywm.html&quot;&gt;TinyWM&lt;/a&gt;&amp;nbsp;looks like a suitable candidate to be the bootstrap to a window manager project. It's functional, it doesn't do much but it is around 50 lines of C code. I'll be using this as my guide for when that rainy day comes and I start work on my own WM.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Clojure S Spine Java</title>
   <link href="http://tuttlem.github.io/2013/01/12/clojure-s-spine-java/"/>
   <updated>2013-01-12T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/12/clojure-s-spine-java</id>
   <content type="html">&lt;h1&gt;Clojure S Spine Java&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;One of Clojure's greatest strengths is the fact that it sits on the JVM. This puts all of those jars that people have worked tirelessly over the years to produce right at your fingertips ready for use in your Clojure code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Today's post will just be a short tutorial on some of the most basic routines to use Java classes in your Clojure code. All of the examples that I'll produce are all based on the &lt;a href=&quot;http://clojure.org/java_interop&quot;&gt;Java_interop page&lt;/a&gt; on the Clojure site.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Importing classes&lt;/h3&gt;&lt;div&gt;First things first. You'll need to import the classes that you want to use. You don't have to, it just makes your code a little less verbose later on.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4515624.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;We're now able to use the URL class in our code.&lt;br /&gt;&lt;br /&gt;If you're importing classes into your programs that aren't local and need to be downloaded as a dependency, I suggest you use &lt;a href=&quot;http://leiningen.org/&quot;&gt;Leiningen&lt;/a&gt;&amp;nbsp;to do all the heavy lifting for you there. You'd just need to list your external package in the dependencies list in your project file and away you go.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Using the classes&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;We need to construct some objects so that we'll be able to call methods on them, so following on from the example, we construct instances of the classes that we import like so.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4515648.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This is really getting the Java mojo mixed in with Clojure now. So &quot;google&quot; is our constructed object, we can start to call methods on this variable like so.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4515663.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;We were able to find out the protocol of the URL using &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/net/URL.html#getProtocol()&quot;&gt;getProtocol&lt;/a&gt;&amp;nbsp;and we were able to compare &quot;google&quot; and &quot;yahoo&quot; using &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/net/URL.html#sameFile(java.net.URL)&quot;&gt;sameFile&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;doto&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The last thing I want to talk about is &lt;a href=&quot;http://clojuredocs.org/clojure_core/1.2.0/clojure.core/doto&quot;&gt;doto&lt;/a&gt;. doto evaluates its first parameter than allows you to chain a series of calls (just as you would in Java using the &quot;.&quot; operator) together. Here's a an example using a &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/HashMap.html&quot;&gt;HashMap&lt;/a&gt; class and chaining a few put's together. This statement will return the built &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/HashMap.html&quot;&gt;HashMap&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4515694.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Well, that's it for today. I'm off to write some Java .. I mean, Clojure, I mean ... you know what I mean.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Tic Tac Toe in Haskell</title>
   <link href="http://tuttlem.github.io/2013/01/11/tic-tac-toe-in-haskell/"/>
   <updated>2013-01-11T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/11/tic-tac-toe-in-haskell</id>
   <content type="html">&lt;h1&gt;Tic Tac Toe in Haskell&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Still trying to flex my skills in the Haskell arena and am still chasing a real project to do. Until I find said project, silly little games it is. A little while ago I watched the Haskell Live videos and in these videos&amp;nbsp;a good start is made on a chess framework. Very interesting stuff to see how something like this is put together and if you haven't seen them, I suggest you go and check out &lt;a href=&quot;http://www.youtube.com/watch?v=ScS8Q32lMxA&quot;&gt;episode 1&lt;/a&gt;&amp;nbsp;and &lt;a href=&quot;http://www.youtube.com/watch?v=6KkF5-_erns&quot;&gt;episode 2&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Anyway, the videos don't yet take you through to a completed implementation and while I'd love to say that I possess the skills to take the chess game through, I'd be punching above my weight. In compromise, I've been able to use some of the concepts that Rein has demonstrated in his videos - in my own implementation of Tic Tac Toe.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Today's post will take you through my implementation. The full source for this program can be found in my &lt;a href=&quot;https://github.com/tuttlem/haskets/&quot;&gt;haskets&lt;/a&gt; git repository. The specific file is &lt;a href=&quot;https://raw.github.com/tuttlem/haskets/master/TicTacToe.hs&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Functional Specification&lt;/h3&gt;Well, if you're really wanting the functional in's-and-out's of the game Tic-tac-toe, I suggest you step our of your bubble and read &lt;a href=&quot;http://en.wikipedia.org/wiki/Tic-tac-toe&quot;&gt;this&lt;/a&gt;. This implementation will involve two rather random computer players battling it out, so no user interactivity (yet).&lt;br /&gt;&lt;br /&gt;Well, thanks to a cheeky link to a wikipedia article, that's the smallest functional specification I've ever seen. On to the code.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Pieces&lt;/h3&gt;&lt;div&gt;First up, we'll deal with pieces. To this program, a piece can be a Naught or a Cross. When the piece is a Naught, we want to represent it with a 'o', when the piece is a Cross, we want to represent it with an 'x'. Here's the type declaration and functions we'll use to work with pieces.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4508753.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;A piece can only be either a Naught or a Cross, nothing else. The functions are all very straight forward and meeting the requirements of our specification. Naughts will look like &quot;o's&quot; and Crosses will look like &quot;x's&quot;. Just to be sure, we can setup a couple of QuickCheck tests to assure us that it's ok.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4508767.js&quot;&gt;&lt;/script&gt; We're ready to move on.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Cells&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;A cell is a representation of one of the nine squares that you find on a tic-tac-toe board. A cell differs from a piece as a cell can have a piece value or it can be empty. In our implementation, empty cells will be represented by a period &quot;.&quot;. Let's take a look at the types and the functions we'll use to interact with cells.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4508784.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We use Maybe to allow either a Nothing or a Piece value for a cell. With the help of those functions we've already written for pieces, you can see that these cell functions are very simple. We've only had to cater for one extra case, the case of when there's no value in a cell. We'll setup a few more QuickCheck tests just to make sure that our Cell code is working ok.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4508796.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Great. With this code written we're ready to wrap up a List of these cells into a field that we will play on.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;The Field&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;A 3x3 grid is normally what's drawn prior to playing a game of tic-tac-toe. We will define the field as an array of an array of cells. Here's the type and supporting functions for a field.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4508896.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Much as before, you can see that we're leaning on our already-built set of functions to implement all of our field-based functions. At this point, we can define the starting field that all of our games will originate with.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4508910.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;You can see that the field is in string format. It's a little more human to read and it's all ready for our &quot;readField&quot; function to use as is demonstrated by the following QuickCheck test.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4509074.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;It's at this point where any similarities between the Haskell Live videos and my implementation end. It's probably natural that this is the point as we're going to start dealing with some game logic.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Winners and Losers&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;There are a few tests that we have to be constantly running in order to simulate a real-life game of tic-tac-toe. One of which is &quot;do we have a winner yet?&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Testing if a winner has been established is testing if the same symbol appears on a horizontal, vertical or diagonal line. In each of these configurations, there are only going to be three cells to test, so I made a general purpose array tester. I've use pattern matching in this function to be as clear as possible. It's not as DRY as it could be, but we can improve it later - let's just get it working.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here's the function to test three list elements to see if there's a winner.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4509099.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;Easy. This function looks like it will be very effective in testing winners on the horizontal lines. But what about the vertical lines that occur in different arrays? and the diagonal lines that exist in different arrays and in different indexes across the horizontal axis?&lt;br /&gt;&lt;br /&gt;My answer here is to create a function that make all of these testable vectors into horizontal rows so that we can use the above function on all of the different win configurations. Here's the code to build an array of these 3 element arrays.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4509135.js&quot;&gt;&lt;/script&gt; Walking through this one piece-by-piece, we can see a number of items in the where clause. Sure, these could be consolidated into a big-fat-one-liner, but I wanted to make clear exactly what was being concatenated. So, &quot;horiz&quot; is a list comprehension giving you each horizontal line, &quot;col1&quot;, &quot;col2&quot; and &quot;col3&quot; are the vertical columns. &quot;diag&quot; is a little less clearer through its use of head and drop, but it does form the diagonals into testable rows.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Playing the game&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Weather you're a computer or human player, you'll need to know where are the valid spots to move. It'll be intuitive enough from the user interface presented for a human to realise where their next move will be, but our computer player counterparts will need to be told explicitly where they can move. This next function just finds all of the available cells that you can move into.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4509556.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We assign an index (from 0 to 8) to each cell and only return the indexes that are paired with a &quot;Nothing&quot; value. This function will help us later when we go to build a user interface for this application. We'll be able to prompt the user intuitively.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Flattening the array gives us the [0..8] range, which over the 3x3 grid (which is really our tic-tac-toe representation), the range looks like this.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;0 1 2&lt;br /&gt;3 4 5&lt;br /&gt;6 7 8&lt;/pre&gt;&lt;br /&gt;This is timely information as we're just about to present the function that will place a piece on the field for us. Placing a piece will require us to provide the current game field, the piece we want to apply and the index that we want to apply it at. This function cuts the list on the index that we want to apply and then re-concatenates the broken list around the new piece (obviously dropping the cell that we're putting a piece into). Here's the code.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4509592.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Trying to be as clear as possible with my names here. &quot;prior&quot; being the list before the break, &quot;after&quot; is what comes after.&lt;br /&gt;&lt;br /&gt;Now it's time to introduce our &quot;artificial intelligence&quot; which really - there isn't any intelligence here. It's based purely off of a random number generator. Here's how our computer players will play a round of tic-tac-toe.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4509606.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;We're taking in a random number generator, the piece type that the computer will place and the field that it will be placed in. The output to which will be a new random number generator and the changed field. This way, we can repeatedly call this function and not worry about losing our sense of entropy (or field state!).&lt;br /&gt;&lt;br /&gt;Finally we have the function that will play our game until we have a result (win naught, win cross or tie). I needed to implement a &quot;not&quot; function for my piece type. This is just so I can offer each &quot;player&quot; a go interchangeably. Here's the code.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4509651.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;This reads fairly humanly. We assume that if execution breaks into this function, a result wasn't established on the execution prior, so we're comfortable in the first check that if there are no spaces left to put pieces, we must declare the game as a tie. The next test is if the previous call to this function caused the other player to win the game. In the event that this check is confirmed, a message is written out and we do not continue any further. If there still isn't a winner, we get this player to place a piece into a cell and then recurse on this function as the other player.&lt;br /&gt;&lt;br /&gt;Here is how a game runs when using 1 into mkStdGen.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;*TicTacToe&amp;gt; let f = readField initialField&lt;br /&gt;*TicTacToe&amp;gt; playGame (mkStdGen 1) Cross f&lt;br /&gt;...&lt;br /&gt;...&lt;br /&gt;...&lt;br /&gt;&lt;br /&gt;..x&lt;br /&gt;...&lt;br /&gt;...&lt;br /&gt;&lt;br /&gt;o.x&lt;br /&gt;...&lt;br /&gt;...&lt;br /&gt;&lt;br /&gt;o.x&lt;br /&gt;...&lt;br /&gt;..x&lt;br /&gt;&lt;br /&gt;o.x&lt;br /&gt;...&lt;br /&gt;.ox&lt;br /&gt;&lt;br /&gt;oxx&lt;br /&gt;...&lt;br /&gt;.ox&lt;br /&gt;&lt;br /&gt;oxx&lt;br /&gt;.o.&lt;br /&gt;.ox&lt;br /&gt;&lt;br /&gt;oxx&lt;br /&gt;.o.&lt;br /&gt;xox&lt;br /&gt;&lt;br /&gt;oxx&lt;br /&gt;.oo&lt;br /&gt;xox&lt;br /&gt;&lt;br /&gt;Game was a tie!&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;That's tic-tac-toe.&lt;br /&gt;&lt;br /&gt;Next time I'll add some user interactivity so that the computer doesn't have all the fun!&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MongoDB console cheatsheet</title>
   <link href="http://tuttlem.github.io/2013/01/11/mongodb-console-cheatsheet/"/>
   <updated>2013-01-11T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/11/mongodb-console-cheatsheet</id>
   <content type="html">&lt;h1&gt;MongoDB console cheatsheet&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Basic retrieves&lt;/h3&gt;&lt;div&gt;Find all items in a collection&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.collection.find();&lt;/pre&gt;&lt;br /&gt;&lt;div&gt;Count all items in a collection&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.collection.count();&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Find all items in a collection with criteria (Mongo &lt;a href=&quot;http://docs.mongodb.org/manual/reference/operators/&quot;&gt;operators&lt;/a&gt; reference)&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.collection.find({&quot;field&quot;: value});&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Reduce the field-set returned by a query&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.collection.find({}, {&quot;field&quot;: 1});&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Sorting by a field&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.collection.find().sort({&quot;field&quot;: 1});&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Limit the number of records returned by a query&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.collection.find().limit(3);&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Skip over a set of documents&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.collection.find().skip(3);&lt;/pre&gt;&lt;h3&gt;List processing&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Map over a cursor of results&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.collection.find().map(function(item) {&lt;br /&gt;     return item;&lt;br /&gt;});&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Iterate over a cursor of results&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.collection.find().forEach(function(item) {&lt;br /&gt;     printjson(item);&lt;br /&gt;});&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Updates&lt;/h3&gt;&lt;div&gt;Update over an enumerated list&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.collection.find().forEach(function(item) {&lt;br /&gt;     // make changes to item&lt;br /&gt;     db.collection.save(item);&lt;br /&gt;});&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Update from a query (Mongo &lt;a href=&quot;http://docs.mongodb.org/manual/applications/update/&quot;&gt;update&lt;/a&gt; reference)&lt;br /&gt;&lt;div&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.collection.update({&quot;_id&quot;: ObjectId(&quot;xxxx&quot;)}, &lt;br /&gt;                     { $set: { &quot;field&quot;: value },&lt;br /&gt;                       $push: { &quot;subdocument&quot;: subdocument } });&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3&gt;&amp;nbsp;Deleting&lt;/h3&gt;&lt;div&gt;Destroy an entire collection&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.collection.drop();&lt;/pre&gt;&lt;br /&gt;&lt;div&gt;Delete a document selectively&lt;/div&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.collection.remove({&quot;_id&quot;: ObjectId(&quot;xxxx&quot;));&lt;/pre&gt;&lt;br /&gt;&lt;h3&gt;Utilities&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Set the record limit returned to the console&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;brush:js&quot;&gt;DBQuery.shellBatchSize = 100&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Shebang, Ruby and RVM</title>
   <link href="http://tuttlem.github.io/2013/01/09/shebang-ruby-and-rvm/"/>
   <updated>2013-01-09T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/09/shebang-ruby-and-rvm</id>
   <content type="html">&lt;h1&gt;Shebang, Ruby and RVM&lt;/h1&gt;
&lt;div class='post'&gt;
I needed to distribute one of my ruby programs to be setup as a job, so I needed to add a &lt;a href=&quot;http://en.wikipedia.org/wiki/Shebang_(Unix)&quot;&gt;shebang&lt;/a&gt;&amp;nbsp;to the top of the file. I run my development environment using RVM so I had no idea how to address ruby in the shebang. Then it hit me ..&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;#!/usr/bin/env ruby&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Interestingly, things are a little different when trying to execute a ruby with one of your RVM installed rubies from a cron job. The rvm website has a whole &lt;a href=&quot;https://rvm.io/integration/cron/&quot;&gt;section&lt;/a&gt;&amp;nbsp;regarding the topic of cron integration. The command that I passed to successfully execute these jobs needed to be addressed absolutely:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;bash -c &quot;/home/user/.rvm/bin/ruby /path/to/script.rb&quot;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Easy.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Making Cleaner NASM Code with Macros</title>
   <link href="http://tuttlem.github.io/2013/01/09/making-cleaner-nasm-code-with-macros/"/>
   <updated>2013-01-09T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/09/making-cleaner-nasm-code-with-macros</id>
   <content type="html">&lt;h1&gt;Making Cleaner NASM Code with Macros&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Cleaner, clearer code is better. It's easier to debug, it's easier to read, it's just plain - better. Assembly code isn't known for its ability to allow the developer to make their intentions clear in its source code, but we can get closer with some carefully craft macros.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Macros are symbols that you can use in your code to represent a block of code. Macros are allowed to take parameters which makes them an extremely flexible and valuable tool in your arsenal. These symbols that you use in your code are swapped out by nasm at the time of assembly for the blocks of code that they represent.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If you want to go further in depth to the nasm pre-processor and macros, check it out in the manual &lt;a href=&quot;http://www.nasm.us/doc/nasmdoc4.html&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Today's post will be focused on cleaning up the code that we'd written in &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/strlen-implementation-in-nasm.html&quot;&gt;this&lt;/a&gt; previous article to look a little more human.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Revisiting write and strlen&lt;/h3&gt;&lt;div&gt;In the previous article &quot;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/strlen-implementation-in-nasm.html&quot;&gt;strlen() implementation in NASM&lt;/a&gt;&quot;, we'd put together a couple of ways to take the length of a string. This article will assume that we're already using this code. With this in mind, we can put together a general purpose print function that will display a zero terminated string with the following.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4492430.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Ok, that's a nice and neat little bundle. Now, everytime that we want to call this function, we need to write code that looks like the following.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4492450.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Which, isn't too bad I guess. We can make it look better though. Consider the following code that wraps this code into a macro.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4492469.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;The syntax here may look a little alien to begin with, but it'll all make sense in a minute. So, we start the macro block off with a &quot;%macro&quot; directive. What follows is the name of the macro, in this case &quot;print&quot; and after that is the number of parameters that this macro will expect (we want one parameter, being the string to print). We have the print code between the directives. You'll see that rdi gets loaded with &quot;%1&quot; which just means &quot;replace %1 with the first thing passed to this macro&quot;. To finish up your macro, you have &quot;%endmacro&quot;.&lt;br /&gt;&lt;br /&gt;With that macro defined, you can now print a message to screen by doing this.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4492503.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;This is starting to look a little higher-level now. A bit more &quot;human&quot; on the eyes.&lt;br /&gt;&lt;br /&gt;Another nifty trick that I'd picked up a while ago was a macro for defining strings. In all of the examples we've seen so far, you'd declare strings in the data segment with the following syntax.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4492529.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;This is perfectly fine, however we can wrap this string declaration up into a macro of its own as well allowing us to define strings where ever we are. We need to be careful though. Defining a string in the code segment without the appropriate jumps is dangerous as we run the risk of executing the string data. The following macro does this safely.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4492549.js&quot;&gt;&lt;/script&gt; You can see that we've declared a macro that expects two parameters. The first parameter is the name of the variable that we declare. This name is also used to formulate the labels that we jump to so that they are unique between string definitions. The second parameter is the actual string data itself.&lt;br /&gt;&lt;br /&gt;Now that we have both of these macros defined, the following code is perfectly legal and works a treat.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4492568.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Well, this is only the start of what you can accomplish with macros. An exercise to the reader would be to implement your own version of &quot;print&quot; that prints a new line after it prints the string - you never know, you might even want to call it &quot;println&quot;!&lt;br /&gt;&lt;br /&gt;Enjoy.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A Light cron Tutorial</title>
   <link href="http://tuttlem.github.io/2013/01/09/a-light-cron-tutorial/"/>
   <updated>2013-01-09T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/09/a-light-cron-tutorial</id>
   <content type="html">&lt;h1&gt;A Light cron Tutorial&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Cron&quot;&gt;cron&lt;/a&gt;&amp;nbsp;is the time-based task scheduler for Unix. I think the wikipedia article sums up its description best, so I won't try and reproduce it:&lt;/div&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;Cron is the time-based job scheduler in Unix-like computer operating systems. Cron enables users to schedule jobs (commands or shell scripts) to run periodically at certain times or dates.&lt;/blockquote&gt;Today's post will be a light tutorial in setting up jobs using&amp;nbsp;&lt;a href=&quot;http://en.wikipedia.org/wiki/Cron&quot;&gt;cron&lt;/a&gt;&amp;nbsp;.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&amp;nbsp;Job types&lt;/h3&gt;&lt;div&gt;Within the&amp;nbsp;&lt;a href=&quot;http://en.wikipedia.org/wiki/Cron&quot;&gt;cron&lt;/a&gt;&amp;nbsp;system there are two flavors of tasks. The first is at the system level the other is at the user level. The main difference being, the system level tasks (controlled by administrators) are able to run as any particular user. User jobs are setup by the user and installed for the user.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Job installation and modification&lt;/h3&gt;&lt;div&gt;Start an editing session of the cron table (&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html&quot;&gt;crontab&lt;/a&gt;) by issuing the following command.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;$ crontab -e&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;You'll now be looking at the job definitions that are setup.&lt;br /&gt;&lt;br /&gt;To add a job to the list, you need to add it in the following format.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;Minute Hours Day Month DayOfWeek Command [args]&lt;/pre&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&quot;Minute&quot; is specified as (0 - 59)&lt;/li&gt;&lt;li&gt;&quot;Hours&quot; is specified as (0 - 23)&lt;/li&gt;&lt;li&gt;&quot;Day&quot; is specified as (0 - 31)&lt;/li&gt;&lt;li&gt;&quot;Month&quot; is specified as (0 - 12 where 12 is December)&lt;/li&gt;&lt;li&gt;&quot;DayOfWeek&quot; is specified as (0 - 7 where 7 or 0 are Sunday)&lt;/li&gt;&lt;li&gt;&quot;Command&quot; is the shell command you want to execute&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;For a system level task, a new field to specify the username is added into this format.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;brush:plain&quot;&gt;Minute Hours Day Month DayOfWeek Username Command [args]&lt;/pre&gt;&lt;br /&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;This will only apply to system level tasks that are added. Operators can be used in conjunction with literal values to short-cut some of the more common tasks.&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Use an asterisk (*) to define all values for a field&lt;/li&gt;&lt;li&gt;Use a comma (,) to separate multiple values for a field&lt;/li&gt;&lt;li&gt;Use a dash (-) to define a range&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;To make some more sense out of the time fields, here are a few examples and when they'd execute.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;crontab entry&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;interval&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0 1 * * * script.sh&lt;/td&gt;&lt;td&gt;Run at 1 in the morning everyday&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0 6 1 * * script.sh&lt;/td&gt;&lt;td&gt;Run at 6am on the first of every month&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0 11 * * 1-5 script.sh&lt;/td&gt;&lt;td&gt;Run at 11am every weekday&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0 17 5 5 *&lt;/td&gt;&lt;td&gt;Run at 5 in the afternoon on the 5th of May&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0 7-19/2 * * *&lt;/td&gt;&lt;td&gt;Run every 2 hours from 7 in the morning until 7 at night&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;Out of the box, a cron job will email your local unix account with the results of the job run. If you don't want to receive this email just pipe the output of your cron command to null, like so.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain&quot;&gt;0 7 * * * test.sh &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&lt;/pre&gt;&lt;br /&gt;Some short-cut &quot;special variables&quot; that you can use in conjunction with the times that these jobs run look like this (these really clean up the way a crontab reads).&lt;br /&gt;&lt;br /&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;variable&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;meaning&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;cron equiv.&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;@reboot&lt;/td&gt;&lt;td&gt;Run once, at startup&lt;/td&gt;&lt;td&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;@yearly /&amp;nbsp;@annually&lt;/td&gt;&lt;td&gt;Run once per year&amp;nbsp;&lt;/td&gt;&lt;td&gt;0 0 1 1 *&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;@monthly&lt;/td&gt;&lt;td&gt;Run once per month&lt;/td&gt;&lt;td&gt;0 0 1 * *&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;@weekly&lt;/td&gt;&lt;td&gt;Run once per week&lt;/td&gt;&lt;td&gt;0 0 * * 0&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;@daily /&amp;nbsp;@midnight&lt;/td&gt;&lt;td&gt;Run once per day&lt;/td&gt;&lt;td&gt;0 0 * * *&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;@hourly&lt;/td&gt;&lt;td&gt;Run once per hour&lt;/td&gt;&lt;td&gt;0 * * * *&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;h3&gt;Other maintenance&lt;/h3&gt;&lt;div&gt;You can list the cron table with the following command.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;# crontab -l&lt;br /&gt;# crontab -u user -l&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;You can remove all entries out of the cron table with the following command.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;# crontab -r&lt;br /&gt;# crontab -u user -r&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;That's it! A nice light tutorial.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>strlen() implementation in NASM</title>
   <link href="http://tuttlem.github.io/2013/01/08/strlen-implementation-in-nasm/"/>
   <updated>2013-01-08T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/08/strlen-implementation-in-nasm</id>
   <content type="html">&lt;h1&gt;strlen() implementation in NASM&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Seeing so many &quot;Hello, world&quot; concepts for getting up an running in Assembly has annoyed me a little bit. I see people using the &quot;$ - msg&quot; macro to calculate the length of their string at assemble time.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In today's post, I'll show you how to measure the length of your string at runtime so you'll be able to provide the &lt;a href=&quot;http://en.wikipedia.org/wiki/Write_(system_call)&quot;&gt;write&lt;/a&gt;&amp;nbsp;syscall's third parameter a little more flexibly.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;The logic&lt;/h3&gt;&lt;div&gt;The logic behind this procedure is dead-simple. Test the current byte for being null, if it is get out now if its not keep counting! Here's how the code looks.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4478792.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;This is just straight-forward memory testing, no great advancements in computer science here! The function expects that the string that requires testing will be in the rdi register.&lt;br /&gt;&lt;br /&gt;To actually use this function in your application though, you'll need to transport the result (which sits in rax by the time the function has completed execution) into the register that write expects its length parameter. On a debian linux system, the length is expected in rdx which there is an example of &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/hello-64bit-assembly.html&quot;&gt;here&lt;/a&gt;. OSX's ABI is slightly different but confusingly expects the length in the same register. You can read up on that &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/assembly-on-osx.html&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Here's how you use your new strlen function (in the Debian scenario).&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4478850.js&quot;&gt;&lt;/script&gt; So you can see that this is quite straight forward. We setup rdx before we setup the rest of the registers. We could have done this the other way around - to be on the safe side, I've done it this way as you never know what registers get mowed over in people's functions.&lt;br /&gt;&lt;br /&gt;I tried to help this also in the _strlen implementation by saving the only work register that I use (rcx).&lt;br /&gt;&lt;br /&gt;Anyway, that's how you measure your string.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;A more optimal way?&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;After completing this article, I'd thought about the &quot;brute-forcish&quot; way that I'd crunched out the numbers to derive a string's length and thought to myself, what if I could just scan the string of bytes - find the null character and subtract this found index from the original starting point. Mathematically I would have calculated the distance in bytes between the start of the string and the NULL character, ergo the string length.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So, I've written a new string length implementation that does just this and here it is.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4480719.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;It may look longer than the first implementation however this second implementation uses &lt;a href=&quot;http://courses.engr.illinois.edu/ece390/archive/spr2002/books/labmanual/inst-ref-scasb.html&quot;&gt;SCASB&lt;/a&gt;&amp;nbsp;which will be heaps more optimal than my hand-rolled loop.&lt;br /&gt;&lt;br /&gt;Enjoy.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Printing a Register's Value in Hex</title>
   <link href="http://tuttlem.github.io/2013/01/08/printing-a-register-s-value-in-hex/"/>
   <updated>2013-01-08T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/08/printing-a-register-s-value-in-hex</id>
   <content type="html">&lt;h1&gt;Printing a Register's Value in Hex&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Putting some of the knowledge we've picked up in &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/assembly-on-osx.html&quot;&gt;previous&lt;/a&gt; &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/strlen-implementation-in-nasm.html&quot;&gt;posts&lt;/a&gt;, todays post is going to be about getting the value that sits in a register out on screen. This post will assume that we're not going to lean on a call like printf, we're going to do it by hand.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;How to attack the problem?&lt;/h3&gt;&lt;div&gt;The solution that I present may immediately strike your eye as verbose &amp;amp; long-winded and this is on purpose. We're going to build something that works to begin with then we can do an analysis of what we've written and optimise it later.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I've split the larger problem of printing a register's value (in this case we're printing RAX) into a few smaller problems so as we knock off each problem, we get closer to an overall result. The sub-problems that I have cut this into are:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Printing a nibble (half a byte or 4bit value)&lt;/li&gt;&lt;li&gt;Printing a byte&lt;/li&gt;&lt;li&gt;Printing the register value&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;So you can see that we're going to implement a solution by solving these smaller issues top to bottom. Let's take a look at some code.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Characters and Nibbles&lt;/h3&gt;&lt;div&gt;We're going to print a nibble. A nibble is 4 bits of data spanning values from 0 up to F hexadecimal or 0 up to 15 in decimal. The plan of attack is to isolate this 4 bits in such a way that we can use it as an offset into a string of characters organised from 0 up to F.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here's the code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4483534.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The code is documented pretty well, and you can see that the crux of the work is just offsetting the base address of the string by the nibble that we want to print. Nifty. Keep in mind that the registers used here are assuming that you're compiling for OSX. If you are compiling for another type of unix make sure that the parameters are being passed through the correct registers, otherwise you'll be segfaulting all the way to the pub!&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Stepping up to a byte&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Now we want to chain two &quot;_print_nibble&quot; calls together so that we can print an entire byte out on the screen (0 up to FF). We've already got a procedure that prints the lower 4 bits of al out to the screen, all we really need to do is be creative with al so we can print the higher 4 bits first then the lower 4 bits so that the number comes out to the console in the right order!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here's the code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4483628.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This function holds the same assumption as printing a nibble. There can't be any junk in the higher bits (from al) of rax otherwise this solution will turn to mud.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Going the whole hog!&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;We're now able to print any byte we would like, so lets string 8 bytes together to make a 64bit integer that we can print. Again, it's all about shuffling the value that we want to print around correctly so that the number is written to the console in the correct order. It might be confusing to see pushes and pops inside of the loop that I'll present, but I re-use these registers to calculate things on the fly.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Again, I've commented this code pretty verbosely so it should read like a bedtime story. Here's the code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4483840.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The key is byte isolation. Using rcx we can count from the top byte down to the bottom with creative shifting.&lt;br /&gt;&lt;br /&gt;Now that we've implemented all of this code, we can print some boobies to the screen. This is the moment you've been waiting for.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4483880.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;The output of which should just print &quot;B000B135B000B135&quot; to the console. Yes, there's boobies in the article, see!&lt;br /&gt;&lt;br /&gt;Whilst this may not appear to be the most useful function right now, it'll serve as a very useful debugging tool for us in the future.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Assembly on OSX</title>
   <link href="http://tuttlem.github.io/2013/01/07/assembly-on-osx/"/>
   <updated>2013-01-07T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/07/assembly-on-osx</id>
   <content type="html">&lt;h1&gt;Assembly on OSX&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;I've &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/hello-64bit-assembly.html&quot;&gt;previously written&lt;/a&gt; about writing &quot;Hello World&quot; applications in assembly for 64bit architectures in a Unix environment, however I haven't written about the nuances of doing this in OSX.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;My primary environment that I work in at home is OSX, so I wanted to get this post out of the way anyway so that I've got assembly &amp;amp; linking instructions written down. To follow along, you'll want to install &lt;a href=&quot;http://www.nasm.us/&quot;&gt;NASM&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;The Code&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4474479.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;br /&gt;I've tried to comment the code above as best I can. It's pretty clear to see that we're calling the &lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?write+2&quot;&gt;write&lt;/a&gt; and &lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?exit+2&quot;&gt;exit&lt;/a&gt; syscalls. The only line that stands out is having to adjust esp after our write syscall. Regardless, this is what OSX expects!&lt;br /&gt;&lt;br /&gt;Building this application into something runnable for mach is pretty simple. You assemble the file into an object file like so.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ nasm -f macho hello.asm&lt;/pre&gt;&lt;br /&gt;And link it as an executable like so.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ ld -e _start -o hello hello.o&lt;/pre&gt;&lt;br /&gt;Pretty simple. You're now ready to attack OSX with your assembler!&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;In 64bits please!&lt;/h3&gt;&lt;div&gt;Continuing the discussion a bit further, we can bring our program into today by upgrading NASM to a version that supports the macho64 format. The source to our program changes a bit, especially the way that we pass parameters into our syscalls now. The &lt;a href=&quot;http://en.wikipedia.org/wiki/Application_binary_interface&quot;&gt;ABI&lt;/a&gt; had changed dramatically favouring separate registers to pass values as opposed to using the stack.&lt;br /&gt;&lt;br /&gt;Here's the 64bit source.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4474618.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;It still does look a lot like its 32bit counterpart. Notice how we're not magically adjusting esp by hand now? Those parameters being passed as registers has helped!&lt;br /&gt;&lt;br /&gt;Assembling your 64bit assembly code now looks like this.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ nasm -f macho64 hello64.asm&lt;/pre&gt;&lt;br /&gt;And link it as an executable like so.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ ld -e _start -o hello64 hello64.o&lt;/pre&gt;&lt;br /&gt;This is a good place to be. Now you've got choice!&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Sending email with GMail and Ruby</title>
   <link href="http://tuttlem.github.io/2013/01/06/sending-email-with-gmail-and-ruby/"/>
   <updated>2013-01-06T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/06/sending-email-with-gmail-and-ruby</id>
   <content type="html">&lt;h1&gt;Sending email with GMail and Ruby&lt;/h1&gt;
&lt;div class='post'&gt;
Here's a quick little ruby snippet to get you sending email through your gmail account. I had to implement this recently, so I thought I'd make note of it here.&lt;br /&gt;&lt;br /&gt;You will need the &lt;a href=&quot;http://rubygems.org/gems/tlsmail&quot;&gt;tlsmail&lt;/a&gt; gem install to make this happen.&lt;br /&gt;&lt;br /&gt;Here's the code.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4466102.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;That is what it's all about!&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>node.js Screencasts</title>
   <link href="http://tuttlem.github.io/2013/01/06/node-js-screencasts/"/>
   <updated>2013-01-06T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/06/node-js-screencasts</id>
   <content type="html">&lt;h1&gt;node.js Screencasts&lt;/h1&gt;
&lt;div class='post'&gt;
I think that if I was to dip my toes any further into the pool that is node.js, I'll be hitting up this set of free screencasts.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://learni.st/users/tilley.brandon/boards/3254-nodecasts-node-js-screencasts&quot;&gt;https://learni.st/users/tilley.brandon/boards/3254-nodecasts-node-js-screencasts&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Impure worlds, side effects and IO</title>
   <link href="http://tuttlem.github.io/2013/01/06/impure-worlds-side-effects-and-io/"/>
   <updated>2013-01-06T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/06/impure-worlds-side-effects-and-io</id>
   <content type="html">&lt;h1&gt;Impure worlds, side effects and IO&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;I've only just made it to chapter 8 in the book &lt;a href=&quot;http://learnyouahaskell.com/&quot;&gt;Learn You a Haskell for Great Good!&lt;/a&gt;&amp;nbsp;as as I've been going through it, most of it has been assumed knowledge without a lot of the understanding. I never needed to understand Haskell's separation of pure functional from impure code in order to print &quot;Hello World&quot; to the screen.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;After reading Chapter 8, I'm convinced that I should have known. I'm glad I do now.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Impure worlds&lt;/h3&gt;&lt;div&gt;Haskell goes to great lengths to ensure the code that you're writing is purely functional. That is, no state, no side-effects, function guarantees on outputs for given inputs. Fantastic. Great. But how do you make Haskell do something interesting then?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In order to introduce the outside world into our pure environment we use &quot;IO actions&quot;. The are actions that can (but don't have to) emit a result that will be of interest to our program. These actions are said to have side effects.&lt;br /&gt;&lt;br /&gt;I could continue on here but I wouldn't do the topic the justice it deserves, so do yourself a favour and read up on it.&lt;br /&gt;&lt;br /&gt;From here, I'll just present the code-level concepts that I want to make note of.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Oganised Randomness&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;One topic that's interesting came to me when I was unit testing a card shuffling solution. In order to implement shuffling, I needed to call on &lt;a href=&quot;http://hackage.haskell.org/packages/archive/random/1.0.0.3/doc/html/System-Random.html&quot;&gt;System.Random&lt;/a&gt;. To get a generator, you can use &lt;a href=&quot;http://hackage.haskell.org/packages/archive/random/latest/doc/html/System-Random.html#v:mkStdGen&quot;&gt;mkStdGen&lt;/a&gt;&amp;nbsp;which takes in an integer to produce a random number generator. A more unpredictable approach is&amp;nbsp;&amp;nbsp;to get this integer from some form of entropic pool outside by proxy of &lt;a href=&quot;http://hackage.haskell.org/packages/archive/random/latest/doc/html/System-Random.html#v:getStdGen&quot;&gt;getStdGen&lt;/a&gt;.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We can predictably re-create the same random number generator by supplying&amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/random/latest/doc/html/System-Random.html#v:mkStdGen&quot;&gt;mkStdGen&lt;/a&gt;&amp;nbsp;with the same number. This is good for our unit tests as we can structure our tests according to these psuedo-random results. Of course, the number that's passed to&amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/random/latest/doc/html/System-Random.html#v:mkStdGen&quot;&gt;mkStdGen&lt;/a&gt;&amp;nbsp;I had setup as a lambda parameter so that &lt;a href=&quot;http://hackage.haskell.org/package/QuickCheck&quot;&gt;QuickCheck&lt;/a&gt; would produce 100 different scenarios to test out.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Anyway, on to some topics.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;&quot;Do&quot; syntax&lt;/h3&gt;&lt;div&gt;&quot;Do&quot; syntax allows us to concatenate many IO actions together without making our code look like soup.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4461704.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;This is equivalent to this. &lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4461713.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;While we're inside the scope of &quot;Do&quot; syntax, we use the &quot;&amp;lt;-&quot; construct to remove the IO off a result that comes from the outside world. Once we've done this, we can start using that value in our pure world!&lt;br /&gt;&lt;br /&gt;The inverse of the &quot;&amp;lt;-&quot; is a &quot;return&quot; statement. A &quot;return&quot; will take a pure value and turn it into an IO action.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;when&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&quot;when&quot; is a function from Control.Monad and is used in conjunction with IO actions. &quot;when&quot; is used much like an &quot;if&quot; construct in other languages only when the condition is True, it'll return the supplied IO action otherwise it'll send out an empty IO action or IO (). Here's an example of its use.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4461741.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;When running, if this program receives &quot;John&quot; for the input, then John will get a message back. Anyone else, and they'll get nothing.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;sequence&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&quot;sequence&quot; will execute a batch (or a List) of IO actions. Here is an example where the program will ask for three strings (so there's a List of actions there) and then after that it'll use sequence and map to print those colours back to the user.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4461784.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;h3&gt;mapM and mapM_&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;In the previous example, the usage of sequence in conjunction with map earned its own shortcut with mapM. Re-writing the last statement in the previous example with mapM.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4461801.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;It would have been more appropriate for me to use mapM_ as the difference is that it drops the result.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;forever&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;As the name suggests, &quot;forever&quot; will execute an IO action forever.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4461820.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;h3&gt;forM&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&quot;forM&quot; is pretty much &quot;mapM&quot; only with the parameters shuffled around. It's a little more conducive to passing lambda expressions into it for a very neat and tidy feel.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4461858.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;That's pretty handy being able to &quot;return&quot; your value from the lambda body back into the assignment.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Getting input from outside&lt;/h3&gt;&lt;div&gt;Being able to process the STDIN stream is a basic building block for a lot of programs in general. This text processing &quot;duty&quot; is made very simple in Haskell through the use of &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:getContents&quot;&gt;getContents&lt;/a&gt; and even easier through &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:interact&quot;&gt;interact&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The example program that I've got here uses &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Bits.html#v:xor&quot;&gt;`xor`&lt;/a&gt;&amp;nbsp;to scramble how a string looks visually. By applying the same function over the scrambled string, we're returned to the original string.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Heres the code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4466869.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:getContents&quot;&gt;getContents&lt;/a&gt;&amp;nbsp;works like any other STDIN reader where we might use redirection at the shell to send a text file to it or we might just be entering strings at the console like so.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;$ runhaskell scramble.hs &lt;br /&gt;Hello&lt;br /&gt;M`iij&lt;br /&gt;Yes sir-ee bob!&lt;br /&gt;\`v%vlw(``%gjg$&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Not quite &quot;encryption&quot; is it, but it'll do to demonstrate with. Using&amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:interact&quot;&gt;interact&lt;/a&gt;&amp;nbsp;just cleans up the main function so that it will look like this.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4466880.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:interact&quot;&gt;interact&lt;/a&gt;&amp;nbsp;is purpose built for this scenario as this is quite a common task.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Command line parameters&lt;/h3&gt;&lt;div&gt;The other major source of external interaction to programs is through the command line, passing parameters in. Both &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/System-Environment.html#v:getProgName&quot;&gt;getProgName&lt;/a&gt; and &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/System-Environment.html#v:getArgs&quot;&gt;getArgs&lt;/a&gt; will put you on par with any other environment looking like this.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4467008.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;That's it for IO. I'm going to try and apply this knowledge into some of my projects.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Exception handling with bracket</title>
   <link href="http://tuttlem.github.io/2013/01/06/exception-handling-with-bracket/"/>
   <updated>2013-01-06T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/06/exception-handling-with-bracket</id>
   <content type="html">&lt;h1&gt;Exception handling with bracket&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Performing IO in our pure environments can be dangerous. Who knows what people put in files that our programs are expected to read? There are tools that can help assure ourselves that we'll at least clean up if an explosion occurs.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In this post, I'll talk about exception handling with IO actions using &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception-Base.html#v:bracket&quot;&gt;bracket&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What is it?&lt;/h3&gt;&lt;div&gt;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception-Base.html#v:bracket&quot;&gt;bracket&lt;/a&gt;&amp;nbsp;is a function defined in Control.Exception and is defined as follows.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4467064.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Its first parameter is a function that acquires a resource (or handle). Its second parameter is a function that releases the resource acquired in the first. The last parameter is another function that uses the acquired handle to get a result.&lt;br /&gt;&lt;br /&gt;The error handling comes in because the 2nd parameter, the function that releases the acquired resource is called even if an exception occurs during the execution of the last parameter.&lt;br /&gt;&lt;br /&gt;That's nifty. An example use of bracket looks as follows.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4467094.js&quot;&gt;&lt;/script&gt; So, there's another safety mat for when you venture into the impure world.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Bundler for Ruby</title>
   <link href="http://tuttlem.github.io/2013/01/06/bundler-for-ruby/"/>
   <updated>2013-01-06T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/06/bundler-for-ruby</id>
   <content type="html">&lt;h1&gt;Bundler for Ruby&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;A really easy way to take the headache out of keeping your gems at the right version (especially when source controlling your projects) is to use a package manager. Today's post is about &lt;a href=&quot;http://gembundler.com/&quot;&gt;Bundler&lt;/a&gt;&amp;nbsp;which helps maintain your environment for Ruby development.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;h3&gt;Let's go!&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Install bundler.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ gem install bundler&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;You're now installed and ready to start bundling. The first job that you need to do is to write a metafile containing all of the gems that your application requires and where bundler should fetch those gems from. This metafile is called your &quot;Gemfile&quot;.&lt;br /&gt;&lt;br /&gt;A Gemfile will take the following format.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:ruby&quot;&gt;source &quot;http://rubygems.org&quot;&lt;br /&gt;gem &quot;nokogiri&quot;              &lt;br /&gt;gem &quot;premailer&quot;             &lt;br /&gt;gem &quot;tlsmail&quot;&lt;/pre&gt;&lt;br /&gt;The &quot;source&quot; tells bundler what site to download the gems from. The most common ones that I've seen are as follows. &lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:ruby&quot;&gt;source :rubygems&lt;br /&gt;source &quot;http://rubygems.org&quot;&lt;br /&gt;&lt;br /&gt;source :rubyforge&lt;br /&gt;source &quot;http://gems.rubyforge.org&quot;&lt;br /&gt;&lt;br /&gt;source :gemcutter&lt;br /&gt;source &quot;http://gemcutter.org&quot;&lt;/pre&gt;&lt;br /&gt;You can see each of the sources here with a symbolic shortcut that you can use also.&lt;br /&gt;&lt;br /&gt;The &quot;gem&quot; tells bundler that you have a dependency. You can also constrain the version of your dependencies on these lines by using version information after the gem.&lt;br /&gt;&lt;br /&gt;Now that you've created your Gemfile, you can install all of the gems and their dependencies simple by changing directories to where your Gemfile resides and typing the following at the prompt.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;$ bundle install&lt;/pre&gt;&lt;br /&gt;Now you have all of your dependencies installed for your application. Doing this will generate a Gemfile.lock file in your directory also. Make sure that you source control both your Gemfile and Gemfile.lock.&lt;br /&gt;&lt;br /&gt;That's it.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Os Kernel Development Library Routines</title>
   <link href="http://tuttlem.github.io/2013/01/05/os-kernel-development-library-routines/"/>
   <updated>2013-01-05T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/05/os-kernel-development-library-routines</id>
   <content type="html">&lt;h1&gt;Os Kernel Development Library Routines&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;In the &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2013/01/os-kernel-development-bootloader.html&quot;&gt;previous post&lt;/a&gt; to this series, we implemented a boot loader that would integrate with the multi-boot standard to get your kernel going (in first gear). It's time to change gears and make our life a little easier by implementing some library routines that we'll use a lot of.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What routines will we need?&lt;/h3&gt;&lt;div&gt;By keeping the scope minimal we won't overwhelm ourselves and just leave this project in a steaming heap in the corner. I think if we can get the following accomplished, we'll be in a really good place to start with.&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Port communication I/O&lt;/li&gt;&lt;li&gt;Basic console handling&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;There's still a mountain of work for us in the library arena. But if we can get these two knocked off, we'll at least be able to get our kernel to say something when it boots up rather than that rather unfriendly blank screen.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Ports&lt;/h3&gt;&lt;div&gt;We set different pieces of hardware state on our computer by pushing data out to ports. We also find out state information about our computer by drawing data from these ports. In our particular case, we want to know where the cursor is on screen we also want to be able to move the cursor about. These things don't just happen by themselves you know, there is underlying magic with ports to give the console a human feel.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The following code will allow us to read in a byte (8 bits), read in a short (16 bits) and write a byte to and from the ports.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4461056.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If we wanted to, we could have implemented these directly in an assembly module. These do assume that a particular architecture has been chosen for your kernel, so the portability of this code is minimal.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Console&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Now that we have a few routines that will allow us to do some port communication, we can put these to work by doing our console simulation.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The console itself is represented on screen as a cartesian plane but it's certainly not this way in memory. In memory the console is a linear block of memory that has a pair of bytes per cell on the screen. One byte being for the actual character in that cell and the other byte to decorate that cell (background &amp;amp; foreground colours). This memory buffer is located at segment 0xB800 (of course, again, on an intel architecture).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The block of most interest when putting a character on screen looks like this.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4461077.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;You can see that we're handling cases for backspace, tab, line feed &amp;amp; carriage return and of course any actual character that we want printed. Most of the others are just routine cursor maintenance. The last segment in the if tree, you can see that location is calculated and then the char is spat into the cell.&lt;br /&gt;&lt;br /&gt;Writing a string to the console makes great use of this char writer.&lt;br /&gt;&lt;br /&gt;The full source to these routines can be found in my GitHub repository for Phoenix, &lt;a href=&quot;https://github.com/tuttlem/phoenix/&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Loading an image with SDL_Image for OpenGL</title>
   <link href="http://tuttlem.github.io/2013/01/05/loading-an-image-with-sdl-image-for-opengl/"/>
   <updated>2013-01-05T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/05/loading-an-image-with-sdl-image-for-opengl</id>
   <content type="html">&lt;h1&gt;Loading an image with SDL_Image for OpenGL&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;One of those &quot;routine tasks&quot; that comes up each time I go to write a game in C/C++ is loading an image using SDL and getting it in context of OpenGL. Today I'll post the code that I use to get the job done. It's pretty common code and straight forward so it won't need much explanation.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;The Code&lt;/h3&gt;&lt;div&gt;First up, we have some variables that I like to hang on to. Your choice weather you hold onto the the format and number of colours, but you'll certainly want to keep track of the texture variable.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4460207.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Next up is the crux of the work. The file/IO and transformation is really done by the &lt;a href=&quot;http://www.libsdl.org/projects/SDL_image/&quot;&gt;SDL_Image&lt;/a&gt; library. So helpful, so easy! Keep in mind that you'll need to link against it at compile time (-lSDL_Image).&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4460230.js&quot;&gt;&lt;/script&gt; The code does assume that you're giving this program a texture with dimensions on the power-of-2 as OpenGL expects. If you don't - it's at your own peril. Like I said, there's nothing really out of the ordinary here. Load the file, find out some format parameters, build the OpenGL texture.&lt;br /&gt;&lt;br /&gt;At this point we have a texture that we can call &lt;a href=&quot;http://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindTexture.xml&quot;&gt;glBindTexture&lt;/a&gt; on, ready to go. You will want to make sure that TEXTURE_2D is enabled of course during your program's initialisation.&lt;br /&gt;&lt;br /&gt;Tearing down is really quite simple (and naturally OpenGL) also.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4460259.js&quot;&gt;&lt;/script&gt; Job's done!&lt;br /&gt;&lt;br /&gt;If you are interested, I've encapsulated a fair bit of this in an SDL helper library that I'm building at the moment called sdlper. You can grab it from my GitHub repository &lt;a href=&quot;https://github.com/tuttlem/libsdlper/&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Either type in Haskell</title>
   <link href="http://tuttlem.github.io/2013/01/05/either-type-in-haskell/"/>
   <updated>2013-01-05T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/05/either-type-in-haskell</id>
   <content type="html">&lt;h1&gt;Either type in Haskell&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Doing some further work in the world of Haskell and have come across the &lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-Either.html&quot;&gt;Either&lt;/a&gt; type from the base library on a few occasions. Today I'll post about how to work with this type as you'll come across it a bit and it is quite handy.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Background&lt;/h3&gt;&lt;div&gt;Just as its english counterpart describes,&amp;nbsp;&lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-Either.html&quot;&gt;Either&lt;/a&gt;&amp;nbsp;can represent one value or another. Scenarios where this might be the return value from a function where you may get the successful result value or you might get an error value.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The&amp;nbsp;&lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-Either.html&quot;&gt;Either&lt;/a&gt;&amp;nbsp;data type is defined as follows.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4459889.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;You construct an&amp;nbsp;&lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-Either.html&quot;&gt;Either&lt;/a&gt;&amp;nbsp;by calling either the Left or Right constructor.&amp;nbsp;So,&amp;nbsp;&lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-Either.html&quot;&gt;Either&lt;/a&gt;&amp;nbsp;is just a wrapper around a value that can be either one or the other.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Working with it&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;In GHCI I have created two instances of Either. &quot;lefty&quot; is constructed using Left, &quot;righty&quot; with Right.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre&gt;&amp;gt; let lefty = Left 10&lt;br /&gt;&amp;gt; let righty = Right &quot;John&quot;&lt;br /&gt;&lt;/pre&gt;&lt;pre&gt;&amp;gt; :t lefty&lt;br /&gt;lefty :: Either Integer b&lt;br /&gt;&lt;/pre&gt;&lt;pre&gt;&amp;gt; :t righty&lt;br /&gt;righty :: Either a [Char]&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;That all seems pretty straight forward. Calling Left or Right gives us back a value of an incomplete type. Haskell only really knows how to fill the types out that we've actually used.&lt;br /&gt;&lt;br /&gt;Having a look at the values that we've created, we're reminded that they are either Left or Right values as such.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&amp;gt; lefty&lt;br /&gt;Left 10&lt;br /&gt;&lt;/pre&gt;&lt;pre&gt;&amp;gt; righty&lt;br /&gt;Right &quot;John&quot;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Convenient, but if we're going to have a chance of using these values for anything real, we'll need to extract or unbox the value from the Either construct. The Either type has two functions which will take the boxed values into array called &quot;lefts&quot; and &quot;rights&quot;. This makes sense. Take a look at how these functions interact with lefty and righty.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&amp;gt; lefts [lefty]&lt;br /&gt;[10]&lt;br /&gt;&amp;gt; rights [lefty]&lt;br /&gt;[]&lt;br /&gt;&lt;/pre&gt;&lt;pre&gt;&amp;gt; lefts [righty]&lt;br /&gt;[]&lt;br /&gt;&amp;gt; rights [righty]&lt;br /&gt;[&quot;John&quot;]&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;They've now been taken out of the Either construct and are values ready to be processed sitting in a list.&lt;br /&gt;&lt;br /&gt;In the next example, we use pattern matching to detect if we're trying to divide by zero. Even though my preference is to always say that it's infinity, computers just like to complain about it.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4459950.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;The type that's used here &quot;Either String Float&quot; says that we're either going to receive a String or a Float in this value. You can see the case for zero division offering a String on the Left, otherwise we supply the quotient on the Right.&lt;br /&gt;&lt;br /&gt;There ya have it!&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Write an LLVM Backend Tutorial for Cpu0</title>
   <link href="http://tuttlem.github.io/2013/01/04/write-an-llvm-backend-tutorial-for-cpu0/"/>
   <updated>2013-01-04T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/04/write-an-llvm-backend-tutorial-for-cpu0</id>
   <content type="html">&lt;h1&gt;Write an LLVM Backend Tutorial for Cpu0&lt;/h1&gt;
&lt;div class='post'&gt;
One day, when I get a chance I will get through this entire article and actually give it a crack, but, until they invent the 48 hour day I'm stuck with just making a bookmark post.&lt;br /&gt;&lt;br /&gt;I've scratched the surface of this article and it's comprehensive. Really very interesting if it's your sort of thing.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://jonathan2251.github.com/lbd/index.html&quot;&gt;http://jonathan2251.github.com/lbd/index.html&lt;/a&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Recursive Data Structures in Haskell</title>
   <link href="http://tuttlem.github.io/2013/01/04/recursive-data-structures-in-haskell/"/>
   <updated>2013-01-04T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/04/recursive-data-structures-in-haskell</id>
   <content type="html">&lt;h1&gt;Recursive Data Structures in Haskell&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;As I've been following along in &lt;a href=&quot;http://learnyouahaskell.com/&quot;&gt;Learn You a Haskell for Great Good&lt;/a&gt;, I've been coming across some really interesting material around the type system. In today's post, I want to walk through the Tree data type that they define in this book for the section on recursive data structures.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What it is?&lt;/h3&gt;&lt;div&gt;A recursive data structure is a type that has itself as a type amongst its fields. Pretty wild idea, but really useful for situations of Child-&amp;gt;Parent, Tree-&amp;gt;Leaf, etc. In today's example we're going to be using the Tree structure which looks like this.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4447497.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This data type reads as, a &quot;Tree&quot; can either be an EmptyTree or it can have two nodes (that are also trees). You can start to see that this would be a best-fit as a binary search tree. Using an instance of Functor, we can give the the Tree data type&amp;nbsp;recursively&amp;nbsp;iterative&amp;nbsp;properties through fmap.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4447642.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;h3&gt;Using the type&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Getting data into the tree is done cleverly (or so I think) with some basic pattern matching. I think it's done cleverly because it reads so well/humanly (perhaps I'm easily pleased).&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4447669.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Inserting an EmptyTree node will result in a node with an EmptyTree either side.&amp;nbsp;Inserting data for key that exists will overwrite the existing data. Inserting a lesser key (lesser according to Ord) will put the node on the left, greater onto the right.&lt;br /&gt;&lt;br /&gt;Actually building a tree can be as simple as the following.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4447713.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;This results in a tree that looks like this.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;*Main&amp;gt; fmap (*1) (foldr treeInsert EmptyTree [5,7,3])&lt;br /&gt;Node 3 EmptyTree (Node 7 (Node 5 EmptyTree EmptyTree) EmptyTree)&lt;/pre&gt;&lt;br /&gt;3 is at the trunk with no left-hand-side. 3's right hand side has a 7 with 5 for its left hand side and no right hand sides (for 5 or 7). Reading the dump out from ghci is going to be better for your understanding than trying to read my English describing the tree's structure.&lt;br /&gt;&lt;br /&gt;The important part that I wanted to illustrate really was the use of fmap here. We map the function (*1) so that none of the values in our source array change. We apply &quot;treeInsert&quot; in a fold-right starting with EmptyTree across the source array [5,7,3].&lt;br /&gt;&lt;br /&gt;If you ask me, that's pretty cool.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Picking your Smart Pointers</title>
   <link href="http://tuttlem.github.io/2013/01/04/picking-your-smart-pointers/"/>
   <updated>2013-01-04T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/04/picking-your-smart-pointers</id>
   <content type="html">&lt;h1&gt;Picking your Smart Pointers&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;I wanted to do a quick write up on the &lt;a href=&quot;http://www.boost.org/&quot;&gt;Boost library's&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0/libs/smart_ptr/smart_ptr.htm&quot;&gt;Smart Pointers&lt;/a&gt;&amp;nbsp;and when they should and shouldn't be used. I'd hope to use this post in future (if the knowledge doesn't stick in my head) as a rough guide when finding the right tool for the job.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For the uninitiated, I strongly advise that you go through the &lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0/libs/smart_ptr/smart_ptr.htm&quot;&gt;smart pointer&lt;/a&gt;&amp;nbsp;documentation on the Boost website as it's a real eye-opener as to just how hands-off you can now be with dynamic memory allocation in C++ (these days).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Why use Smart Pointers?&lt;/h3&gt;&lt;div&gt;Smart pointers will help you manage the lifetime of your objects. It will force you to think about the ownership of these pointers and who's currently &quot;in-charge&quot; in some cases. They will allow you to think in terms of observation of objects so that you don't disturb the ownership of a resource and they just generally make your code cleaner, easier to maintain and read.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;How can I start using Smart Pointers?&lt;/h3&gt;&lt;div&gt;&lt;a href=&quot;http://www.boost.org/users/download/&quot;&gt;Get Boost!&lt;/a&gt;&amp;nbsp;That's going to be the best way. Dive right in, take a look at samples, set things up, blow them up - be a scientist about it!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Anyway, enough of this! On to the pointers.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0/libs/smart_ptr/scoped_ptr.htm&quot;&gt;scoped_ptr&lt;/a&gt;&amp;nbsp;&amp;amp; &lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0/libs/smart_ptr/scoped_array.htm&quot;&gt;scoped_array&lt;/a&gt;&lt;/h3&gt;&lt;div&gt;scoped_ptr is all about ensuring that the pointer that you're working with is the ultimate owner of the resource that it points to. There's no facility within this pointer type to transfer the ownership of the inner resource elsewhere. With all of this in mind, scoped_ptr ensures that the resource that is under ownership will be destroyed properly once the pointer has dropped out of scope.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;scoped_ptr is a very lightweight resource. It's by no means going to harm the performance or size of your application.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;scoped_array will perform the same service as scoped_ptr does, it's just that scoped_array will work on array types (as the name suggests).&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0/libs/smart_ptr/shared_ptr.htm&quot;&gt;shared_ptr&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0/libs/smart_ptr/shared_array.htm&quot;&gt;shared_array&lt;/a&gt;&lt;/h3&gt;&lt;div&gt;shared_ptr is all about reference counting. They will internally manage the reference count that they have and govern the managed resource's lifespan based on this. The clear advantage that they have over the scoped_ptr and scoped_array counterparts is their ability to be shared between multiple owner so that those owners can maintain their interest in the object by &quot;hanging around&quot;.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The true power of this class of pointer is when you don't know when to delete the underlying resource. As long as someone is referencing you, you'll stay alive.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;shared_array will perform the same service as shared_ptr does, it's just that shared_array will work on array types (deja vu anyone?)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0/libs/smart_ptr/intrusive_ptr.html&quot;&gt;intrusive_ptr&lt;/a&gt;&lt;/h3&gt;&lt;div&gt;The intrusive_ptr is another reference counting pointer only is allows you to provide your own mechanism for performing the reference counting. This means if you have an existing codebase that does all of this work for you, all you need to do is provide it to an intrusive_ptr. intrusive_ptr also allows for native usage of the &quot;this&quot; keyword.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0/libs/smart_ptr/weak_ptr.htm&quot;&gt;weak_ptr&lt;/a&gt;&lt;/h3&gt;&lt;div&gt;A weak_ptr just performs observation on a shared_ptr without getting its hands into ownership. It's used purely at an observation capacity.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Conclusion&lt;/h3&gt;&lt;div&gt;That's it for a brief smart pointer analysis. Hopefully these tid-bits will help you decide which pointer fits your problem best.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Os Kernel Development The Bootloader</title>
   <link href="http://tuttlem.github.io/2013/01/04/os-kernel-development-the-bootloader/"/>
   <updated>2013-01-04T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/04/os-kernel-development-the-bootloader</id>
   <content type="html">&lt;h1&gt;Os Kernel Development The Bootloader&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;The first step in the execution process (once the machine has finished its PowerOnStartTest boot) is the loading and execution of a small program called the bootloader. It's responsible for getting enough logic into the computers memory to get your operating system started.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Today's post will focus on this bootloader program and getting you over into C land where you can complete the majority of your operating system.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As I'd described in the&amp;nbsp;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/12/os-kernel-development-environment.html&quot;&gt;first post&lt;/a&gt; of this series, I'll be making some assumptions on the directions of the operating system's tools. Some assumptions that will that has some serious implications in the development of the bootloader are:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Will the bootloader support a multi-boot loader?&lt;br /&gt;&lt;i&gt;Yes. We'll be using GRUB.&lt;/i&gt;&lt;/li&gt;&lt;li&gt;What platform will we assume that we're on?&lt;br /&gt;&lt;i&gt;This is important because the bootloader must be written in the platform's native instruction set to do anything of value. We'll be assuming the intel platform.&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Bootloader execution&lt;/h3&gt;&lt;div&gt;Shortly after your IBM-PC compatible computer starts, it's starts in real mode. You can find out more information about the booting process from &lt;a href=&quot;http://en.wikipedia.org/wiki/Booting#Boot_sequence_of_IBM-PC_compatibles&quot;&gt;this article&lt;/a&gt;&amp;nbsp;as it will take you through the particulars. We're using GRUB so we're abstracted away from a lot of these details. The floppy disk image will have GRUB configured to run our kernel.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;First up, we need to make a few items visible to the linker and let our loader know that the main routine is &quot;somewhere else&quot;.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4449471.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&quot;loader&quot; is our bootloader's entry point to start executing, &quot;magic&quot; is a special number that our multi-boot loader will look out for, &quot;mbd&quot; is a pointer to a special structure containing multi-boot information that can give your kernel context of its execution and &quot;kmain&quot; is our external kernel code (that will be implemented in C).&lt;br /&gt;&lt;br /&gt;Next up, we'll look at the code that's executing.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4449491.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;First job is to setup a stackframe. This is done by pre-allocating some space within this module. All were doing is just pushing &quot;esp&quot; by the location of the pre-allocated stack page with an offset of a pre-determined size.&lt;br /&gt;&lt;br /&gt;Some assumptions are made when GRUB hands control over to our bootloader. For instance, eax will hold the multi-boot magic number and ebx will hold the multiboot structure. These are saved off into the linker visible locations &quot;magic&quot; and &quot;mbd&quot;&amp;nbsp;respectively. Finally we call &quot;kmain&quot; to get the party started.&lt;br /&gt;&lt;br /&gt;It's assumed that the kernel will never return, so we put a halt loop at the end of it just to we don't go running off into memory executing every instruction known to mankind.&lt;br /&gt;&lt;h3&gt;The birth of the Kernel&lt;/h3&gt;The most important part to take note of is that we're now in C land. This is quite a simple routine (for the time being) taking the following form.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4449518.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Excellent, well, non-functional, but we're here. You can see that we're given access to the &quot;magic&quot; and &quot;mbd&quot; values that we were playing around with in the boot loader. The all important magic number test will determine if we've legitimately come from GRUB.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Linking it all together&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;We've got a partially complex job now of making sure the gobs of binary that are produced when building these files are put in place correctly for us to execute.&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;We provide gcc during the compilation process with the following flags to make sure the binary produced is as plain-jane as possible.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;-Wall          (all warnings)&lt;br /&gt;-Wextra        (enable extra warning flags)&lt;br /&gt;-nostdlib      (do not use the standard libraries during linking)&lt;br /&gt;-nostartfiles&lt;br /&gt;-nodefaultlibs&lt;br /&gt;-fno-builtin   (turn off builtin prefix functions)&lt;br /&gt;-m32           (generate 32bit code)&lt;/pre&gt;&lt;br /&gt;The linker script is all that is left to describe to the preparation process on how to put our kernel together. Here's how it looks.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4449589.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Reading this from top to bottom you can see that we're defining our entry point as &quot;loader&quot; (you would have seen that in the bootloader assembly above). We're aligning all of our sections (text, rodata and data) on 4096 (0x1000) byte boundaries. We have a base address (where the code will be loaded) of 0x00100000 as well as stack placement. There are great articles all over the web on the topic of linking, my&amp;nbsp;favorite&amp;nbsp;&lt;a href=&quot;http://www.lurklurk.org/linkers/linkers.html&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;That's it. This is the bootloader handoff from GRUB in a nutshell (a largish nutshell). Check out &lt;a href=&quot;https://github.com/tuttlem/phoenix&quot;&gt;Phoenix&lt;/a&gt;&amp;nbsp;in my GitHub&amp;nbsp;repository&amp;nbsp;for the full source.&lt;br /&gt;&lt;br /&gt;For some even more advanced information check out this tutorial on &lt;a href=&quot;http://www.jamesmolloy.co.uk/tutorial_html/&quot;&gt;Rolling Your Own Unix Clone&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A brief MapReduce tutorial for MongoDB</title>
   <link href="http://tuttlem.github.io/2013/01/03/a-brief-mapreduce-tutorial-for-mongodb/"/>
   <updated>2013-01-03T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/03/a-brief-mapreduce-tutorial-for-mongodb</id>
   <content type="html">&lt;h1&gt;A brief MapReduce tutorial for MongoDB&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;This is just a short tutorial on using the &lt;a href=&quot;http://www.mongodb.org/display/DOCS/MapReduce&quot;&gt;MapReduce&lt;/a&gt; operation from within the &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt; environment.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What is it and how does it work?&lt;/h3&gt;&lt;div&gt;MapReduce is a database operation. Its intended for performing higher-level (or more complex) aggregation tasks across huge data stores. You supply it with two functions, a map function and a reduce function and it will supply you with the aggregated result.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As it's defined from the MongoDB documentation, the operation takes the following form:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:js&quot;&gt;db.collection.mapReduce(&lt;br /&gt;                         &amp;lt;mapfunction&amp;gt;,&lt;br /&gt;                         &amp;lt;reducefunction&amp;gt;,&lt;br /&gt;                         {&lt;br /&gt;                           out: &amp;lt;collection&amp;gt;,&lt;br /&gt;                           query: &amp;lt;document&amp;gt;,&lt;br /&gt;                           sort: &amp;lt;document&amp;gt;,&lt;br /&gt;                           limit: &amp;lt;number&amp;gt;,&lt;br /&gt;                           finalize: &amp;lt;function&amp;gt;,&lt;br /&gt;                           scope: &amp;lt;document&amp;gt;,&lt;br /&gt;                           jsMode: &amp;lt;boolean&amp;gt;,&lt;br /&gt;                           verbose: &amp;lt;boolean&amp;gt;&lt;br /&gt;                         }&lt;br /&gt;                       )&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;You can immediately see the first two parameters to this operation as the map function and the reduce function. The remaining parameter is focused on the delivery of the result back to you.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;The Map Function&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The map function is responsible for defining the data that you want to work with. For instance, if you're interested in accumulating the sum of all products sold by their category you will want to return both the amount sold per line item as well as the product's category.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:js&quot;&gt;var mapFunction = function() {&lt;br /&gt;    emit(this.category, this.price);&lt;br /&gt;};&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Note the use of the emit function. Its use tells the MapReduce operation that the key for this process will be &quot;category&quot; and the value will be &quot;price&quot;. The value part of the emit function can also take form of a javascript object itself should you need to perform multiple aggregations across the same data set.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:js&quot;&gt;var mapFunction = function() {&lt;br /&gt;    emit(this.category, { price: this.price, count: 1 });&lt;br /&gt;};&lt;/pre&gt;&lt;br /&gt;This particular map function gives us a count of 1 per result that comes out so we would be able to not only sum the price but find out how many items made up the sum as well.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;The Reduce Function&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The reduce function is responsible for performing the aggregation on the data emitted by the map function. It is passed the key-values emitted by the map function as parameters to it. Performing the reduce function to get the sum of all prices and the number of items making up the sum total would look like this.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:js&quot;&gt;var reduceFunction = function(key, values) {&lt;br /&gt;    outValue = { total: 0, count: 0 };&lt;br /&gt;    &lt;br /&gt;    // aggregate all of the values for this key&lt;br /&gt;    for (var i = 0; i &amp;lt; values.length; i ++) {&lt;br /&gt;        outValue.total += values[i].price;&lt;br /&gt;        outValue.count += values[i].count; &lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    return outValue;&lt;br /&gt;};&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;All of the &quot;magic&quot; happens via-javascript. Pretty easy really.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Getting a result&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Putting your map and reduce function together for the operation ends up looking like this (for a simple scenario).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:js&quot;&gt;var res = db.sales.mapReduce(&lt;br /&gt;    mapFunction, &lt;br /&gt;    reduceFunction, &lt;br /&gt;    { &lt;br /&gt;        out: &quot;result&quot; &lt;br /&gt;    }&lt;br /&gt;);&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;This will get the process underway against the database. Once it's finished doing the hard-yards, then you can start basing your aggregation reports off of the &quot;res&quot; variable that we built just above by doing the following.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:js&quot;&gt;db[res.result].find();&lt;/pre&gt;&lt;br /&gt;This is only a &quot;scratch-the-surface&quot; - &quot;know enough to be dangerous&quot; type write-up. MapReduce is a complex and powerful tool that you should be reading the official documentation about if you want to achieve ninja-like status.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>OpenGL, GLUT & Haskell</title>
   <link href="http://tuttlem.github.io/2013/01/02/opengl-glut-haskell/"/>
   <updated>2013-01-02T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/02/opengl-glut-haskell</id>
   <content type="html">&lt;h1&gt;OpenGL, GLUT &amp; Haskell&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;We're into some of the real good stuff here. One of my favourite topics in computer programming is graphics (2d and 3d). In this post, I get to make a start on some fun stuff and learn some Haskell at the same time.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We're going to open an OpenGL window, clear the back buffer out and flip.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-P3UGaGgWX0c/UOQmSYep7wI/AAAAAAAAAkQ/Bfl8-egapPc/s1600/Screen+Shot+2013-01-02+at+10.20.45+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;400&quot; src=&quot;http://1.bp.blogspot.com/-P3UGaGgWX0c/UOQmSYep7wI/AAAAAAAAAkQ/Bfl8-egapPc/s400/Screen+Shot+2013-01-02+at+10.20.45+PM.png&quot; width=&quot;378&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;The code&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4434168.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;br /&gt;Ok, ok, fair enough - this is almost a direct-rip from the &lt;a href=&quot;http://www.haskell.org/haskellwiki/OpenGLTutorial1&quot;&gt;Haskell Wiki&lt;/a&gt;, I'm not claiming it as my code. It's more of a bookmark as a good foot-hold in the OpenGL-Haskell marriage!&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Compilation&lt;/h3&gt;&lt;div&gt;Getting your application compiled is cake, just make sure you specify GLUT as a package.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;$ ghc -package GLUT Ogl.hs -o Ogl&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;That's what it's all about!&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Learn you a Haskell Brisbane Study Group</title>
   <link href="http://tuttlem.github.io/2013/01/02/learn-you-a-haskell-brisbane-study-group/"/>
   <updated>2013-01-02T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/02/learn-you-a-haskell-brisbane-study-group</id>
   <content type="html">&lt;h1&gt;Learn you a Haskell Brisbane Study Group&lt;/h1&gt;
&lt;div class='post'&gt;
As a bit of a bookmark to myself, I wanted to make mention of a study group that an &lt;a href=&quot;http://morenews.blogspot.com.au/&quot;&gt;old colleague&lt;/a&gt;&amp;nbsp;had brought to my attention.&lt;br /&gt;&lt;br /&gt;The &lt;a href=&quot;https://github.com/learnhaskell-brisbane/learn/wiki&quot;&gt;wiki&lt;/a&gt;&amp;nbsp;that has been put up for this project has been a great source of home-work as I've gone through the book. I haven't yet made it to the end of the book but am working on it. It's been important for me to have some home work to do on this topic as I don't write Haskell professionally. Without something flexing my Haskell muscles, the knowledge tends to go on holiday rather quickly.&lt;br /&gt;&lt;br /&gt;The &lt;a href=&quot;https://github.com/learnhaskell-brisbane/learn&quot;&gt;learn repository&lt;/a&gt;&amp;nbsp;has all of the source code and documents for the course.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Derived Instances for Types in Haskell</title>
   <link href="http://tuttlem.github.io/2013/01/02/derived-instances-for-types-in-haskell/"/>
   <updated>2013-01-02T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2013/01/02/derived-instances-for-types-in-haskell</id>
   <content type="html">&lt;h1&gt;Derived Instances for Types in Haskell&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;When constructing your own types in Haskell, you can make your type support a particular&amp;nbsp;behavior&amp;nbsp;by making it an instance of the&amp;nbsp;behavioral&amp;nbsp;type class required. I'll walk through each of these derivable&amp;nbsp;behaviours and how they can help.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/h3&gt;Eq gives your type a sense of equality amongst values of the same type. It allows you to use the &quot;==&quot; operator as it was intended, returning you a boolean.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4433571.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;From now on, the &quot;==&quot; operator will do a comparison on the contents of the three strings in the Employee record for us.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/h3&gt;In my personal experience when defining types, I would be out of my mind not to make them derive &quot;Show&quot;. &quot;Show&quot; allows a value of your type to be put into string format - very useful for debug situations.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4433617.js&quot;&gt;&lt;/script&gt; Just for the printing value, you can see how &quot;Show&quot; is worth its weight in gold.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/h3&gt;&quot;Read&quot; provides the reverse-service of what &quot;Show&quot; does. You'll be able to take a type in its serialized format and re-construct a type from it. Again, rather useful in debug situations.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4433642.js&quot;&gt;&lt;/script&gt; I've also used this to do user-input rather cheaply. Probably not quite a &quot;production solution&quot; though having your users enter type data directly.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/h3&gt;&quot;Ord&quot; gives your value order. Once you apply &quot;Ord&quot; you can sort or use operators like &quot;&amp;gt;&quot;, &quot;&amp;lt;&quot;, &quot;&amp;gt;=&quot;, &amp;nbsp;&quot;&amp;lt;=&quot;.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4433758.js&quot;&gt;&lt;/script&gt; Quite useful for when you need to do these sorts of comparisons.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/h3&gt;&lt;div&gt;&quot;Bounded&quot; will give your type a sense of the lowest and highest values achievable. You'll be able to ask questions of the type to see what these corresponding values are.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src=&quot;https://gist.github.com/4433847.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;h3&gt;&lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/h3&gt;&lt;div&gt;&quot;Enum&quot; will give your type a sense of the predecessor and successor values. This is most important when dealing with ranges in using your type. Take a look at the following deck assembly. Without &quot;Bounded&quot; the list comprehensions would not be possible and this code would be a lot more verbose.&lt;/div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4433859.js&quot;&gt;&lt;/script&gt; That's derived instances for you anyway. They're a great help when constructing your own types in Haskell.&lt;br /&gt;&lt;br /&gt;I think an important follow up to this blog post is being able to use these classes in conjunction with the &lt;a href=&quot;http://www.haskell.org/haskellwiki/Keywords#instance&quot;&gt;instance&lt;/a&gt;&amp;nbsp;keyword so that we can supply the implementation to the definition.&lt;br /&gt;&lt;br /&gt;Using the card example, we could supply an Eq and Show instance as follows.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4438758.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;You can see here that it's quite counter-productive to supply our own Eq implementation, but if we did have some funky rules on how we wanted equality operators to work it would be worth it. In the show implementation, I've tried to make the suits read a little more humanly. Around the card table, you would normally hear someone say &quot;Do you have a 2 of clubs?&quot; rather than &quot;Do you have a 2 of club?&quot;. The trailing &quot;s&quot; has been added in the show implementation. Neat.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/h3&gt;&lt;div&gt;&quot;Functor&quot; is applied to wrapper types. You'll commonly see examples used with Maybe. You'll use &quot;Functor&quot; when ever you need to supply an &lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap&quot;&gt;fmap&lt;/a&gt;&amp;nbsp;implementation. Here is a simple example that creates a wrapper data type.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4440349.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&quot;Functor&quot; is useful for types that contain something, Lists, Maps, etc.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Scanning in Haskell</title>
   <link href="http://tuttlem.github.io/2012/12/31/scanning-in-haskell/"/>
   <updated>2012-12-31T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/31/scanning-in-haskell</id>
   <content type="html">&lt;h1&gt;Scanning in Haskell&lt;/h1&gt;
&lt;div class='post'&gt;
In a previous post, I had written about &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/12/folding-in-haskell.html&quot;&gt;Folding in Haskell&lt;/a&gt;&amp;nbsp;which in itself is a very powerful tool. We spent a brief moment in that tutorial actually working through a problem and writing the folding process out long hand.&lt;br /&gt;&lt;br /&gt;Well, scanning (&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:scanl&quot;&gt;scanl&lt;/a&gt; and &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:scanr&quot;&gt;scanr&lt;/a&gt;) does this for you! It shows you the reduction steps in the form of an array returned back to you.&lt;br /&gt;&lt;br /&gt;A quick example:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;Prelude&amp;gt; scanl (*) 5 [1,2,3,4]&lt;br /&gt;[5,5,10,30,120]&lt;br /&gt;Prelude&amp;gt; foldl (*) 5 [1,2,3,4]&lt;br /&gt;120&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Here you can see the fold's process &quot;working-sheet&quot;.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;5  * 1 = 5&lt;br /&gt;5  * 2 = 10&lt;br /&gt;10 * 3 = 30&lt;br /&gt;30 * 4 = 120&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;120 being the overall answer as demonstrated by the foldl call above.&lt;br /&gt;&lt;br /&gt;Easy.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Pygame, Virtualenv, PIP & Homebrew</title>
   <link href="http://tuttlem.github.io/2012/12/31/pygame-virtualenv-pip-homebrew/"/>
   <updated>2012-12-31T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/31/pygame-virtualenv-pip-homebrew</id>
   <content type="html">&lt;h1&gt;Pygame, Virtualenv, PIP &amp; Homebrew&lt;/h1&gt;
&lt;div class='post'&gt;
I finally just got an installation up and running on my MBP for pygame inside of virtualenv. It took a little bit of investigation, but the following should get anyone out of the installation rut (if they're interested in keeping their environments isolated).&lt;br /&gt;&lt;br /&gt;First, all of your SDL stuff should be installed before going any further. If it's not, it's as easy as this from the command shell.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;$ brew install sdl sdl_image sdl_mixer sdl_ttf smpeg portmidi&lt;/pre&gt;&lt;br /&gt;You're almost done. Create your virtual environment and switch into it. Once you've done that, you just need to issue the following and you're done.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;$ pip install hg+http://bitbucket.org/pygame/pygame&lt;/pre&gt;&lt;br /&gt;That will grind away and before you know it, you're ready to go.&lt;br /&gt;&lt;br /&gt;Then it's onto reading &lt;a href=&quot;http://thepythongamebook.com/en:pygame:step000&quot;&gt;The Python Game Book&lt;/a&gt;, &lt;a href=&quot;http://www.pygame.org/docs/tut/chimp/ChimpLineByLine.html&quot;&gt;The Line-by-Line Chimp Example&lt;/a&gt;&amp;nbsp;and any other tutorials you can &lt;a href=&quot;http://www.pygame.org/wiki/tutorials&quot;&gt;get your hands on&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Os Kernel Development User Mode</title>
   <link href="http://tuttlem.github.io/2012/12/31/os-kernel-development-user-mode/"/>
   <updated>2012-12-31T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/31/os-kernel-development-user-mode</id>
   <content type="html">&lt;h1&gt;Os Kernel Development User Mode&lt;/h1&gt;
&lt;div class='post'&gt;
http://www.jamesmolloy.co.uk/tutorial_html/10.-User%20Mode.html&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Os Kernel Development Pit</title>
   <link href="http://tuttlem.github.io/2012/12/31/os-kernel-development-pit/"/>
   <updated>2012-12-31T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/31/os-kernel-development-pit</id>
   <content type="html">&lt;h1&gt;Os Kernel Development Pit&lt;/h1&gt;
&lt;div class='post'&gt;
http://www.jamesmolloy.co.uk/tutorial_html/5.-IRQs%20and%20the%20PIT.html&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Os Kernel Development Multitasking</title>
   <link href="http://tuttlem.github.io/2012/12/31/os-kernel-development-multitasking/"/>
   <updated>2012-12-31T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/31/os-kernel-development-multitasking</id>
   <content type="html">&lt;h1&gt;Os Kernel Development Multitasking&lt;/h1&gt;
&lt;div class='post'&gt;
http://www.jamesmolloy.co.uk/tutorial_html/9.-Multitasking.html&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Os Kernel Development Memory And Paging</title>
   <link href="http://tuttlem.github.io/2012/12/31/os-kernel-development-memory-and-paging/"/>
   <updated>2012-12-31T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/31/os-kernel-development-memory-and-paging</id>
   <content type="html">&lt;h1&gt;Os Kernel Development Memory And Paging&lt;/h1&gt;
&lt;div class='post'&gt;
http://www.jamesmolloy.co.uk/tutorial_html/6.-Paging.html&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Os Kernel Development Irqs</title>
   <link href="http://tuttlem.github.io/2012/12/31/os-kernel-development-irqs/"/>
   <updated>2012-12-31T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/31/os-kernel-development-irqs</id>
   <content type="html">&lt;h1&gt;Os Kernel Development Irqs&lt;/h1&gt;
&lt;div class='post'&gt;
http://www.jamesmolloy.co.uk/tutorial_html/5.-IRQs%20and%20the%20PIT.html&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Os Kernel Development Heap Memory</title>
   <link href="http://tuttlem.github.io/2012/12/31/os-kernel-development-heap-memory/"/>
   <updated>2012-12-31T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/31/os-kernel-development-heap-memory</id>
   <content type="html">&lt;h1&gt;Os Kernel Development Heap Memory&lt;/h1&gt;
&lt;div class='post'&gt;
http://www.jamesmolloy.co.uk/tutorial_html/7.-The%20Heap.html&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Os Kernel Development Gdt And Idt</title>
   <link href="http://tuttlem.github.io/2012/12/31/os-kernel-development-gdt-and-idt/"/>
   <updated>2012-12-31T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/31/os-kernel-development-gdt-and-idt</id>
   <content type="html">&lt;h1&gt;Os Kernel Development Gdt And Idt&lt;/h1&gt;
&lt;div class='post'&gt;
http://www.jamesmolloy.co.uk/tutorial_html/4.-The%20GDT%20and%20IDT.html&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Os Kernel Development Filesystems</title>
   <link href="http://tuttlem.github.io/2012/12/31/os-kernel-development-filesystems/"/>
   <updated>2012-12-31T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/31/os-kernel-development-filesystems</id>
   <content type="html">&lt;h1&gt;Os Kernel Development Filesystems&lt;/h1&gt;
&lt;div class='post'&gt;
http://www.jamesmolloy.co.uk/tutorial_html/8.-The%20VFS%20and%20the%20initrd.html&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Os Kernel Development Environment</title>
   <link href="http://tuttlem.github.io/2012/12/31/os-kernel-development-environment/"/>
   <updated>2012-12-31T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/31/os-kernel-development-environment</id>
   <content type="html">&lt;h1&gt;Os Kernel Development Environment&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;I'm working on an operating system at the moment just for a bit of fun to fill in some of the gaps when I find them. It's in no way a competitor to the &lt;a href=&quot;http://kernel.org/&quot;&gt;big&lt;/a&gt; &lt;a href=&quot;https://lists.apple.com/mailman/listinfo/darwin-kernel&quot;&gt;boys&lt;/a&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Windows_kernel&quot;&gt;in&lt;/a&gt; &lt;a href=&quot;http://www.freebsd.org/cgi/cvsweb.cgi/&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/IBM_AIX&quot;&gt;market&lt;/a&gt;, it's just a sandbox that I can try stuff out in, blow stuff up, you get the picture.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So, I thought I might post of my journey through the OS kernel development rabbit-hole and see where it takes us. The first post, I'd like to talk about setting up a development environment that makes it a piece of cake to make changes to your source and test your changes rapidly.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;At any time, you can pull down the code for the progress that I've made so far in my github repository &lt;a href=&quot;https://github.com/tuttlem/phoenix&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Assumptions&lt;/h3&gt;&lt;div&gt;Unless you're interested in getting nowhere fast - some assumptions have to be made. This is a very complex development and testing process so in the interest of maintaining the hair on your head you have to pick some technologies.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Development of this operating system is done on any POSIX style OS.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Rather than writing a bootloader of my own, I've made this project follow the multi-boot standard and it'll boot through grub.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;With this said, to begin with you'll need to prepare yourself a floppy disk image with grub installed. There are &lt;a href=&quot;https://help.ubuntu.com/community/GrubHowto/BootFloppy&quot;&gt;plenty&lt;/a&gt;&amp;nbsp;of &lt;a href=&quot;http://wiki.osdev.org/Disk_Images&quot;&gt;resources&lt;/a&gt; &lt;a href=&quot;http://cstein.kings.cam.ac.uk/~chris/bootgrub.html&quot;&gt;around&lt;/a&gt; the &lt;a href=&quot;http://orgs.man.ac.uk/documentation/grub/grub_3.html&quot;&gt;web&lt;/a&gt; that you can follow to get this accomplished. If you are really struggling though, I have a floppy.img file sitting in the bin folder of phoenix&amp;nbsp;&lt;a href=&quot;https://github.com/tuttlem/phoenix&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Virtualise!&lt;/h3&gt;&lt;div&gt;I don't have spare computer around to test my OS on every time.. well, that's actually a big-fat-lie. I've got heaps of computers around here that I could test my code on, but I just couldn't be bothered. I'm much prefer to manage the process virtually using the free virtual machine manager &lt;a href=&quot;http://bochs.sourceforge.net/&quot;&gt;Bochs&lt;/a&gt;.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If you setup your build script right, you'll be able to compile your kernel and add it to the boot floppy ready for grub to execute. All you really need to do is run Bochs to check out the results.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;You can use the following to add a kernel image to the grub floppy.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell&quot;&gt;#!/bin/bash&lt;br /&gt;&lt;br /&gt;sudo losetup /dev/loop0 floppy.img&lt;br /&gt;sudo mount /dev/loop0 /mnt&lt;br /&gt;sudo cp kernel /mnt/kernel&lt;br /&gt;sudo umount /dev/loop0&lt;br /&gt;sudo losetup -d /dev/loop0&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Actually getting the image in there is quite easy. You'll also need a bochs configuration file to look like this as follows.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;boot: floppy&lt;br /&gt;floppya: 1_44=&quot;bin/floppy.img&quot;, status=inserted&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Alright, I've left you here in a pretty inconsistent state. You've got the environment, but nothing to do in it just yet. In my next tutorial, I'll walk you though the boot code and making it over into C land!&lt;br /&gt;&lt;br /&gt;Stay tuned.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Hoogle</title>
   <link href="http://tuttlem.github.io/2012/12/31/hoogle/"/>
   <updated>2012-12-31T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/31/hoogle</id>
   <content type="html">&lt;h1&gt;Hoogle&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;br /&gt;I needed to make a note of this particular link. Hoogle is a search engine for looking up API calls and modules. It's quite a neat search engine.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://www.haskell.org/hoogle/&quot;&gt;http://www.haskell.org/hoogle/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;HackageDB is also a great resource for looking at Haskell packages in cabal format.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://hackage.haskell.org/packages/hackage.html&quot;&gt;http://hackage.haskell.org/packages/hackage.html&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Haskell's Function Application Operator ($)</title>
   <link href="http://tuttlem.github.io/2012/12/31/haskell-s-function-application-operator/"/>
   <updated>2012-12-31T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/31/haskell-s-function-application-operator</id>
   <content type="html">&lt;h1&gt;Haskell's Function Application Operator ($)&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;br /&gt;Sometimes, Haskell's syntax is so alien to read (to my eyes at least anyway). I've seen wide-spread use of the &quot;$&quot; operator all over lots of people's code and never really had a grasp on what it is/does.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In the end, it's really quite simple.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The whitespace character has a very high precedence order, so when you're using spaces the precedence order looks like this.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre&gt;f a b c = ((f a) b) c&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This is classified as being left-associative. In contrast, using the &quot;$&quot; operator allows us to be right-associative. An example.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;f $ a $ b $ c = f (a (b c))&lt;/pre&gt;&lt;br /&gt;Looking at this, it's starting to look very much how our programming languages are structured with function calls. We're very right-associative. Because Haskell uses the white space character to denote left-associations, it takes a lot of parenthesis to make a complex state right-associative as you need to change the precedence order by hand.&lt;br /&gt;&lt;br /&gt;This is the true power of the &quot;$&quot; function. We can use the &quot;$&quot; to free us for parenthesising everything, so that a transformation as below occurs.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;putStrLn (show num) &lt;br /&gt;putStrLn $ show num&lt;/pre&gt;&lt;br /&gt;This simple scenario doesn't illustrate exactly how much the &quot;$&quot; operator will help us out. Here's another slightly more complex scenario. It becomes clear here that &quot;$&quot; is working to make our code more readable.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;sum (take 10 (cycle [1,2,3]))&lt;br /&gt;sum $ take 10 $ cycle [1,2,3]&lt;/pre&gt;&lt;br /&gt;In character-space length they're equivalent, but the second version looks less LISP-y. I guess this is what was being aimed at.&lt;br /&gt;&lt;br /&gt;Anyway, until next time.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>24 days of Hackage</title>
   <link href="http://tuttlem.github.io/2012/12/31/24-days-of-hackage/"/>
   <updated>2012-12-31T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/31/24-days-of-hackage</id>
   <content type="html">&lt;h1&gt;24 days of Hackage&lt;/h1&gt;
&lt;div class='post'&gt;
As I can, I've been following along in the 24 days of Hackage series. I'd see the posts come across my desk from proggit.&lt;br /&gt;&lt;br /&gt;The articles I have read have been very interesting and I want to go through the rest.&lt;br /&gt;&lt;br /&gt;Check it out.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://ocharles.org.uk/blog/&quot;&gt;http://ocharles.org.uk/blog/&lt;/a&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unit Testing with QuickCheck</title>
   <link href="http://tuttlem.github.io/2012/12/30/unit-testing-with-quickcheck/"/>
   <updated>2012-12-30T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/30/unit-testing-with-quickcheck</id>
   <content type="html">&lt;h1&gt;Unit Testing with QuickCheck&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Seems I'm forever making card games &lt;i&gt;in Haskell&lt;/i&gt;, so it only seemed right that I try and make a library of routines and data types that will get me going quicker. Don't get me wrong, I intend on doing something serious with Haskell one day - I just seriously lack the chops to do so right now.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As with any development process, you as a developer should write unit tests. Not only is it good practice but it also gives you a repeatable base of executions to assure you that the last change you put in won't break your masterpiece.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Today I want to talk about the &lt;a href=&quot;http://en.wikipedia.org/wiki/QuickCheck&quot;&gt;QuickCheck&lt;/a&gt; unit testing library for Haskell.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What are we testing?&lt;/h3&gt;&lt;div&gt;To give you an idea of the playing field we're on, I'll just post some of the simple routines that I have done so far. First up is the data types that will help us represent a single playing card.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4412543.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A card has a suit and a value. Pretty straight forward. I could have made a type that wrapped an array of the Card type and called it &quot;Deck&quot;, but I'm happy just handling an array of Card. Now to build a deck and to shuffle it!&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4412555.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;When a deck is built with &quot;makeDeck&quot; the cards are ordered just like they are when you open a fresh deck of cards, so we need to shuffle them in order to make this game any fun! &quot;seedCards&quot; assigns a random value to each card that it is passed and then &quot;makeShuffledDeck&quot; saves the day by ordering by this random seed to give a shuffled deck.&lt;br /&gt;&lt;br /&gt;That's all pretty simple still and that's where the &quot;testable&quot; parts stop. So, still the question: what are we testing? Well, I'm sure there are plenty of other scenarios, but for today's purposes we'll test the following:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Are there 52 cards in a deck made by &quot;makeDeck&quot;&lt;/li&gt;&lt;li&gt;Are there still 52 cards in a deck after they've been processed by &quot;makeShuffledDeck&quot;&lt;/li&gt;&lt;li&gt;Is the deck made by &quot;makeDeck&quot; not in the same order as the deck made by &quot;makeShuffledDeck&quot;?&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Great. With these three scenarios in mind, here's how easy it is to assert these facts using QuickCheck.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4412589.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;As it should be, these tests read rather humanly. And after running this suite of tests we end up with the following results:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;+++ OK, passed 1 tests.&lt;br /&gt;+++ OK, passed 100 tests.&lt;br /&gt;+++ OK, passed 100 tests.&lt;/pre&gt;&lt;br /&gt;Hold on! 100 tests? We only defined 3 tests though. How can this be? You'll see that for the second and third tests actually have an anonymous function passed to them. Because both of these depend on a random number generator (to shuffle the deck), I've passed in &lt;a href=&quot;http://hackage.haskell.org/packages/archive/random/latest/doc/html/System-Random.html#v:mkStdGen&quot;&gt;mkStdGen&lt;/a&gt;'s integer that it maps to a generator from the function's parameter list.&lt;br /&gt;&lt;br /&gt;QuickCheck grabbed hold of this and rather than just running 1 test, it went ahead and gave the anonymous function 100 random values. That's much better coverage for what is seemingly the cost of defining the test as an anonymous method.&lt;br /&gt;&lt;br /&gt;Immediately you can see the power of unit testing with such a simple framework and how you can be productive relatively quickly.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Blurring the lines between Haskell and C</title>
   <link href="http://tuttlem.github.io/2012/12/30/blurring-the-lines-between-haskell-and-c/"/>
   <updated>2012-12-30T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/30/blurring-the-lines-between-haskell-and-c</id>
   <content type="html">&lt;h1&gt;Blurring the lines between Haskell and C&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Being able to use parts of code that you have written in different languages in your environment of choice is a great productivity booster. For those particular problems you can really pick the tool that you need.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Haskell and C are no exception to this. The Haskell website has a &lt;a href=&quot;http://www.haskell.org/haskellwiki/Calling_Haskell_from_C&quot;&gt;great little write-up&lt;/a&gt; on the topic. In today's post, I'm going to run you through the steps that I followed to get this running.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Write your Haskell&lt;/h3&gt;&lt;div&gt;The compilation process depends on your Haskell code being written first as GHC will generate some stub code for you.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here's a very simple and crude prime number tester:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4410052.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Ignoring my method of primes testing, you can see some interesting pieces in this Haskell source. On the first line we're enabling a GHC extension for the ForeignFucntionInterface. This allows us to export symbols to other languages. We have our implementation actually in the function &quot;is_prime&quot; with &quot;is_prime_hs&quot; being the callable wrapper from outside, in this case C. The last line actually exports our wrapper as a callable function.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Haskell compilation&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;You've got your Haskell module ready for compilation, but it's going to be a little bit different. This source is supporting another application rather than containing a main function of its own.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre&gt;$ ghc -c -O prime.hs&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;This command will compile our file only &quot;-c&quot; and optimise &quot;-O&quot;. A stub header file is generated for us (thanks to our FFI instructions on the first line of our Haskell file) that we can include in our main program.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Write your C&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;It's now time to call our prime function. There is a little bit of administration &quot;fluff&quot; that we have to go through in order to get there, but it's really not much to worry about. Take note that we're including our stub header file that was generated for us in our Haskell compilation step.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4410375.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So that's pretty straight-forward C code in the end. It's a little awkward at first to look at the #define rigmarole at the top of the file, but you'll soon see straight past it.&lt;br /&gt;&lt;br /&gt;You can see at the top of the file that we've got an external symbol representing the module, &quot;Primes&quot;. This is used as a secondary initialisation step after we start up FFI (with hs_init). The call to hs_add_root is the extra initialisation required (per module we import - &lt;a href=&quot;http://hackage.haskell.org/trac/ghc/ticket/3252&quot;&gt;I'm led to believe&lt;/a&gt;) that we do for GHC's sake.&lt;br /&gt;&lt;br /&gt;Your C code is written, it's now time to compile, link and execute! Compilation to produce an executable looks like this.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;$ ghc --make -no-hs-main -optc-O call_prime.c Prime -o test&lt;/pre&gt;&lt;br /&gt;We're telling ghc that we want to make (--make) our executable (-o test) that doesn't have a main routine in haskell source (-no-hs-main) and optimised by the c compiler (-optc-O).&lt;br /&gt;&lt;br /&gt;We should have an executable, ready to go:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;$ ./test&lt;br /&gt;is 13 prime? 1&lt;br /&gt;is 21 prime? 0&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;It's not fireworks, but it's functional.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Starting a web application with Noir</title>
   <link href="http://tuttlem.github.io/2012/12/29/starting-a-web-application-with-noir/"/>
   <updated>2012-12-29T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/29/starting-a-web-application-with-noir</id>
   <content type="html">&lt;h1&gt;Starting a web application with Noir&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Looking for something semi-useful to do with my &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/12/clojure-and-leiningen-quickstart.html&quot;&gt;new installation of Clojure and Leiningen&lt;/a&gt;, I thought I'd have a hunt around and look for some web frameworks that I might be able to put a small application together with. The web did not disappoint offering me options of &lt;a href=&quot;http://www.webnoir.org/&quot;&gt;Noir&lt;/a&gt;, &lt;a href=&quot;http://www.joodoweb.com/&quot;&gt;Joodo&lt;/a&gt;, &lt;a href=&quot;https://github.com/tatut/Webjure&quot;&gt;Webjure&lt;/a&gt;, &lt;a href=&quot;https://github.com/macourtney/Conjure&quot;&gt;Conjure&lt;/a&gt;, &lt;a href=&quot;https://github.com/cgrand/moustache&quot;&gt;Moustache&lt;/a&gt;&amp;nbsp;and &lt;a href=&quot;https://github.com/weavejester/compojure&quot;&gt;Compojure&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A feast of frameworks indeed. I looked at all of them very briefly but decided to only investigate one, Noir. I'm sure all of the other frameworks have their benefits over&amp;nbsp;Noir, I just wanted to start somewhere.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This post is actually about getting the the&amp;nbsp;Noir&amp;nbsp;Leiningen template installed and getting your first application started. The Noir website will be able to take you further steps.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For this post, I'm using &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;homebrew&lt;/a&gt; on Mac OSX 10.8.2.&lt;br /&gt;&lt;br /&gt;My Leiningen version is 1.7.1&lt;br /&gt;My Clojure version is 1.4.0&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Installation&lt;/h3&gt;&lt;div&gt;There's no real installation about it. If you have Leiningen installed, you're almost there. I did need some extra help installing the correct template to make Leiningen generate the correct structure for a Noir project.&lt;br /&gt;&lt;br /&gt;I installed the Noir Leiningen template&lt;/div&gt;&lt;div&gt;&lt;pre&gt;$ lein plugin install noir/lein-template 1.3.0 &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div&gt;Then I installed the newnew template&lt;/div&gt;&lt;div&gt;&lt;pre&gt;$ lein plugin install lein-newnew 0.2.6 &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;It was at this point, that I was ready to go!&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Get going!&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;You should now be able to issue the following instructions at the shell and have a running web application.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;$ lein new noir my-website&lt;/pre&gt;&lt;pre&gt;$ cd my-website&lt;/pre&gt;&lt;pre&gt;$ lein run&lt;/pre&gt;&lt;br /&gt;Your turn! :-)&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Bridging Science and Art with Ruby</title>
   <link href="http://tuttlem.github.io/2012/12/29/bridging-science-and-art-with-ruby/"/>
   <updated>2012-12-29T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/29/bridging-science-and-art-with-ruby</id>
   <content type="html">&lt;h1&gt;Bridging Science and Art with Ruby&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Having a love for music and technology at the same time can be a dangerous business. You can really fool yourself into thinking that you can boil art down into algebraic or procedural recipes that you can just turn the handle on. The frustration sets in when it's just not that black-and-white.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In this post, I've put some Ruby code together that takes in an array of &lt;a href=&quot;http://en.wikipedia.org/wiki/Interval_(music)&quot;&gt;musical intervals&lt;/a&gt;&amp;nbsp;and attempts to give that array of intervals a name. In music, this is better known as a &lt;a href=&quot;http://en.wikipedia.org/wiki/Chord_(music)&quot;&gt;chord&lt;/a&gt;&amp;nbsp;or &lt;a href=&quot;http://en.wikipedia.org/wiki/Arpeggio&quot;&gt;arpeggio&lt;/a&gt;.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Assumptions&lt;/h3&gt;&lt;div&gt;As above, I want an array of intervals in so this is going to take shape in the form of an integer array. These integers will be the individual distances (in semi-tones) from the root which will start at 0. For reference, here's a chart that I used during development.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;First Octave&lt;/th&gt;&lt;th&gt;Second Octave&lt;/th&gt;&lt;th&gt;Interval Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span style=&quot;color: red;&quot;&gt;0&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span style=&quot;color: red;&quot;&gt;12&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Root/Unison&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;Minor Second/Flat Nine&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;Major Second/Nine&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;&lt;span style=&quot;color: red;&quot;&gt;15&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Minor Third&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;&lt;span style=&quot;color: red;&quot;&gt;16&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Major Third&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;17&lt;/td&gt;&lt;td&gt;Perfect Fourth/Eleventh&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;18&lt;/td&gt;&lt;td&gt;Tritone/Sharp Eleven&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;&lt;span style=&quot;color: red;&quot;&gt;19&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Perfect Fifth&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;Minor Sixth/Flat Thirteen&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;Major Sixth/Thirteenth&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;&lt;span style=&quot;color: red;&quot;&gt;22&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Minor Seventh&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;&lt;span style=&quot;color: red;&quot;&gt;23&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Major Seventh&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Intervals that are coloured red, didn't really factor into the overall solution as they add nothing to the chord's quality or extension. Well, this may not be entirely true, some jazz-heads have probably already got their cross-hairs locked onto me, ready to flame away.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Gathering facts&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;First of all, we need the array of intervals into our class. We'll always assume that there is a root and if there isn't one, we'll pop one into the array for good measure.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4406523.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We're now managing an array of intervals. What we need to do is ask questions of that array so we can gather information about our chord. The following methods ask the important questions in the first octave.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4406546.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;With just this base information we can find a lot out about the chord, but it's not nearly enough. We need to be sure. The best part about putting these basic building blocks in place is that our methods are going to read a little more human from now on. Here are some more fact finders.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4406556.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Finally we have a couple more tests that we need to conduct on the array in the upper octave, otherwise none of the jazz-guys are going to get their chords! These again will form syntactic sugar for the main feature, to_s.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4406565.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Piecing it together&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;It's good that we know so much about our chord. It means that we can ask questions and make decisions based on the outcomes of these questions. Upon reflection, I did have another idea on assembling those fact-finding methods into a more flexible but highly-unhuman set of methods that when you asked about a particular interval, you'd get back either :flat, :natural or :sharp. Perhaps I'll try it in another revision; I digress.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;All the facts are in front of us, let's construct a string from these facts. Now here's where the awkward bridge between science and art starts to burn a little, then a lot. Questions must not only be asked of the array, but they have to be asked in the right order otherwise you'll get a different result.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;That's naming for you though. It doesn't read pretty, but here it is.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4406569.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Woosh. That was a lot of if-treeing. There has to be a better way of doing this, but by my calculations using this code I've covered the following use-cases off:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Major&lt;/li&gt;&lt;li&gt;Minor&lt;/li&gt;&lt;li&gt;Diminished&lt;/li&gt;&lt;li&gt;Diminished Seventh&lt;/li&gt;&lt;li&gt;Augmented&lt;/li&gt;&lt;li&gt;Seventh&lt;/li&gt;&lt;li&gt;Minor Seventh&lt;/li&gt;&lt;li&gt;Major Seventh&lt;/li&gt;&lt;li&gt;Suspended Second&lt;/li&gt;&lt;li&gt;Suspended Fourth&lt;/li&gt;&lt;li&gt;Seventh Flat 5&lt;/li&gt;&lt;li&gt;Seventh Sharp 5&lt;/li&gt;&lt;li&gt;Major Seventh Flat 5&lt;/li&gt;&lt;li&gt;Major Seventh Sharp 5&lt;/li&gt;&lt;li&gt;Minor Seventh Flat 5&lt;/li&gt;&lt;li&gt;Minor Seventh Sharp 5&lt;/li&gt;&lt;li&gt;Ninth&lt;/li&gt;&lt;li&gt;Eleventh&lt;/li&gt;&lt;li&gt;Thirteenth&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;There's a few chords there, but there are just so many more and this code may work for them. Those other cases just haven't made it into my unit tests yet.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Plans&lt;/h3&gt;&lt;div&gt;I really want to make this part of a bigger application that I'm writing at the moment. I was motivated to write a unit like this because I didn't want chord definitions just sitting in a database, I wanted the application to do the think work. Possibilities from here also reach into inversions and slash chords. It would be easy to permute the list of intervals and enumerate all of the inversion scenarios.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Anyway, until next time!&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing haskell-platform on Debian</title>
   <link href="http://tuttlem.github.io/2012/12/28/installing-haskell-platform-on-debian/"/>
   <updated>2012-12-28T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/28/installing-haskell-platform-on-debian</id>
   <content type="html">&lt;h1&gt;Installing haskell-platform on Debian&lt;/h1&gt;
&lt;div class='post'&gt;
If you are only using the stable repositories for your Debian installation, you'll have an older version of haskell-platform running on your system. In this post, I'll show you how to enable the &lt;a href=&quot;http://wiki.debian.org/DebianUnstable&quot;&gt;unstable&lt;/a&gt;&amp;nbsp;repository and get the latest version of &lt;a href=&quot;http://packages.debian.org/sid/haskell-platform&quot;&gt;haskell-platform&lt;/a&gt; installed.&lt;br /&gt;&lt;br /&gt;First up, you need to enable the unstable repository by adding the following line to your /etc/apt/sources.list&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;deb http://mirror.aarnet.edu.au/debian/ unstable main&lt;/pre&gt;&lt;br /&gt;You should replace the mirror that I've specified above with one that is suitably close to where installation commands are executing.&lt;br /&gt;&lt;br /&gt;Next, if one doesn't yet exist, create a /etc/apt/preferences file and edit it. Once you're editing, add the following lines to set apt's preferences as to which repository it will favor&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;Package: *&lt;br /&gt;Pin: release a=squeeze   &lt;br /&gt;Pin-Priority: 900&lt;br /&gt;&lt;br /&gt;Package: *&lt;br /&gt;Pin: release a=unstable &lt;br /&gt;Pin-Priority: 800&lt;/pre&gt;&lt;br /&gt;So, the stable repository (squeeze) is still in charge overall but unstable packages will be available to you at request.&lt;br /&gt;&lt;br /&gt;Update aptitude's package database now from the newly added repository&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;# aptitude update&lt;/pre&gt;&lt;br /&gt;A very handy tid-bit at this point is that you'll now be able to see all of the versions of a package that are available to you with respect to their originating respository.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;$ aptitude versions haskell-platform&lt;br /&gt;p   2010.1.0.0.1                                  stable                    500&lt;br /&gt;i   2012.2.0.0                                    unstable                  800&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Finally, you can get to installing the&amp;nbsp;&lt;a href=&quot;http://packages.debian.org/sid/haskell-platform&quot;&gt;haskell-platform&lt;/a&gt;&amp;nbsp;package from the unstable repository&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;# aptitude install haskell-platform/unstable&lt;/pre&gt;&lt;br /&gt;That's it. You're ready to go.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Clojure and Leiningen quickstart</title>
   <link href="http://tuttlem.github.io/2012/12/28/clojure-and-leiningen-quickstart/"/>
   <updated>2012-12-28T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/28/clojure-and-leiningen-quickstart</id>
   <content type="html">&lt;h1&gt;Clojure and Leiningen quickstart&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;&lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt; is the modern &lt;a href=&quot;http://en.wikipedia.org/wiki/Lisp_(programming_language)&quot;&gt;LISP&lt;/a&gt;. Clojure is an elegant, dynamic programming language that runs a-top the JVM. In today's post, I'll show you how to get started with Clojure &amp;amp; &lt;a href=&quot;http://leiningen.org/&quot;&gt;Leiningen&lt;/a&gt;.&lt;/div&gt;&lt;h3&gt;&lt;br /&gt;&lt;/h3&gt;&lt;h3&gt;Getting installed&lt;/h3&gt;&lt;div&gt;I've written this article from the perspective of a Debian user. Translating these steps into your own native environments should be as easy as re-structuring the installation steps to target your package manager of choice.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Installing Clojure &amp;amp; Leiningen was a simple as this:&lt;/div&gt;&lt;div&gt;&lt;pre&gt;# aptitude install clojure leiningen&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;You're done. You should now have Clojure and Leiningen at your disposal.&lt;/div&gt;&lt;div&gt;&lt;h3&gt;&lt;br /&gt;&lt;/h3&gt;&lt;h3&gt;Initial steps&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;You'll want to kick the tires on this puppy, so from your bash prompt fire up the REPL environment and try a few commands:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre&gt;$ clojure&lt;br /&gt;&lt;br /&gt;Clojure 1.2.1&lt;br /&gt;user=&amp;gt; (+ 2 4)&lt;br /&gt;6&lt;br /&gt;&lt;br /&gt;user=&amp;gt; (print &quot;Clojure is installed!&quot;)&lt;br /&gt;Clojure is installed!nil&lt;br /&gt;&lt;br /&gt;user=&amp;gt; (if (= 1 1) (print &quot;Yes, 1 does equal 1&quot;) (print &quot;Mathematics just stopped&lt;br /&gt;working&quot;))&lt;br /&gt;Yes, 1 does equal 1nil&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Alright! Enough of this already. Let's generate a project.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://leiningen.org/&quot;&gt;Leiningen&lt;/a&gt;&amp;nbsp;is a painless way to get started on your Clojure project. All you have to do, is issue the following commands and you've got a project ready to go:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;$ lein new projname&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Where &quot;projname&quot; is the name of your project. For this test, I just called mine &quot;myproj&quot;. If you have a look inside the directory that Leiningen has just generated for you, you'll see the following sub-directories:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;lib         - holds your programs dependencies&lt;br /&gt;project.clj - a clojure file describing your project &lt;br /&gt;README      - duh! &lt;br /&gt;src         - your source files &lt;br /&gt;test        - any tests for your application&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;This is a pretty neat-and-tidy layout, ready for you to start coding.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Bulding and running and cleaning, oh my!&lt;/h3&gt;&lt;div&gt;Leiningen also makes it very easy to build, run and cleanup your project. Here's how. From within your project directory:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;You can build your project by:&lt;br /&gt;&lt;pre&gt;$ lein compile&lt;/pre&gt;&lt;br /&gt;You can clean any built files by:&lt;br /&gt;&lt;pre&gt;$ lein clean&lt;/pre&gt;&lt;br /&gt;You can run your project with:&lt;br /&gt;&lt;pre&gt;$ lein run&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Too easy.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>List comprehension in Haskell</title>
   <link href="http://tuttlem.github.io/2012/12/27/list-comprehension-in-haskell/"/>
   <updated>2012-12-27T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/27/list-comprehension-in-haskell</id>
   <content type="html">&lt;h1&gt;List comprehension in Haskell&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Generating and operating on lists of data in languages is an essential tool when doing even the most basic of processing. List comprehension is just this process. It's prevalent in most of today's languages and today I want to post about &lt;a href=&quot;http://www.haskell.org/haskellwiki/List_comprehension&quot;&gt;this process in Haskell&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;A numeric example&lt;/h3&gt;&lt;div&gt;Working with numeric data is probably the easiest of examples to help you grasp this concept. Let's start by using a list comprehension to generate a list of numbers 1-through-5.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre&gt;[x | x &amp;lt;- [1..5]]&lt;/pre&gt;&lt;br /&gt;This will return a list looking like [1, 2, 3, 4, 5]. Analysing what we've just written here, we can see that what we want to return is on the left hand side of the pipe &quot;|&quot; symbol, how we want to generate each value sits on the right hand side of the pipe symbol. This expression is wrapped in square braces because we want a list!&lt;br /&gt;&lt;br /&gt;We can change this ever so slightly to only give us back odd numbers like so:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;/pre&gt;&lt;pre&gt;&lt;/pre&gt;&lt;pre&gt;[x | x &amp;lt;- [1..5], odd x]&lt;/pre&gt;&lt;br /&gt;You can see that we've just concatenated another piece of criteria to the right hand side of the expression specifying that we only want odd numbers. We then end up with a list looking like [1, 3, 5]. These are still very simple examples, but we can do some very powerful things with these expressions.&lt;br /&gt;&lt;br /&gt;Take the following for example.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;[x * y | x &amp;lt;- [1..5], y &amp;lt;- [1..5]]&lt;/pre&gt;&lt;br /&gt;Looking at the left-hand side you can see that we want the multiple of x and y. On the right-hand side you can see that both x and y iterate 1-through-5, so we end up with the following:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;[1,2,3,4,5,2,4,6,8,10,3,6,9,12,15,4,8,12,16,20,5,10,15,20,25]&lt;/pre&gt;&lt;br /&gt;Now we're getting somewhere.&lt;br /&gt;&lt;h3&gt;Not so numeric, but close&lt;/h3&gt;&lt;div&gt;When I first saw this technique employed, I'd immediately seen its use in many places. The first place that I decided to put it though was &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/i-need-to-crawl-before-i-can-walk-so.html&quot;&gt;generating a deck of card&lt;/a&gt;. This link is to an Uno implementation that I tried out in Haskell, and if you're&amp;nbsp;familiar&amp;nbsp;with the game, you have colour cards and you have wild cards, so I could represent a deck with the two following expressions:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre&gt;[Card v (Just c) | v &amp;lt;- [Naught .. DrawTwo], c &amp;lt;- [Red .. Yellow]]&lt;br /&gt;[Card v Nothing | v &amp;lt;- [Wild .. WildDrawFour]]&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;These two expressions gave me a deck of cards ready to shuffle! No &quot;for-loops&quot; here ma!&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Strings are just arrays of chars!&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Correct, they are. So it should be no surprise that this statement:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;[a | a &amp;lt;- ['a'..'z']&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;generates a string that looks like this:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&quot;abcdefghijklmnopqrstuvwxyz&quot;&lt;/pre&gt;&lt;br /&gt;Pretty easy/obvious.&lt;br /&gt;&lt;br /&gt;The complexities of list processing and generation can be greatly simplified in your code if you can master the list comprehension.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Folding in Haskell</title>
   <link href="http://tuttlem.github.io/2012/12/27/folding-in-haskell/"/>
   <updated>2012-12-27T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/27/folding-in-haskell</id>
   <content type="html">&lt;h1&gt;Folding in Haskell&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;In this post I would like to present some basic concepts in folding. This really will be over in a flash, so don't blink - it's easy.&lt;/div&gt;&lt;h3&gt;tl;dr&lt;/h3&gt;&lt;div&gt;The Haskell functions &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:foldl&quot;&gt;foldl&lt;/a&gt; and &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:foldr&quot;&gt;foldr&lt;/a&gt; allow you to &quot;fold&quot; functions between values.&lt;/div&gt;&lt;h3&gt;Diagram it for me!&lt;/h3&gt;&lt;div&gt;If you read up on these functions in the documentation, you'll see mention of &quot;reducing values in a list&quot; and such. All this really means, is that you're going to iterate through a list apply a function at every stop and finish up with a &quot;reduced&quot; answer.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here, take a look at this. I have an array spanning 1 through 5.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;[1, 2, 3, 4, 5]&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I want to add all of the values together, so I use&amp;nbsp;&lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:foldl&quot;&gt;foldl&lt;/a&gt;&amp;nbsp;to move through the list applying the &quot;+&quot; operator.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;foldl (+) 0 [1,2,3,4,5]&lt;/pre&gt;&lt;br /&gt;This command in english says, apply the &quot;+&quot; operator between each element in the list (moving left to right) with an initial value of 0. Or:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;0 + 1 + 2 + 3 + 4 + 5 = 15&lt;/pre&gt;&lt;br /&gt;&lt;h3&gt;Bring it back the other way!&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Folding right is interesting. No so much for the example that we have above, as addition moving left or right is at identity with each other.&amp;nbsp;I've prepared a more interesting example for moving to the right.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Take a look at the following and the results:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;foldl (-) 10 [10, 20, 30]&lt;br /&gt;-50&lt;br /&gt;&lt;br /&gt;foldr (-) 10 [10, 20, 30]&lt;br /&gt;10&lt;/pre&gt;&lt;br /&gt;Wow, that's quite the difference. When folding right, the reduction occurs in reverse (values right to left) and then it's applied to the initial value.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;(foldl)&lt;/pre&gt;&lt;pre&gt;10 - 10 - 20 - 30     = -50 &lt;/pre&gt;&lt;pre&gt;&lt;/pre&gt;&lt;pre&gt;(foldr)&lt;/pre&gt;&lt;pre&gt;10 - (20 - (30 - 10)) = 10&lt;/pre&gt;&lt;br /&gt;So, there we are folding to the right!&amp;nbsp;That's (very basic) folding for you anyway.&lt;br /&gt;&lt;br /&gt;An interesting follow-up to this article is the function foldl'. By nature foldl that we've just discussed is lazy, meaning it will build the list of computations to execute using the source array and only execute those computations once the array is depleted (internally). It's been shown that this model of execution can cause stack overflow errors for larger lists because of this deferred execution model. foldl' solves this by not deferring execution. So, the overall result will be the same it's just that foldl' won't be lazy in getting the answer back to you.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Function currying in Haskell</title>
   <link href="http://tuttlem.github.io/2012/12/26/function-currying-in-haskell/"/>
   <updated>2012-12-26T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/26/function-currying-in-haskell</id>
   <content type="html">&lt;h1&gt;Function currying in Haskell&lt;/h1&gt;
&lt;div class='post'&gt;
I think it's important to follow up my previous post on &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/12/anonymous-functions-in-haskell.html&quot;&gt;anonymous functions&lt;/a&gt;&amp;nbsp;with a post on currying. One of the more difficult concepts to think about (only because Haskell does a great job of separating you from this) is that every function only has 1 argument.&lt;br /&gt;&lt;br /&gt;Take this basic greeting example which expects the name of someone who is doing the greeting and the name of someone who is being greeted:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4377706.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;This is a pretty trivial example. Give it two names and the computer will appear to play nice between these two people:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;*Main&amp;gt; sayHello &quot;John&quot; &quot;Peter&quot;&lt;br /&gt;&quot;Peter says Hello to John&quot;&lt;/pre&gt;&lt;br /&gt;We like John so much, that we're going to make a new function using this existing one.&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4377714.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;So now, we can get anyone to play nice with John:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;*Main&amp;gt; sayHelloToJohn &quot;Peter&quot;&lt;br /&gt;&quot;Peter says Hello to John&quot;&lt;br /&gt;*Main&amp;gt; sayHelloToJohn &quot;Joe&quot;&lt;br /&gt;&quot;Joe says Hello to John&quot;&lt;br /&gt;*Main&amp;gt; sayHelloToJohn &quot;Jane&quot;&lt;br /&gt;&quot;Jane says Hello to John&quot;&lt;/pre&gt;&lt;br /&gt;Great! We've just made a partially applied function. When you don't specify enough parameters to a function, you're actually returned a function (or, partially applied function) that you can continue to use.&amp;nbsp;Breaking down how this works, when Jane is saying hello to John she is actually doing so by doing this:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4377723.js&quot;&gt;&lt;/script&gt; This should at least explain my outlandish claims above of functions only having one argument, anyway.&lt;br /&gt;&lt;br /&gt;You've just witnessed function currying in motion.&lt;br /&gt;&lt;br /&gt;These principles are also directly applicable on infix functions as well, they just need a little extra help to be told so. Take this for example:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4385044.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Ignoring the function definition, you can see that all you need to do for infix functions is to&amp;nbsp;surround then with parenthesis. You need to supply the value that makes it a partial application of course!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Function composition in Haskell</title>
   <link href="http://tuttlem.github.io/2012/12/26/function-composition-in-haskell/"/>
   <updated>2012-12-26T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/26/function-composition-in-haskell</id>
   <content type="html">&lt;h1&gt;Function composition in Haskell&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;a href=&quot;http://en.wikipedia.org/wiki/Function_composition&quot;&gt;Function composition&lt;/a&gt; is a no-brainer concept &lt;a href=&quot;http://www.haskell.org/haskellwiki/Function_composition&quot;&gt;for Haskell&lt;/a&gt; that makes a lot of sense. It's truly aligned with its mathematical equivelant where you have two given functions:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;f(x) = x * x&lt;br /&gt;g(x) = x + 2&lt;/pre&gt;&lt;br /&gt;The composition part comes in when you nest these functions, so that you end up with:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;f(g(x)) = f(x + 2)&lt;br /&gt;f(g(x)) = (x + 2) * (x + 2)&lt;br /&gt;f(g(x)) = x^2 + 4x + 4&lt;/pre&gt;&lt;br /&gt;Mathematically, this is cake. We just nest the second function inside the first. If we look at it with respect to Haskell we end up with this:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4380029.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;So, the &quot;.&quot; operator is doing the composition here for us. Below I've got the mathematical representation on the left, Haskell on the right.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;f(g(x)) = (f . g) x&lt;/pre&gt;&lt;br /&gt;The real power here is that you can use function composition with any two functions, just as long as the &amp;nbsp;return type of the second function is the same as the argument taken by the first function.&lt;br /&gt;&lt;br /&gt;Slick.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Anonymous Functions in Haskell</title>
   <link href="http://tuttlem.github.io/2012/12/26/anonymous-functions-in-haskell/"/>
   <updated>2012-12-26T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/26/anonymous-functions-in-haskell</id>
   <content type="html">&lt;h1&gt;Anonymous Functions in Haskell&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;It's no doubt that when you're first entering the wild world of Haskell, that it's syntax is a little alien to look at, at first glance.&lt;br /&gt;&lt;br /&gt;Once of the major building blocks or keys to unlocking power in Haskell are anonymous functions. The idea of higher-order functions in languages these days is becoming more of a standard rather than a feature and Haskell is no exception.&lt;br /&gt;&lt;br /&gt;There's plenty around on the web to read about &lt;a href=&quot;http://en.wikipedia.org/wiki/Anonymous_function&quot;&gt;anonymous functions&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Higher-order_function&quot;&gt;higher-order functions&lt;/a&gt;&amp;nbsp;and of course &lt;a href=&quot;http://en.wikipedia.org/wiki/Functional_programming&quot;&gt;functional programming&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;An example&lt;/h3&gt;&lt;div&gt;A fairly unintuitive example, but shows how you can assign an anonymous function to a handleable variable is shown:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4377608.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Breaking this down, the key part is &quot;(\x -&amp;gt; x)&quot;. Immediately, you can see that anonymous functions take the form of (\param1 .. paramn -&amp;gt; body).&lt;br /&gt;&lt;br /&gt;The real power here is unlocked when you use an anonymous function in conjunction with other functions. The best example I think is the use of the &lt;a href=&quot;http://zvon.org/other/haskell/Outputprelude/map_f.html&quot;&gt;map&lt;/a&gt; function. The &lt;a href=&quot;http://zvon.org/other/haskell/Outputprelude/map_f.html&quot;&gt;map&lt;/a&gt; function is defined as follows:&lt;/div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4377628.js&quot;&gt;&lt;/script&gt; This definition says, give me a function &quot;f&quot; and I'll take all of the &quot;a&quot;'s and turn them into &quot;b&quot;'s. Obviously, the anonymous function comes in for the &quot;f&quot; component. For simplicity, a can be an array of integers.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4377636.js&quot;&gt;&lt;/script&gt;&lt;br /&gt;So the above example maps the function (x*x) across an array from 1 to 100. Easy!&lt;br /&gt;&lt;br /&gt;There are many other functions that can be applied in this way. Most common are &lt;a href=&quot;http://zvon.org/other/haskell/Outputprelude/filter_f.html&quot;&gt;filter&lt;/a&gt;, &lt;a href=&quot;http://zvon.org/other/haskell/Outputprelude/foldl_f.html&quot;&gt;foldl&lt;/a&gt; and &lt;a href=&quot;http://zvon.org/other/haskell/Outputprelude/foldr_f.html&quot;&gt;foldr&lt;/a&gt;. The&amp;nbsp;&lt;a href=&quot;http://zvon.org/other/haskell/Outputprelude/filter_f.html&quot;&gt;filter&lt;/a&gt;&amp;nbsp;function will apply a test to each item in the list and hand you back the items meeting the requirements of the test.&lt;br /&gt;&lt;br /&gt;Want only the odd items from a list?&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4377659.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;So, this introduces another function, &lt;a href=&quot;http://zvon.org/other/haskell/Outputprelude/odd_f.html&quot;&gt;odd&lt;/a&gt;, which just returns true if the input is odd.&lt;br /&gt;&lt;br /&gt;This post could go on, but i'll stop now. The whole anonymous function idea has been explained, it's just its implementation is infinite!&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A simple C++ INI file reader</title>
   <link href="http://tuttlem.github.io/2012/12/26/a-simple-c-ini-file-reader/"/>
   <updated>2012-12-26T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/26/a-simple-c-ini-file-reader</id>
   <content type="html">&lt;h1&gt;A simple C++ INI file reader&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;I've been looking for a simple way to quickly supply some of my applications with easy-access configuration information. Most of the times these are games and smaller utility applications. Enterprise scale applications deserve configuration systems of their own gargantuan proportions, but that's another story.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Thinking back quite a few years, the windows crew had a pretty simple way to supply this sort of information to their running programs, they used the &lt;a href=&quot;http://en.wikipedia.org/wiki/INI_file&quot;&gt;INI file format&lt;/a&gt;.&lt;/div&gt;&lt;h3&gt;How's it look?&lt;/h3&gt;&lt;div&gt;It's a pretty basic, plain-text format. Typically you'd see something along the lines of:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre&gt;[section]&lt;br /&gt;key1=value&lt;br /&gt;key2=value&lt;br /&gt;key3=value&lt;br /&gt;...&lt;br /&gt;[another section]&lt;br /&gt;...&lt;br /&gt;...&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;You get the idea. The wikipedia link above will give you a more thorough run-down should you need it.&lt;br /&gt;&lt;h3&gt;How to make it usable?&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The aim is to basically feed an INI file into this process and have some very easy to use C++ objects out the other side. The &lt;a href=&quot;http://en.wikipedia.org/wiki/Standard_Template_Library&quot;&gt;STL&lt;/a&gt;&amp;nbsp;contains some very suitable container style objects that will measure up, so I want something like this:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4379548.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The map class is a convenient way to manage key-value pairs. Perfect.&lt;br /&gt;&lt;br /&gt;Looking at the code, the types are very long-winded. All of the namespace declaration actually mixed with the types makes for a very long line. This can be cleaned up by &quot;using&quot; the std namespace, but the whole type definition itself could be cleaned up by just using a typedef. I'll be writing the types long-hand for the duration of this tutorial, just so we're clear.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Doing it smart&lt;/h3&gt;&lt;div&gt;Thanks to the rigid format of the file, we've got a very solid standard set in place as to what we'll expect when we crack the file open. We can centralise all of our file processing around two regular expressions.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre&gt;\[(.*?)\]&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;This first regular expression is our test for the section parts. It tests that the line being interpreted is wrapped in square brackets. When we run this through the regular expression system, it'll allow us to extract just the name. Nice.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;(\w+)=([^\+]+(?!\+{3}))&lt;/pre&gt;&lt;br /&gt;This second expression will do our key value pair testing. When we use it in extraction with a regular expression, the first match will be the key, the second - the value. Double nice.&lt;br /&gt;&lt;br /&gt;So, we can fire these regular expressions up using the &lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0/libs/regex/doc/html/index.html&quot;&gt;boost regex library&lt;/a&gt;. I'm led to believe that parts of the boost library will be appearing in the newest C++ standard, regular expressions being one of them.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Putting it all together&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The block of code in the end is quite simple.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4379662.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So, with a couple of tests to assure us that the values are ok we've got a pretty crude implementation here. Erroneous lines are ignored rather than responded to in an exception case. If no initial section is supplied before some key value pairs, those pairs will go into an item section with an empty string.&lt;br /&gt;&lt;br /&gt;Anyway, if the user is half-sane about how they treat their INI files, you'll be just fine.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello, Haskell (from the web)!</title>
   <link href="http://tuttlem.github.io/2012/12/25/hello-haskell-from-the-web/"/>
   <updated>2012-12-25T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/25/hello-haskell-from-the-web</id>
   <content type="html">&lt;h1&gt;Hello, Haskell (from the web)!&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;The best part about technology is the ability to use anything you want. I've run across many frameworks all touting their own awesomeness. Sometimes though, you just need to smash a bit of output back to the client.&lt;br /&gt;&lt;br /&gt;Using the CGI and XHTML libraries available for Haskell, web programming is so simple. Just about every web server known to mankind can run a CGI program and if yours can't, it may need a trip to the gym.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Show me some code&lt;/h3&gt;Excellent. This is where it gets very interesting. I realise at first, when you're reading this code you're going to be saying &quot;well, duh - I can knock out a HTML page to be statically served much easier than this B.S.&quot;&lt;br /&gt;&lt;br /&gt;If this is your train of thought, you may have missed the point. The example I provider here is only to demonstrate to the reader how we can get Haskell closer to the client generation.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4372983.js&quot;&gt;&lt;/script&gt; This should be fairly easy to follow. There's nothing out of the ordinary and it's very simple. After reading &lt;a href=&quot;http://www.haskell.org/haskellwiki/Practical_web_programming_in_Haskell&quot;&gt;this document&lt;/a&gt; I was impressed that this could be condensed down into the following:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4372991.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Damn! Not bad.&lt;br /&gt;&lt;br /&gt;And, here's the output that you get from running these CGI programs:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4373004.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;At the moment, I can see how this looks like a long way around and it certainly is a feathers over steam-train approach to delivering a static page but we've now got the power of Haskell behind our CGI program.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello, Haskell!</title>
   <link href="http://tuttlem.github.io/2012/12/25/hello-haskell/"/>
   <updated>2012-12-25T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/25/hello-haskell</id>
   <content type="html">&lt;h1&gt;Hello, Haskell!&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;Going back to basics in this post so that I can document the methods for compilation of &lt;a href=&quot;http://www.haskell.org/haskellwiki/Haskell&quot;&gt;Haskell&lt;/a&gt; code. These &lt;a href=&quot;http://www.haskell.org/haskellwiki/Haskell&quot;&gt;Haskell&lt;/a&gt; posts will get gradually more complex but for the time being, I'm going to bore you to tears with yet another &lt;a href=&quot;http://en.wikipedia.org/wiki/Hello_world_program&quot;&gt;&quot;Hello, World&quot;&lt;/a&gt; example.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;The Code&lt;/h3&gt;No real surprises here. We define the module, the main function and call a print-type function.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4372901.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;Excellent. Now to compile this guy in one hit, issue the following command at the shell.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4372912.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Breaking this command down, you can see that:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&quot;ghc&quot; is the compiler that we're using&lt;/li&gt;&lt;li&gt;&quot;--make&quot; which automatically figures out dependencies and is generally easier to use (according to the man page) than make itself&lt;/li&gt;&lt;li&gt;&quot;-O2&quot; sets the optimisation level to level 2. It's the highest level. You can read more about these levels &lt;a href=&quot;http://www.linuxjournal.com/article/7269&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;From there it's just specifying the inputs and outputs.&lt;br /&gt;&lt;br /&gt;More Haskell to follow. &lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Twitter bootstrap on Flask</title>
   <link href="http://tuttlem.github.io/2012/12/20/twitter-bootstrap-on-flask/"/>
   <updated>2012-12-20T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/20/twitter-bootstrap-on-flask</id>
   <content type="html">&lt;h1&gt;Twitter bootstrap on Flask&lt;/h1&gt;
&lt;div class='post'&gt;
I really like the simplicity of a micro-framework for web applications. No fluff, no messing around with junk you just don't need when you're trying to stay focused on what counts - logic.&lt;br /&gt;&lt;br /&gt;To ease this project startup phase even more, I've added a new project template to my templates repository on &lt;a href=&quot;https://github.com/tuttlem/templates&quot;&gt;github&lt;/a&gt; that gets the&amp;nbsp;&lt;a href=&quot;http://twitter.github.com/bootstrap/&quot;&gt;Twitter Bootstrap&lt;/a&gt;&amp;nbsp;web template up and running within a&amp;nbsp;&lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt;&amp;nbsp;application.&lt;br /&gt;&lt;br /&gt;Check it out if you get a chance.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>bash_profile vs bashrc</title>
   <link href="http://tuttlem.github.io/2012/12/20/bash-profile-vs-bashrc/"/>
   <updated>2012-12-20T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/20/bash-profile-vs-bashrc</id>
   <content type="html">&lt;h1&gt;bash_profile vs bashrc&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;Whenever I need to make shell configuration changes in unix land (weather that be on a linux, bsd or osx box), I always find myself scratching around trying to find the &quot;correct place&quot; to put the changes that I want to make. This post is all about the black and white between &lt;i&gt;.bash_profile&lt;/i&gt; and &lt;i&gt;.bashrc.&lt;/i&gt;&lt;br /&gt;&lt;h3&gt;&lt;/h3&gt;&lt;h3&gt;The documented difference&lt;/h3&gt;&lt;div&gt;If you were to read the &lt;a href=&quot;http://linux.die.net/man/1/bash&quot;&gt;bash man page&lt;/a&gt;&amp;nbsp;you'll get two pretty clear sentences in there.&lt;/div&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;When bash is invoked as an interactive login shell, or as a non-interactive shell with the --login option, it first reads and executes commands from the file /etc/profile, if that file exists. After reading that file, it looks for ~/.bash_profile, ~/.bash_login, and ~/.profile, in that order, and reads and executes commands from the first one that exists and is readable.&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;When an interactive shell that is not a login shell is started, bash reads and executes commands from ~/.bashrc, if that file exists.&amp;nbsp;&lt;/blockquote&gt;From this, you can see the deciding factor is:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;If it's a login shell, use &lt;i&gt;.bash_profile&lt;/i&gt;&lt;/li&gt;&lt;li&gt;If it's &lt;b&gt;&lt;u&gt;not&lt;/u&gt;&lt;/b&gt; a login shell, use &lt;i&gt;.bashrc&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;/h3&gt;&lt;h3&gt;What's a login shell?&lt;/h3&gt;&lt;div&gt;A login shell is when you're logging into the machine at the console or over SSH i.e. you haven't yet logged in.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A non-login shell is, for example, when you've already logged into your window manager and you fire up your terminal (that is of course, if your terminal is configured to run as a non-login shell!).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Caveats and configurations aside, this is the coarse difference between terms.&lt;/div&gt;&lt;h3&gt;&lt;/h3&gt;&lt;h3&gt;Ok, which one do I bloody use then?&lt;/h3&gt;&lt;div&gt;Well, to save yourself some administration headaches why not just use one? You then &quot;source&quot; that configuration file from the other. I know that doesn't read very well, so here's the example. I hope this makes it clearer.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So, fill &lt;i&gt;.bashrc &lt;/i&gt;with all of your configuration goodies and put the following into &lt;i&gt;.bash_profile&lt;/i&gt;&lt;/div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;if [ -f ~/.bashrc ]; then&lt;br /&gt;   source ~/.bashrc&lt;br /&gt;fi&lt;/pre&gt;&lt;br /&gt;So now it doesn't matter if you use a login or non-login shell, you get the same, consistent configuration experience!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Virtualenv & pip cheat-sheet</title>
   <link href="http://tuttlem.github.io/2012/12/15/virtualenv-pip-cheat-sheet/"/>
   <updated>2012-12-15T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/15/virtualenv-pip-cheat-sheet</id>
   <content type="html">&lt;h1&gt;Virtualenv &amp; pip cheat-sheet&lt;/h1&gt;
&lt;div class='post'&gt;
Here are a couple of the common commands I need day-to-day in order to navigate around&amp;nbsp;&lt;a href=&quot;http://www.virtualenv.org/en/latest/&quot;&gt;virtualenv&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Creating a new virtual envrionment&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;$ virtualenv env&lt;/pre&gt;&lt;br /&gt;Using a virtual environment&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;$ source env/bin/activate&lt;/pre&gt;&lt;br /&gt;Getting out of a virtual environment&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;$ deactivate&lt;/pre&gt;&lt;br /&gt;Re-hydrating a requirements file into your environment&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;$ pip install -r requirements.txt&lt;/pre&gt;&lt;br /&gt;Serializing all of your environment's packages into a requirements file&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;$ pip freeze &amp;gt; requirements.txt&lt;/pre&gt;&lt;br /&gt;That's some basics that will get you up and running.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Using python from the safety of your virtualenv on Debian</title>
   <link href="http://tuttlem.github.io/2012/12/15/using-python-from-the-safety-of-your-virtualenv-on-debian/"/>
   <updated>2012-12-15T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/15/using-python-from-the-safety-of-your-virtualenv-on-debian</id>
   <content type="html">&lt;h1&gt;Using python from the safety of your virtualenv on Debian&lt;/h1&gt;
&lt;div class='post'&gt;
I like having my specific development environments setup, tailored for the particular project that I'm working on. When I'm working on a python project, &lt;a href=&quot;http://www.virtualenv.org/en/latest/&quot;&gt;virtualenv&lt;/a&gt; is my go to tool for the job. It's great.&lt;br /&gt;&lt;br /&gt;We're going to install this using easy_install so that these instructions should translate pretty well to any linux environment. I am doing this from my Debian workstation though.&lt;br /&gt;&lt;br /&gt;First up, we need to install the &lt;a href=&quot;http://packages.debian.org/sid/python-setuptools&quot;&gt;python-setuptools&lt;/a&gt; package so that we get access to easy_install.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;sudo apt-get install python-setuptools&lt;/pre&gt;&lt;br /&gt;Next we install&amp;nbsp;&lt;a href=&quot;http://www.virtualenv.org/en/latest/&quot;&gt;virtualenv&lt;/a&gt;&amp;nbsp;with easy_install&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;sudo easy_install virtualenv&lt;/pre&gt;&lt;br /&gt;As far as the installation is considered, you're done! It's that easy.&lt;br /&gt;&lt;br /&gt;From here you can start to use&amp;nbsp;&lt;a href=&quot;http://www.virtualenv.org/en/latest/&quot;&gt;virtualenv&lt;/a&gt;&amp;nbsp;for all of your python based projects. I'll do a quick cheat-sheet write up shortly on how to use&amp;nbsp;&lt;a href=&quot;http://www.virtualenv.org/en/latest/&quot;&gt;virtualenv&lt;/a&gt;&amp;nbsp;at a glance.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Turn off that pc speaker in Debian!</title>
   <link href="http://tuttlem.github.io/2012/12/15/turn-off-that-pc-speaker-in-debian/"/>
   <updated>2012-12-15T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/15/turn-off-that-pc-speaker-in-debian</id>
   <content type="html">&lt;h1&gt;Turn off that pc speaker in Debian!&lt;/h1&gt;
&lt;div class='post'&gt;
Only a short post. The &lt;a href=&quot;http://www.thinkwiki.org/wiki/ThinkWiki&quot;&gt;ThinkWiki&lt;/a&gt; has a great little &lt;a href=&quot;http://www.thinkwiki.org/wiki/How_to_disable_the_pc_speaker_(beep!)&quot;&gt;write-up&lt;/a&gt;&amp;nbsp;on disabling the pc speaker device under Debian linux. I thought I'd just shortcut the details in this post.&lt;br /&gt;&lt;br /&gt;Remove the pc speaker module&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;sudo modprobe -r pcspkr snd_pcsp&lt;/pre&gt;&lt;br /&gt;Remove the pc speaker permanently&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;# the following lines need to be added to&lt;br /&gt;# the /etc/modprobe.d/blacklist.conf&lt;br /&gt;&lt;br /&gt;# make sure you find out which device you actually have&lt;br /&gt;blacklist pcspkr&lt;br /&gt;blacklist snd_pcsp&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Anyway, these are just the details to disable the device. The ThinkWiki article has some other ideas also on how to make the bell tone tolerable. Not for me though. I can't stand it.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Windows Development with MASM32 (part 5)</title>
   <link href="http://tuttlem.github.io/2012/12/14/windows-development-with-masm32-part-5/"/>
   <updated>2012-12-14T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/14/windows-development-with-masm32-part-5</id>
   <content type="html">&lt;h1&gt;Windows Development with MASM32 (part 5)&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Welcome to the fifth instalment in the series on writing windows applications using MASM32. We've covered the basics pretty thoroughly in parts &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/windows-development-with-masm32-part-1.html&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/windows-development-with-masm32-part-2.html&quot;&gt;2&lt;/a&gt; and &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/windows-development-with-masm32-part-3.html&quot;&gt;3&lt;/a&gt;. We took a bit of a left turn for part &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/windows-development-with-masm32-part-4.html&quot;&gt;4&lt;/a&gt;&amp;nbsp;covering double buffering which admittedly is a bit of an advanced topic.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We're back on the straight and narrow now - today we're going to discuss common controls.&lt;br /&gt;&amp;nbsp;&lt;/div&gt;&lt;h3&gt;What are they?&lt;/h3&gt;&lt;div&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/bb775493(v=vs.85).aspx&quot;&gt;Window common controls&lt;/a&gt;&amp;nbsp;are served out of a dll called Comctl32.dll. The fill list can be found &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/bb773169(v=vs.85).aspx&quot;&gt;here&lt;/a&gt;&amp;nbsp;and there's heaps in there: toolbar, tooltip, status bar, property sheet, treeview, trackbar, the list goes on.&lt;br /&gt;&amp;nbsp;&lt;/div&gt;&lt;h3&gt;Show me!&lt;/h3&gt;&lt;div&gt;Today, we're just going to create a simple, humble, &lt;strong&gt;&lt;u&gt;common&lt;/u&gt;&lt;/strong&gt; status bar for our window. First up, we need to import another header and library. Nicely enough these are named comctl32.inc and comctl32.lib respectively.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4285388.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Next up we have a touch of initialization to get the library in gear. This is just a one-liner.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4285408.js&quot;&gt;&lt;/script&gt;&lt;br /&gt;So, &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb775695(VS.85).aspx&quot;&gt;InitCommonControls&lt;/a&gt;&amp;nbsp;just initializes the window classes involved in using common controls. Now we'll use the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms632619(v=vs.85).aspx&quot;&gt;WM_CREATE&lt;/a&gt; message in the window procedure to actually create our child controls. In our case today, it's just going to be the status window. So, we'll use &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/bb760762(v=vs.85).aspx&quot;&gt;CreateStatusWindow&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4285572.js&quot;&gt;&lt;/script&gt;&lt;br /&gt;&lt;br /&gt;We can fire our application up now and see our statusbar in all its glory at the bottom of the window. This isn't really enough though. I really need to show you how to put something in the status window. A good case here, I think is just some text. I'm sure that you will find much more useful things to do with this, but for this purposes of this post, when a user clicks in the window area with their left mouse button, I'm going to put the string &quot;Click!&quot; into the status bar.&lt;br /&gt;&lt;br /&gt;Note the use of &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms644950(v=vs.85).aspx&quot;&gt;SendMessage&lt;/a&gt;. This is how we'll instruct all of our UI objects to do things of interest for us. Sending messages is how we all co-operate in windows land.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4285606.js&quot;&gt;&lt;/script&gt;&lt;br /&gt;So, that's it for a very tip-of-the-ice-berg (and it's a massive one) look at common controls.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A C Micro Framework Tool Code</title>
   <link href="http://tuttlem.github.io/2012/12/14/a-c-micro-framework-tool-code/"/>
   <updated>2012-12-14T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/14/a-c-micro-framework-tool-code</id>
   <content type="html">&lt;h1&gt;A C Micro Framework Tool Code&lt;/h1&gt;
&lt;div class='post'&gt;
The tools are what counts when it comes to frameworks like this. What good is your framework if it's too hard to use? So a design goal would be to allow the developer to get up and running as quickly as possible.&lt;br /&gt;&lt;br /&gt;In this post, I want to take the most important chunks out of &lt;i style=&quot;font-weight: bold;&quot;&gt;Dino&lt;/i&gt;, our filesystem-change-responding-c#-auto-compiling-web-server-host application to show you the simplicity of the idea. There's also a couple of gems that you might find you'll come back to and research a little more.&lt;br /&gt;&lt;br /&gt;First up, we need a way to respond to file system events. We want to know when a file is created, when a file is deleted and when a file's contents changes. Too easy, let's employ the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.io.filesystemwatcher.aspx&quot;&gt;FileSystemWatcher&lt;/a&gt; class from the System.IO namespace.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4285000.js&quot;&gt;&lt;/script&gt; We've got some event handlers now attached to an object responding to the file types that we care about and when we care about them. We need to be able to serve this functionality over HTTP so we're going to need to embed a web server into our application. &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.net.httplistener.aspx&quot;&gt;HttpListener&lt;/a&gt; from the System.Net namespace makes short work of getting this accomplished.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4285007.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;Excellent. So, now we really need to bridge the gap here. We need to get this code compiled and served to client connections.&lt;br /&gt;&lt;br /&gt;Compiling C# code on the fly is actually a really painless experience. You fire up a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/microsoft.csharp.csharpcodeprovider.aspx&quot;&gt;CSharpCodeProvider&lt;/a&gt;&amp;nbsp;class, give it some compiler options (just as you would at the shell) through the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.codedom.compiler.compilerparameters.aspx&quot;&gt;CompilerParameters&lt;/a&gt;&amp;nbsp;class and off you go.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4285069.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;We're almost there. We just need to glue the assembly that we're generating onto the end of a http request so that we accomplish the serving of the application. Now this code is the real brains of the application, I think. It needs a-hell-of-a-lot-of work, but it accomplishes what is needed for this prototype.&lt;br /&gt;&lt;br /&gt;As you read through it, you'll see the deficiencies immediately but it should be pretty inspiring as to what you can load into this one method to make it a full-on application exchange.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4285052.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;... and of course, like any good console application, we signal that we want to get out with Control-C.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4285015.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;You should have a pretty clear idea in your heads now where this is going. It is time to make this a bit more of a fully-featured application though. Having it sit in prototypical form like this is depressing.&lt;br /&gt;&lt;br /&gt;I'll be back soon with some more progress, hopefully!&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A C# Micro-framework</title>
   <link href="http://tuttlem.github.io/2012/12/14/a-c-micro-framework/"/>
   <updated>2012-12-14T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/14/a-c-micro-framework</id>
   <content type="html">&lt;h1&gt;A C# Micro-framework&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;For a long time now, I've been creating web sites using Visual Studio, ASP.NET and C# for a living. It's a rewarding experience at times and at other times it's a frustrating mess of boilerplate, project files, sluggish compile times and all things horrible that impact the logical side of my brain.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;What I would like to try in this article is to put forward an idea as well as some prototype code that will help us all establish a good footing in the micro-framework arena for ASP.NET. There are some key focus-points that are negatives, but I'll use this list to establish a clear set of goals that I want this software/framework to solve. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If you've ever used micro-frameworks to the like of &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt;, &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt;&amp;nbsp;or&amp;nbsp;&lt;a href=&quot;http://camping.io/&quot;&gt;Camping&lt;/a&gt;&amp;nbsp;before it should be coming pretty clear where I'm heading in this post.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Why the Negativity?&lt;/h3&gt;&lt;div&gt;Well, I don't think I'm being negative - I just think that there are some attributes of ASP.NET programming that could be improved from the developers perspective to make them more productive. Take out all the guff and crud of setting up web applications, projects, routing, &lt;b&gt;&lt;u&gt;AHHHHH!!! STOP!&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;I can still hear the echoes of peoples' voices rattling around in my head about how we were so much more productive back in the ASP days and how .NET has slowed down the production of software. My boss may be unique with his point of view or this may be a common point of view. As developers we know that we have gained a hell-of-a-lot since the dark days of ASP development.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Unfortunately, this doesn't equate to being more productive in the eyes of the not-so-technical, and it's true - we're not delivering software with the same velocity as we once were -- this is a whole blog post of its own with pro's and con's -- not today.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;First stop: Tools&lt;/h3&gt;&lt;div&gt;If we're going to make this work for us, we're going to need some tools. The frameworks that I've mentioned above are all based on interpreted languages. Languages that benefit from &lt;a href=&quot;http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&quot;&gt;REPL&lt;/a&gt; environments. So, I made a C# console application that:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;Scans the directory that it was invoked in for changes in C# files&lt;/li&gt;&lt;li&gt;Compiles these changes on the fly into an in-memory assembly&lt;/li&gt;&lt;li&gt;Serves the functions defined in this assembly as web pages&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;It's very much so a poor man's MVC at the moment, but this isn't a failing of the idea it's a failing of only having a couple of hours to look at this problem last night.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So this application, this console too, I have called &quot;Dino&quot;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-1FktvoqDSos/UMqIjV2n1SI/AAAAAAAAAi0/VAcNOXu7sqQ/s1600/hello.gif&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;267&quot; src=&quot;http://4.bp.blogspot.com/-1FktvoqDSos/UMqIjV2n1SI/AAAAAAAAAi0/VAcNOXu7sqQ/s400/hello.gif&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;There's Dino, running in the bottom left-hand corner of the screen. Quietly re-compling changes on the fly that it detects in the C# file loaded into note pad on the right hand and serving the results of Temp.Hello() as an execution into the web browser on the left.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For simplicity, I re-directed standard output for these assemblies to talk to the web socket so that I could just use &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.console.write.aspx&quot;&gt;Console.Write&lt;/a&gt;&amp;nbsp;to send data back to the client.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here's some more work:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-R8QH_gBXNFo/UMqJOChUknI/AAAAAAAAAi8/dd6wyzG2OC4/s1600/hello-2.gif&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;268&quot; src=&quot;http://2.bp.blogspot.com/-R8QH_gBXNFo/UMqJOChUknI/AAAAAAAAAi8/dd6wyzG2OC4/s400/hello-2.gif&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To show that this is a dynamic environment, Temp.cs just had a Goodbye and Clock method added to it. You can see that in chrome I'm calling the Clock method.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Finally:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-i3WUd1nsvgc/UMqJdNoWWDI/AAAAAAAAAjE/wnJxDDE8Bkw/s1600/run-forest.gif&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;268&quot; src=&quot;http://4.bp.blogspot.com/-i3WUd1nsvgc/UMqJdNoWWDI/AAAAAAAAAjE/wnJxDDE8Bkw/s400/run-forest.gif&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I just dropped a new file &quot;Temp2.cs&quot; into the folder with a method called &quot;Run&quot;. You can see that chrome is now&amp;nbsp;targeting&amp;nbsp;Temp2 rather than Temp in the previous screenshots.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Ok, great. We've got the programmer focused on what's important. Just filling these methods out with implementation that matters! Feeling productive already albeit in a very minimalistic way.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Next Steps&lt;/h3&gt;&lt;div&gt;Right. As I said above, this is very early days and I haven't had much time to spend doing the implementation. It could turn into something very productive (doing actual useful things) rather quickly. Some pieces that immediately come to mind that I'd like to see are:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Changing the standard output pipe to a more friendly http response object&lt;/li&gt;&lt;li&gt;Providing a http request object for access to query strings, form variables, cookies, etc&lt;/li&gt;&lt;li&gt;or .. rather providing these details as parameters to this method (much like ASP.NET MVC)&lt;/li&gt;&lt;li&gt;Flexible attribute-based routing&lt;/li&gt;&lt;li&gt;A templating system (did I hear you say razor?)&lt;/li&gt;&lt;li&gt;A deployment strategy: perhaps a http module that would host this style of application so that it can be a fully blown IIS application in production?&lt;/li&gt;&lt;li&gt;Automatically running unit-tests after automatic compilations?&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;You can see here that a lot of this has already been implemented by existing technologies right out of the .NET toolbox. The whole ASP.NET http request/response pair do a great job in facilitating this communication and the MVC framework also gives you flexible routing and a really nice templating framework. If I could find a way to mix these in, we'd just about be on a winner here.&lt;br /&gt;&lt;br /&gt;I will put Dino up in my &lt;a href=&quot;https://github.com/tuttlem&quot;&gt;github&amp;nbsp;repository&lt;/a&gt;&amp;nbsp;shortly. There's a few preliminary things I'd like to take care of first before I commit it in.&lt;br /&gt;&lt;br /&gt;I'll keep you posted!&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>RVM & Debian</title>
   <link href="http://tuttlem.github.io/2012/12/13/rvm-debian/"/>
   <updated>2012-12-13T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/13/rvm-debian</id>
   <content type="html">&lt;h1&gt;RVM &amp; Debian&lt;/h1&gt;
&lt;div class='post'&gt;
It's always nice to have a sandboxed environment for all of your little projects. I know with how frequently I'm jumping between technologies on the same machine, I always like to use a sandbox technology of choice for the particular platform.&lt;br /&gt;&lt;br /&gt;This is a quick walk through on getting RVM up and running on a debian machine.&lt;br /&gt;&lt;br /&gt;First up, you need to download an install RVM:&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;$ curl -L get.rvm.io | bash -s stable&lt;/pre&gt;&lt;br /&gt;Load RVM into your environment:&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;$ source ~/.rvm/scripts/rvm&lt;/pre&gt;&lt;br /&gt;Check for additional requirements that rubies (you're about to install) need:&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;$ rvm requirements&lt;/pre&gt;&lt;br /&gt;It's &lt;b&gt;&lt;u&gt;strongly advised&lt;/u&gt;&lt;/b&gt; that you follow the suggestions above for the Ruby(ies) that you want to run:&lt;br /&gt;&lt;br /&gt;Install the Ruby that you want to use:&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;$ rvm install 1.9.3&lt;/pre&gt;&lt;br /&gt;Get Rubonic (yes, it's a word ... I ... I ... I think)&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;[michael@deb-02] ~/src $ which ruby                      &lt;br /&gt;/home/michael/.rvm/rubies/ruby-1.9.3-p327/bin/ruby&lt;/pre&gt;&lt;br /&gt;The basics of RVM&lt;br /&gt;&lt;a href=&quot;https://rvm.io/rvm/basics/&quot;&gt;https://rvm.io/rvm/basics/&lt;/a&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Generic value interpolation</title>
   <link href="http://tuttlem.github.io/2012/12/12/generic-value-interpolation/"/>
   <updated>2012-12-12T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/12/generic-value-interpolation</id>
   <content type="html">&lt;h1&gt;Generic value interpolation&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;The core of animation in software (not&amp;nbsp;necessarily&amp;nbsp;graphical) is movement. That movement is between known points to achieve and overall effect. Such well-known movements might be a human moving their legs&amp;nbsp;alternatively&amp;nbsp;so that they can &lt;b&gt;walk &lt;/b&gt;or a sound constantly moving from low to high to make a &lt;b&gt;siren&lt;/b&gt;&amp;nbsp;or moving your mouse cursor &lt;b&gt;automatically.&lt;/b&gt;&amp;nbsp;All of these things share the same premise. An attribute of the object needs to have its position interpolated from a starting point to an ending point over a period of time.&lt;br /&gt;&lt;br /&gt;Some of these interpolations repeat, some do not.&lt;br /&gt;&lt;br /&gt;Today's post is about interpolating values between two points, but it's about doing it with any type and with any interpolation scheme. Let's break these parts down.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Doing it with any type&lt;/h3&gt;&lt;div&gt;The idea here is that anything (within reason) can be interpolated. In real C/C++ terms, I mean short, int, long, float, double, char, etc. A little more interestingly when dealing with spatial objects, we could define our own&amp;nbsp;Cartesian&amp;nbsp;co-ordinate object - give this object X and Y attributes and then interpolate this co-ordinate between two points.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Interpolation schemes + some math&lt;/h3&gt;&lt;div&gt;It's the small details that matter. Linear interpolation is the simplest form of interpolation leaning on the whole &quot;the shortest distance between two points is a straight line&quot;. Linear interpolation will take its sequence values for progressing the object through its interpolation life using:&lt;/div&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;y = c + mx&lt;/i&gt;&lt;/blockquote&gt;Which looks dangerously close to the standard formula you would use to draw a straight line. In this case &lt;i style=&quot;font-weight: bold;&quot;&gt;c &lt;/i&gt;would be our starting point, &lt;i style=&quot;font-weight: bold;&quot;&gt;m&lt;/i&gt;&amp;nbsp;would be the distance (or length) between the start and end points and &lt;i style=&quot;font-weight: bold;&quot;&gt;x &lt;/i&gt;defines how far along our interpolation progression we are taking the form in range of 0.0 up to 1.0.&lt;br /&gt;&lt;br /&gt;Another interesting scheme is trigonometric in nature. Using a soft curve to get between two points can be a softer approach. Trigonometric interpolation will take its sequence values for progressing the object through its interpolation life using:&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;y = c + (sin(x * (PI / 2)) * m)&lt;/i&gt;&lt;/blockquote&gt;Again, we have alike named variables in that &lt;i style=&quot;font-weight: bold;&quot;&gt;c &lt;/i&gt;is our start point, &lt;i style=&quot;font-weight: bold;&quot;&gt;x &lt;/i&gt;is our progress through the interpolated progression and &lt;i style=&quot;font-weight: bold;&quot;&gt;m&lt;/i&gt;&amp;nbsp;is the distance. Notice how our progress, &lt;i style=&quot;font-weight: bold;&quot;&gt;x &lt;/i&gt;is multiplied by &lt;i style=&quot;font-weight: bold;&quot;&gt;(PI / 2)&lt;/i&gt;&amp;nbsp;only talking us 1 quarter through the progress of the curve. This is simply because we're at 0% progress at 0 degress and 100% at 90 degrees.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Show me some code&lt;/h3&gt;&lt;div&gt;First off, we have a base &quot;tweener&quot; object that will manage all of the mundane tasks that this interpolater will need to undergo in order to&amp;nbsp;realize&amp;nbsp;these tweened-values. You'll notice that it is in fact a templated C++ class .&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4262914.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Ignore the timer class for now. It's there just so we can make the interpolations happen with respect to time. We move ourselves along the interpolation progression just with some simple math with regards to time. To be a little more polite about things, we detect when we're at the start and just send the start value and detect when we're at the end and just send the end value - rather than calculating this over and over.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4262934.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The custom implementations for getting actual values (from types of interpolation) are as simple as this:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4262954.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;So you can see that these custom implementations marry very closely to the&amp;nbsp;formula&amp;nbsp;we specified above. I think that this design documents the implementer's intention very clearly by not having to worry about the progression code.&lt;br /&gt;&lt;br /&gt;The choice of using C++ templates also allows future implementations to target specific types. Whilst the implementations given in this article will work well for scalar values, they won't translate very well to complex class types that don't correctly implement operator overloading with mathematical correctness in mind. That being said, if the scope of implementation is beyond what the generic base provides, it's only a matter of specifying the specific type when implementing your own &lt;i style=&quot;font-weight: bold;&quot;&gt;value_internal&lt;/i&gt;&amp;nbsp;method.&lt;br /&gt;&lt;br /&gt;Enjoy.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;A few tweeners more&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Just playing around with the code set that I have here, I've been able to make logarithmic and parabolic tweeners relatively easy. It would be great to be able to control the co-effecients in the parabolic formula, but for the time being it's a quadratic class:&lt;/div&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;y = x&lt;sup&gt;2&lt;/sup&gt; + c&lt;/i&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4264400.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Simple logging in C</title>
   <link href="http://tuttlem.github.io/2012/12/08/simple-logging-in-c/"/>
   <updated>2012-12-08T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/08/simple-logging-in-c</id>
   <content type="html">&lt;h1&gt;Simple logging in C&lt;/h1&gt;
&lt;div class='post'&gt;
Logging is probably one of the most important services you can offer your application. Your programs have information that needs to be expressed to the user, in fact in parts it's important for your program to be almost paranoid that it hasn't said anything.&lt;br /&gt;&lt;br /&gt;All things should be controllable though. Putting your application into production with a paranoid level of logging doesn't make for very happy sys-admins, so this is left as an exercise to the reader.&lt;br /&gt;&lt;br /&gt;Here, I want to present you a configurable but most importantly, a usable logging framework that you can drop into your C projects without much effort at all.&lt;br /&gt;&lt;br /&gt;Let's go through the header!&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4239593.js?file=log.h&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;This is very simple stuff. Only one function &quot;_ced_log&quot; is defined that's used by this header. The user is encouraged to access the logging functionality by proxy of the macros defined (ced_log and ced_logf). ced_log takes in the same parameter structure as a printf call allowing the very natural format strings to be used for your logging. ced_logf takes the structure of fprintf where you can direct your log information to a specific file handle.&lt;br /&gt;&lt;br /&gt;Again, with some small modifications you can direct all of your logs into a file by default. I just like to throw all mine out to the console. I hate surprises (in development)!!&lt;br /&gt;&lt;br /&gt;The implementation for this library piece is also very simple with only one function needing to be filled out:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4239593.js?file=log.c&quot;&gt;&lt;/script&gt; &lt;br /&gt;Here is where you can really make this module your own. The default format that I have going in here has the current process ID and date/time stamp. I find these very useful during the fault-finding process once a unit of software is running. The most important thing to draw from this is you can change the default makeup of a log line by changing this code.&lt;br /&gt;&lt;br /&gt;I use this code just about everywhere. I use it so much that I have included it in my library that it available from github &lt;a href=&quot;https://github.com/tuttlem/libced&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Function Pointers, the MacGyver of C</title>
   <link href="http://tuttlem.github.io/2012/12/08/function-pointers-the-macgyver-of-c/"/>
   <updated>2012-12-08T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/08/function-pointers-the-macgyver-of-c</id>
   <content type="html">&lt;h1&gt;Function Pointers, the MacGyver of C&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;It's a very well studied topic in the C field. Many people have written tutorials on how to use function pointers and what they are. &lt;a href=&quot;http://www.newty.de/fpt/fpt.html&quot;&gt;The function pointer tutorial&lt;/a&gt; is always a good read for the uninitiated or seasoned professional who's function pointer theory is a little rusty.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This write up isn't going to try and fill the shoes of the basic-square-1-hello-world style tutorial. I just wanted to talk about how I've used them to better a piece of code and make a system a bit more extensible overall.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What are they?&lt;/h3&gt;&lt;div&gt;Like any data pointer a function pointer is an address. It's an address that will point to the entry-point of some code. It's that simple. The complexity comes into the argument when you start to add C syntax. C likes to be very descriptive with the data that you're feeding functions and function parameters are no exception.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4238320.js?file=gistfile1.c&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Ok, simple example time over. It's onto what this article is really about.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Problem description&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;I have a game that has a few game states. They look like this:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Introduction credits&lt;/li&gt;&lt;li&gt;Game title&lt;/li&gt;&lt;li&gt;Menu&lt;/li&gt;&lt;li&gt;Game play&lt;/li&gt;&lt;li&gt;Game over&lt;/li&gt;&lt;li&gt;High score board&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Each of these states all have functionality that they need to accomplish. The basic specification for a game state goes as follows:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Needs to be able to be initialized&lt;/li&gt;&lt;li&gt;Needs to be able to have its resources freed (tear down)&lt;/li&gt;&lt;li&gt;Needs to be able to update its internal logic&lt;/li&gt;&lt;li&gt;Needs to be able to render its internal state&amp;nbsp;&lt;/li&gt;&lt;li&gt;Needs to be able to respond to events (keyboard, etc)&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Good. We've established that we have a set of game states and they all attract a set of actions that we'd like them to perform.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;h3&gt;Getting down to it&lt;/h3&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So, let's define the actions first (as function pointers) and we can then fill in the implementation later:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4238398.js?file=gistfile1.c&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Slightly different from above is the use of the &quot;typedef&quot; keyword. This allows us to define these function pointers as types so that we can treat them just as we do any other type. These types that we've defined are the outline to what we need. We still have the colour in, but we've got a framework ready to go.&lt;br /&gt;&lt;br /&gt;Lets define our function pointer variables using the types we defined above.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4238417.js?file=gistfile1.c&quot;&gt;&lt;/script&gt; &lt;br /&gt;Simple enough. Now that we have these variables define (close-by to our game loop), we can write a game loop that will look a little something like this:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4238422.js?file=gistfile1.c&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;This is psuedo code really. There's a whole heap of infrastructure that you'll need in order to make this work.&lt;br /&gt;&lt;br /&gt;You can see that only 3 of the functions we require are being are being used at the moment. We still need to get the init and teardown involved. The game module also needs a way to shift between game states.&lt;br /&gt;&lt;br /&gt;Thankfully, both of these functions come together in the one function:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4238435.js?file=gistfile1.c&quot;&gt;&lt;/script&gt; &lt;br /&gt;So, this function tearsdown the existing game state (if we have a state), and initializes if we initialize to a valid state. Easy!!&lt;br /&gt;&lt;br /&gt;Well, this has been just one possible use for function pointers. You can do so much, much more with them, but I thought I'd share my use of them here!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Macro-ing yourself out of the boilerplate</title>
   <link href="http://tuttlem.github.io/2012/12/07/macro-ing-yourself-out-of-the-boilerplate/"/>
   <updated>2012-12-07T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/07/macro-ing-yourself-out-of-the-boilerplate</id>
   <content type="html">&lt;h1&gt;Macro-ing yourself out of the boilerplate&lt;/h1&gt;
&lt;div class='post'&gt;
Just working on a &quot;build your own clone&quot; style tutorial and going over some older code here, I thought it'd be interesting to note some funky work I'd done with macros.&amp;nbsp;When you're working with 2-d array style states you get very good a writing for-loops over and over and over and ...&lt;br /&gt;&lt;br /&gt;So, thinking about this in a very generic sense - take a look at this macro&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4230103.js?file=gistfile1.c&quot;&gt;&lt;/script&gt; &lt;br /&gt;Working your way through the &quot;enum_field_blocks&quot; macro here, the parameters are:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;A horizontal axis iterator &quot;x&quot;&lt;/li&gt;&lt;li&gt;A vertical axis iterator &quot;y&quot;&lt;/li&gt;&lt;li&gt;A memory location (array index) iterator &quot;o&quot;&lt;/li&gt;&lt;li&gt;and &quot;fn&quot;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;So, what's &quot;fn&quot;? &quot;fn&quot; here allows the developer to specify what they want to execute inside the nested for loops:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4230130.js?file=gistfile1.c&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;/div&gt;&lt;div&gt;If you're thinking &quot;why didn't he just use &lt;a href=&quot;http://www.kernel.org/doc/man-pages/online/pages/man3/memset.3.html&quot;&gt;memset&lt;/a&gt;&amp;nbsp;to set all of the items in this array to NULL&quot; - you've missed the point. The example is quite a bad one, I agree, but it does demonstrate that you can write any code that you'd like and have it execute for every item in the specific array cutting down on boilerplate that you have to write (just get the C pre-processor to do it for you).&lt;br /&gt;&lt;br /&gt;Super.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Assembly language links</title>
   <link href="http://tuttlem.github.io/2012/12/04/assembly-language-links/"/>
   <updated>2012-12-04T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/04/assembly-language-links</id>
   <content type="html">&lt;h1&gt;Assembly language links&lt;/h1&gt;
&lt;div class='post'&gt;
See, people care(ed like years ago, dude)!&lt;br /&gt;&lt;br /&gt;Here's some interesting links for the world of assembly language:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://www.microsoft.com/msj/0298/hood0298.aspx&quot;&gt;MSJ - Under the Hood (February 1998)&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://www.microsoft.com/msj/0698/hood0698.aspx&quot;&gt;MSJ - Under the Hood (June 1998)&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://www.agner.org/optimize/&quot;&gt;Software Optimisation Resources&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Windows Development with MASM32 (part 6)</title>
   <link href="http://tuttlem.github.io/2012/12/03/windows-development-with-masm32-part-6/"/>
   <updated>2012-12-03T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/03/windows-development-with-masm32-part-6</id>
   <content type="html">&lt;h1&gt;Windows Development with MASM32 (part 6)&lt;/h1&gt;
&lt;div class='post'&gt;
Multiple document interface&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>SDL you can use (part 5)</title>
   <link href="http://tuttlem.github.io/2012/12/03/sdl-you-can-use-part-5/"/>
   <updated>2012-12-03T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/03/sdl-you-can-use-part-5</id>
   <content type="html">&lt;h1&gt;SDL you can use (part 5)&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;What good is a game if you can't influence any of the objects? I mean, people go into battle these days armed with a keyboard, mouse and/or joystick to engage in wars never before seen.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In this tutorial, I'll show you how to enable your users with such weapons of mass control (see what I did there?) ... &lt;i&gt;lame&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;h3&gt;Interesting events&lt;/h3&gt;&lt;div&gt;It's all in the event loop. When the application receives input from a device, it'll let you know through the evening system.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here's some code - not much in the way of explanations. It's a pretty simple construct.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4194490.js?file=gistfile1.c&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;So, it's all pretty simple to respond to events. Mouse, Keyboard and Joystick motion all make up parts of the eventing system. Check out &lt;a href=&quot;http://www.libsdl.org/docs/html/sdlevent.html&quot;&gt;SDL_Event&lt;/a&gt;&amp;nbsp;for further information. It includes everything you need.&lt;br /&gt;&lt;br /&gt;Only a quick one!&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>SDL you can use (part 4)</title>
   <link href="http://tuttlem.github.io/2012/12/03/sdl-you-can-use-part-4/"/>
   <updated>2012-12-03T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/03/sdl-you-can-use-part-4</id>
   <content type="html">&lt;h1&gt;SDL you can use (part 4)&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;The audio of a game/demo/application can be a maker or breaker. You can really set the mood of your game with the right sound effects and music.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This tutorial, I'll walk you through setting up the audio system, loading some sound bytes, playing them and the cleaning up. You'll need to have &lt;a href=&quot;http://www.libsdl.org/projects/SDL_mixer/&quot;&gt;SDL_mixer&lt;/a&gt; installed. Make sure that's installed and continue on!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Lets just jump straight in.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Setup&lt;/h3&gt;&lt;br /&gt;Issuing a call to &lt;a href=&quot;http://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_11.html&quot;&gt;Mix_OpenAudio&lt;/a&gt;&amp;nbsp;is all that's needed to initialize the audio system. It's as simple as this:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4194246.js?file=gistfile1.c&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;From here you can load both music files and sound files. There is a difference. Music will run in the background where as sound effects will be one-shot deals. You'll need to use &lt;a href=&quot;http://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_55.html#SEC55&quot;&gt;Mix_LoadMUS&lt;/a&gt;&amp;nbsp;to load a music file and &lt;a href=&quot;http://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_19.html#SEC19&quot;&gt;Mix_LoadWAV&lt;/a&gt;&amp;nbsp;to load a sound file.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4194302.js?file=gistfile1.c&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Playing&amp;nbsp;&lt;/h3&gt;&lt;div&gt;You can play a sound effect on a particular channel (or all channels) using &lt;a href=&quot;http://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_28.html#SEC28&quot;&gt;Mix_PlayChannel&lt;/a&gt;&amp;nbsp;or start and stop music in the background using &lt;a href=&quot;http://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_57.html#SEC57&quot;&gt;Mix_PlayMusic&lt;/a&gt;&amp;nbsp;and &lt;a href=&quot;http://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_62.html#SEC62&quot;&gt;Mix_PauseMusic&lt;/a&gt;.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4194363.js?file=gistfile1.c&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;Cleaning up&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;It's just common courtesy to free all of the resources that you allocate, so the following functions will allow you to deallocate sounds, music files and the audio system.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4194395.js?file=gistfile1.c&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Well, that's about it.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>SDL you can use (part 3)</title>
   <link href="http://tuttlem.github.io/2012/12/03/sdl-you-can-use-part-3/"/>
   <updated>2012-12-03T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/03/sdl-you-can-use-part-3</id>
   <content type="html">&lt;h1&gt;SDL you can use (part 3)&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Setting up a window using the SDL framework is quite a trivial task. Attaching a message loop to the application is also rather easy and I take you through that in &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/12/sdl-you-can-use-part-2.html&quot;&gt;this&lt;/a&gt; previous article.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This article will set you up ready to load in your &lt;a href=&quot;http://www.opengl.org/&quot;&gt;OpenGL&lt;/a&gt; functionality. I think it's important to make clear that this is not going to be a tutorial on&amp;nbsp;&lt;a href=&quot;http://www.opengl.org/&quot;&gt;OpenGL&lt;/a&gt;, rather it'll be a tutorial on how to get to using it. If you are interested in some in-depth&amp;nbsp;&lt;a href=&quot;http://www.opengl.org/&quot;&gt;OpenGL&lt;/a&gt;&amp;nbsp;topics, I suggest you read the &lt;a href=&quot;http://nehe.gamedev.net/&quot;&gt;tutorials from NeHe&lt;/a&gt;&amp;nbsp;- there's quite an extensive set of articles over there.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Anyway, onto the code!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Setting the video mode (correctly)&lt;/h3&gt;&lt;div&gt;Doing some analysis of the &lt;a href=&quot;http://www.libsdl.org/docs/html/sdlsetvideomode.html&quot;&gt;SDL_SetVideoMode&lt;/a&gt;&amp;nbsp;function, the last parameter is going to be of most interest to us. Quoted from the API documentation:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;table border=&quot;1&quot; class=&quot;CALSTABLE&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;tt class=&quot;LITERAL&quot; &gt;SDL_SWSURFACE&lt;/tt&gt;&lt;/td&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;span &gt;Create the video surface in system memory&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;tt class=&quot;LITERAL&quot; &gt;SDL_HWSURFACE&lt;/tt&gt;&lt;/td&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;span &gt;Create the video surface in video memory&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;tt class=&quot;LITERAL&quot; &gt;SDL_ASYNCBLIT&lt;/tt&gt;&lt;/td&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;span &gt;Enables the use of asynchronous updates of the display surface. This will usually slow down blitting on single CPU machines, but may provide a speed increase on SMP systems.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;tt class=&quot;LITERAL&quot; &gt;SDL_ANYFORMAT&lt;/tt&gt;&lt;/td&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;span &gt;Normally, if a video surface of the requested bits-per-pixel (&lt;tt class=&quot;PARAMETER&quot;&gt;&lt;i&gt;bpp&lt;/i&gt;&lt;/tt&gt;) is not available, SDL will emulate one with a shadow surface. Passing&amp;nbsp;&lt;tt class=&quot;LITERAL&quot;&gt;SDL_ANYFORMAT&lt;/tt&gt;&amp;nbsp;prevents this and causes SDL to use the video surface, regardless of its pixel depth.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;tt class=&quot;LITERAL&quot; &gt;SDL_HWPALETTE&lt;/tt&gt;&lt;/td&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;span &gt;Give SDL exclusive palette access. Without this flag you may not always get the the colors you request with&amp;nbsp;&lt;a href=&quot;http://www.libsdl.org/docs/html/sdlsetcolors.html&quot;&gt;&lt;tt class=&quot;FUNCTION&quot;&gt;SDL_SetColors&lt;/tt&gt;&lt;/a&gt;&amp;nbsp;or&amp;nbsp;&lt;a href=&quot;http://www.libsdl.org/docs/html/sdlsetpalette.html&quot;&gt;&lt;tt class=&quot;FUNCTION&quot;&gt;SDL_SetPalette&lt;/tt&gt;&lt;/a&gt;.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;tt class=&quot;LITERAL&quot; &gt;SDL_DOUBLEBUF&lt;/tt&gt;&lt;/td&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;span &gt;Enable hardware double buffering; only valid with SDL_HWSURFACE. Calling&amp;nbsp;&lt;a href=&quot;http://www.libsdl.org/docs/html/sdlflip.html&quot;&gt;&lt;tt class=&quot;FUNCTION&quot;&gt;SDL_Flip&lt;/tt&gt;&lt;/a&gt;&amp;nbsp;will flip the buffers and update the screen. All drawing will take place on the surface that is not displayed at the moment. If double buffering could not be enabled then&amp;nbsp;&lt;tt class=&quot;FUNCTION&quot;&gt;SDL_Flip&lt;/tt&gt;&amp;nbsp;will just perform a&amp;nbsp;&lt;a href=&quot;http://www.libsdl.org/docs/html/sdlupdaterect.html&quot;&gt;&lt;tt class=&quot;FUNCTION&quot;&gt;SDL_UpdateRect&lt;/tt&gt;&lt;/a&gt;&amp;nbsp;on the entire screen.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;tt class=&quot;LITERAL&quot; &gt;SDL_FULLSCREEN&lt;/tt&gt;&lt;/td&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;span &gt;SDL will attempt to use a fullscreen mode. If a hardware resolution change is not possible (for whatever reason), the next higher resolution will be used and the display window centered on a black background.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;tt class=&quot;LITERAL&quot; &gt;SDL_OPENGL&lt;/tt&gt;&lt;/td&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;span &gt;Create an OpenGL rendering context. You should have previously set OpenGL video attributes with&amp;nbsp;&lt;a href=&quot;http://www.libsdl.org/docs/html/sdlglsetattribute.html&quot;&gt;&lt;tt class=&quot;FUNCTION&quot;&gt;SDL_GL_SetAttribute&lt;/tt&gt;&lt;/a&gt;.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;tt class=&quot;LITERAL&quot; &gt;SDL_OPENGLBLIT&lt;/tt&gt;&lt;/td&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;span &gt;Create an OpenGL rendering context, like above, but allow normal blitting operations. The screen (2D) surface may have an alpha channel, and&amp;nbsp;&lt;a href=&quot;http://www.libsdl.org/docs/html/sdlupdaterects.html&quot;&gt;&lt;tt class=&quot;FUNCTION&quot;&gt;SDL_UpdateRects&lt;/tt&gt;&lt;/a&gt;&amp;nbsp;must be used for updating changes to the screen surface. NOTE: This option is kept for compatibility only, and is&amp;nbsp;&lt;span class=&quot;emphasis&quot;&gt;&lt;i class=&quot;EMPHASIS&quot;&gt;not&lt;/i&gt;&lt;/span&gt;&amp;nbsp;recommended for new code.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;tt class=&quot;LITERAL&quot; &gt;SDL_RESIZABLE&lt;/tt&gt;&lt;/td&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;span &gt;Create a resizable window. When the window is resized by the user a&amp;nbsp;&lt;a href=&quot;http://www.libsdl.org/docs/html/sdlresizeevent.html&quot;&gt;&lt;tt class=&quot;LITERAL&quot;&gt;SDL_VIDEORESIZE&lt;/tt&gt;&lt;/a&gt;&amp;nbsp;event is generated and&amp;nbsp;&lt;tt class=&quot;FUNCTION&quot;&gt;SDL_SetVideoMode&lt;/tt&gt;&amp;nbsp;can be called again with the new size.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;tt class=&quot;LITERAL&quot; &gt;SDL_NOFRAME&lt;/tt&gt;&lt;/td&gt;&lt;td align=&quot;LEFT&quot; valign=&quot;TOP&quot;&gt;&lt;span &gt;If possible,&amp;nbsp;&lt;tt class=&quot;LITERAL&quot;&gt;SDL_NOFRAME&lt;/tt&gt;&amp;nbsp;causes SDL to create a window with no title bar or frame decoration. Fullscreen modes automatically have this flag set.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;So, it's in our best interest to ensure that we set the video mode with SDL_HWSURFACE, SDL_DOUBLEBUF and SDL_OPENGL (optionally SDL_FULLSCREEN if we don't want to be windowed).&lt;br /&gt;&lt;br /&gt;Changing our startup code into this&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4194156.js?file=gistfile1.c&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;As long as all goes well, you'll be issuing OpenGL commands against your application, so don't forget to include your GL headers in your application.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>SDL you can use (part 2)</title>
   <link href="http://tuttlem.github.io/2012/12/03/sdl-you-can-use-part-2/"/>
   <updated>2012-12-03T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/03/sdl-you-can-use-part-2</id>
   <content type="html">&lt;h1&gt;SDL you can use (part 2)&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;In a &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/12/sdl-you-can-use-part-1.html&quot;&gt;previous post&lt;/a&gt;, we had put together a simple build system and we have a window displaying the screen for a short moment - then we're done.&lt;br /&gt;&lt;br /&gt;Today, we're going to change that fixed delay that the window shows for and make it&amp;nbsp;dependent&amp;nbsp;on when the user wants to quit the application. To do this, I'll be introducing the concept of SDL events.&lt;br /&gt;&lt;br /&gt;As we're doing this, I'll be able to show you other purposes (or other events) that SDL's eventing system has to offer.&lt;br /&gt;&lt;h3&gt;Events and Eventing&lt;/h3&gt;&lt;div&gt;Events are SDL's way of sending information between the operating system and your application. The SDL library site has a &lt;a href=&quot;http://www.libsdl.org/intro.en/usingevents.html&quot;&gt;short and concise write-up&lt;/a&gt; about their events system. &amp;nbsp;All of the events available can be found &lt;a href=&quot;http://www.libsdl.org/docs/html/eventstructures.html&quot;&gt;here&lt;/a&gt;. Reading over this list should give you a pretty good idea of what information is supported when using SDL. You'll receive information for:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;When the application activates&lt;/li&gt;&lt;li&gt;When you receive keyboard input&lt;/li&gt;&lt;li&gt;When the mouse is actioned&lt;/li&gt;&lt;li&gt;When the joystick is actioned&lt;/li&gt;&lt;li&gt;When the application's window is resized&lt;/li&gt;&lt;li&gt;When platform dependent information is sent&lt;/li&gt;&lt;li&gt;When the application requests to quit.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;There isn't much out of list that we won't need. If we do get stuck, we always have &lt;a href=&quot;http://www.libsdl.org/docs/html/sdluserevent.html&quot;&gt;SDL_UserEvent&lt;/a&gt;&amp;nbsp;available to us to send custom information.&lt;/div&gt;&lt;/div&gt;&lt;h3&gt;What's it look like?&lt;/h3&gt;&lt;div&gt;Now that all of the wordy stuff is out of the way, it's time to show you how to put one of these message loops together. That's just it though, it's just a very simple little loop. I've commented this code pretty well so it shouldn't need too much explanation. This code should come directly after your window's (video's) successful creation.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4191175.js?file=gistfile1.c&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The user will now be able to control to lifespan of the application by issuing a quit request to the application. That's much better than just keeping it open for 2 seconds, then quitting.&lt;br /&gt;&lt;h3&gt;That's it!&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;So, we're still not doing anything uber-exciting. That will come though. We have a few sibling topics to cover now that we've established an application-host (window + event loop). We've got audio, input, network, openGL!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Simple FPU Operations</title>
   <link href="http://tuttlem.github.io/2012/12/02/simple-fpu-operations/"/>
   <updated>2012-12-02T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/02/simple-fpu-operations</id>
   <content type="html">&lt;h1&gt;Simple FPU Operations&lt;/h1&gt;
&lt;div class='post'&gt;
The CPU itself is an impressive piece of kit just by itself however it does struggle to do complex floating point mathematics. Chip designers noticed this deficiency pretty quickly and bolted on a floating-point arithmetic unit.&lt;br /&gt;&lt;br /&gt;It should be noted at this point that many, many other tutorial/article writers have gone into great depth explaining how to program FPU's and they have been great references to me in previous times:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://www.website.masmforum.com/tutorials/fptute/&quot;&gt;Simply FPU&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://qlibdos32.sourceforge.net/tutor/tutor-fpu.php&quot;&gt;80387+ Coprocessor Programming&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html&quot;&gt;Intel Manuals&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Anyway, this blog post is just going to show you a few nuggets that you can use straight away. It's always fun seeing this stuff in action.&lt;br /&gt;&lt;br /&gt;This snippet will sum (accumulate) together an array of doubles.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4188241.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;br /&gt;This following snippet will show you a simple addition, subtraction, multiplication and division. You'll notice a pretty distinct pattern in what to do in these situations. It'll follow:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Load the first term (fld)&lt;/li&gt;&lt;li&gt;Apply the operator (fadd,fsub,fmul,fdiv) with the second term&lt;/li&gt;&lt;li&gt;Store the result into memory&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4188267.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;br /&gt;With a bit of extra help from the C library, you can print out values that you're using in the FPU. The following snippet prints PI to the console.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4198408.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As I find other snippets in old pieces of code, I'll be sure to add them to this page.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>SDL you can use (part 1)</title>
   <link href="http://tuttlem.github.io/2012/12/02/sdl-you-can-use-part-1/"/>
   <updated>2012-12-02T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/02/sdl-you-can-use-part-1</id>
   <content type="html">&lt;h1&gt;SDL you can use (part 1)&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;a href=&quot;http://www.libsdl.org/&quot;&gt;Simple DirectMedia Layer&lt;/a&gt;&amp;nbsp;is a cross-platform library aimed at providing all the fun stuff (video, audio, input, etc) so that you can build fantastic &lt;strike&gt;games&lt;/strike&gt;&amp;nbsp;&lt;strike&gt;demos&lt;/strike&gt; applications.&lt;br /&gt;&lt;br /&gt;This is a series of tutorials that will get you up and running in a very short time.&lt;br /&gt;&lt;br /&gt;These tutorials do assume that you've installed SDL and your installation is working without hassle. Being that we are dealing with a cross-platform library, I'll attempt to be as platform agnostic as possible. I will be writing these tutorials from my MacBook Pro though.&lt;br /&gt;&lt;br /&gt;If you aren't quite at the stage where you can start coding, I'd suggest you run through some of the instructions around on the web. &lt;a href=&quot;http://lazyfoo.net/SDL_tutorials/lesson01/index.php&quot;&gt;Lazy Foo&lt;/a&gt;&amp;nbsp;has done a lot of the work here providing installation instructions for specific platforms.&lt;br /&gt;&lt;br /&gt;A final introductory note is that I'll be using the GNU toolchain to conduct these tutorials.&lt;br /&gt;&lt;br /&gt;Anyway, let's get a build environment up and running and then a window showing to screen.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;The build environment&lt;/h3&gt;&lt;div&gt;Making a scenario where you rebuild your application over and over quickly and painlessly increases the enjoyment of the development process, I find.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here's a simple Makefile that you can use for any simple SDL project that you might have. I'll walk you through it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4188388.js?file=gistfile1.mak&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The rules at the top, specifying switches to the compiler and linker are really doing all of the heavy lifting for the build process. Focusing on &lt;a href=&quot;http://koshmaar.linuxpl.info/sdl_config/news.php&quot;&gt;sdl-config&lt;/a&gt;&amp;nbsp;you can see that we want sdl flags for the compiler and for the linker.&lt;br /&gt;&lt;br /&gt;On my OSX machine, these commands give me the following output:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;[michael@zoso] ~ $ sdl-config --cflags&lt;br /&gt;-I/usr/local/include/SDL -D_GNU_SOURCE=1 -D_THREAD_SAFE&lt;br /&gt;[michael@zoso] ~ $ sdl-config --libs&lt;br /&gt;-L/usr/local/lib -lSDLmain -lSDL -Wl,-framework,Cocoa&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Fantastic. The purpose of these rules is it should make the transporting of this software between machines and platforms a much more portable experience!&lt;br /&gt;&lt;br /&gt;So, we're still at a false start here. I've given you a Makefile that makes mention of tute0.c, but no source code, so ...&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Show me a window for a couple of seconds&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;It's a useless example. I really hate it, but I wanted to defer message handling until the next instalment. This one, I just want to show you initialization and termination.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4188425.js?file=tute0.c&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://www.libsdl.org/docs/html/sdlinit.html&quot;&gt;SDL_Init&lt;/a&gt; providing all of the initialization required to be &quot;in the framework&quot;. &lt;a href=&quot;http://www.libsdl.org/docs/html/sdlsetvideomode.html&quot;&gt;SDL_SetVideoMode&lt;/a&gt; is quite self explanatory. There will be some different flags that we'll pass to that in later articles that will give us some acceleration (where available). Finally, &lt;a href=&quot;http://www.libsdl.org/docs/html/sdlquit.html&quot;&gt;SDL_Quit&lt;/a&gt; takes us out of the framework, making SDL clean up anything that was left outstanding.&lt;br /&gt;&lt;br /&gt;A compile and a run ...&lt;br /&gt;&lt;br /&gt;And for a few fleeting seconds, you're an SDL programmer:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-8pzGZm3W3Ac/ULtJmCtx_7I/AAAAAAAAAig/knahjFWw_HM/s1600/Screen+Shot+2012-12-02+at+10.28.22+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;313&quot; src=&quot;http://3.bp.blogspot.com/-8pzGZm3W3Ac/ULtJmCtx_7I/AAAAAAAAAig/knahjFWw_HM/s400/Screen+Shot+2012-12-02+at+10.28.22+PM.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;That's it for this one, nice and simple. We can hit messaging in the next tutorial, just so we can keep the window on screen a bit longer.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Building SDL applications on OSX</title>
   <link href="http://tuttlem.github.io/2012/12/02/building-sdl-applications-on-osx/"/>
   <updated>2012-12-02T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/02/building-sdl-applications-on-osx</id>
   <content type="html">&lt;h1&gt;Building SDL applications on OSX&lt;/h1&gt;
&lt;div class='post'&gt;
I have seen a fair bit of information around regarding building SDL applications on the OSX platform. Most of these posts have all mentioned some &quot;glue code&quot; in the form of SDLMain.m.&lt;br /&gt;&lt;br /&gt;I haven't taken this approach and have found my code tree to be nice and clean. The following are just the make rules that I use to do the job.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4185380.js?file=gistfile1.mak&quot;&gt;&lt;/script&gt; &lt;br /&gt;Seems like leaning on 'sdl-config' is the way to go. It simplifies building - out of sight!&lt;br /&gt;&lt;br /&gt;The &quot;-framework OpenGL&quot; in the linker statement isn't required to build SDL applications. I just use openGL a fair bit when I'm writing SDL applications, so i've kept it there.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Snow flakes keep falling on my... screen?</title>
   <link href="http://tuttlem.github.io/2012/12/01/snow-flakes-keep-falling-on-my-screen/"/>
   <updated>2012-12-01T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/01/snow-flakes-keep-falling-on-my-screen</id>
   <content type="html">&lt;h1&gt;Snow flakes keep falling on my... screen?&lt;/h1&gt;
&lt;div class='post'&gt;
A very simple effect this time around. It's snow flakes. The operating premise for the effect is very simple and goes like this:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Generate 1 new snow flake at the top of the screen at every frame&lt;/li&gt;&lt;li&gt;A snow flake has an absolute floor of the last line in video memory&lt;/li&gt;&lt;li&gt;A snow flake should come to rest if it lands on top of another&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-pE0K1mfiABg/ULoEn3kZ6bI/AAAAAAAAAiQ/BVre5BA5iy0/s1600/Screen+Shot+2012-12-01+at+11.10.27+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;265&quot; src=&quot;http://1.bp.blogspot.com/-pE0K1mfiABg/ULoEn3kZ6bI/AAAAAAAAAiQ/BVre5BA5iy0/s400/Screen+Shot+2012-12-01+at+11.10.27+PM.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;That's it! So, immediately we need a way to get random numbers.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We're using a 320x200 screen here and my dodgy routine for getting random numbers only returns us 8 bit numbers (which gets us to 255). We need to add some more width to these numbers if we expect to be able to randomize across the whole 320 column positions. Calling the random port twice and adjusting the resolution of the second number should do it for us, such that:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;8 bits (256) and 6 bits (64) will give us 320 - or the ability to add using 14 bits worth of numbers, which in this configuration takes us up to 320. Perfect.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here's the code!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4182207.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;Excellent. We can span the breadth of our screen with random flakes. Now it's time to progress them down the screen. Here's the main frame routine to do so.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4182214.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;br /&gt;The code itself above is pretty well commented, you shouldn't need me to add much more here. There are a couple too many labels in the code, but they should help to add readability.&lt;br /&gt;&lt;br /&gt;I'll leave it as an exercise to the reader to implement different speeds, colours and maybe even some horizontal movement (wind).&lt;br /&gt;&lt;br /&gt;Cool stuff.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Mandelbrot set</title>
   <link href="http://tuttlem.github.io/2012/12/01/mandelbrot-set/"/>
   <updated>2012-12-01T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/01/mandelbrot-set</id>
   <content type="html">&lt;h1&gt;Mandelbrot set&lt;/h1&gt;
&lt;div class='post'&gt;
Another cool routine built off of some relatively simple mathematics is the mandelbrot set. Wikipedia has a really good write up if you're a little rusty on the ins and outs of a &lt;a href=&quot;http://en.wikipedia.org/wiki/Mandelbrot_set&quot;&gt;mandelbrot set&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-p31g56qoaeA/ULnOyLAQItI/AAAAAAAAAiA/U2LUMbXz0ic/s1600/Screen+Shot+2012-12-01+at+7.31.22+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;265&quot; src=&quot;http://1.bp.blogspot.com/-p31g56qoaeA/ULnOyLAQItI/AAAAAAAAAiA/U2LUMbXz0ic/s400/Screen+Shot+2012-12-01+at+7.31.22+PM.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;This tutorial assumes that you've already got a video display ready with a pointer to your buffer.&amp;nbsp;We'll just focus on the function that makes the doughnuts. Here's the code, explanation to follow. This code has been lifted out of a file that I had in an old dos program. It was written using turbo C, but will port over to anything pretty easily.&lt;br /&gt;&lt;br /&gt;Anyway, on to the code!&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4181270.js?file=gistfile1.c&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;So, you can see this code is very simple - to the point. We need to investigate all of the pixels (in this case 320x200 - or 64,000) and we calculate the iteration intersection at each point.&lt;br /&gt;&lt;br /&gt;The variables passed into the function allows the caller to animate the mandelbrot. &quot;zoom&quot; will take you further into the pattern, &quot;xofs&quot; and &quot;yofs&quot; will translate your position by this (x,y) pair. &quot;max_iter&quot; just determines how many cycles the caller wants to spend working out the iteration count. A higher number means that the plot comes out more detailed, but it slower to generate.&lt;br /&gt;&lt;br /&gt;Anyway, only a quick one - don't want to hold you up. Go make something cool!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>2D in OpenGL</title>
   <link href="http://tuttlem.github.io/2012/12/01/2d-in-opengl/"/>
   <updated>2012-12-01T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/12/01/2d-in-opengl</id>
   <content type="html">&lt;h1&gt;2D in OpenGL&lt;/h1&gt;
&lt;div class='post'&gt;
Whilst OpenGL enjoys a lot of fame as a 3D graphics package, it's also a fully featured 2D graphics library as well. In this short tutorial, I'll walk you through the code required to put OpenGL into 2D mode.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This tutorial does assume that you're ready to run some OpenGL code. It won't be a primer in how to use SDL or GLUT, etc.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here's the code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4180890.js?file=gistfile1.c&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;First off, we use &lt;a href=&quot;http://www.opengl.org/sdk/docs/man/xhtml/glGet.xml&quot;&gt;glGetIntegerv&lt;/a&gt;&lt;span id=&quot;goog_1753577021&quot;&gt;&lt;/span&gt;&lt;span id=&quot;goog_1753577022&quot;&gt;&lt;/span&gt;&lt;a href=&quot;http://www.blogger.com/&quot;&gt;&lt;/a&gt;&amp;nbsp;to read the dimensions of the viewport. You will probably already have these values on hand anyway, but getting the viewport this way just generalises the code and it's not expensive to do so.&lt;br /&gt;&lt;br /&gt;We generate an orthographic matrix next using &lt;a href=&quot;http://www.opengl.org/sdk/docs/man2/xhtml/glOrtho.xml&quot;&gt;glOrtho&lt;/a&gt;&amp;nbsp;and the viewport information we retrieved in the first step. The model view matrix is then kept clean - out of habbit, i'd say and finally &lt;a href=&quot;http://www.khronos.org/opengles/documentation/opengles1_0/html/glEnable.html&quot;&gt;glDisable&lt;/a&gt;&amp;nbsp;is used to turn off depth testing.&lt;br /&gt;&lt;br /&gt;We're in 2D. No Z-Axis, no depth testing!&lt;br /&gt;&lt;br /&gt;That's it! You can draw what you need to as simply as this:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4180941.js?file=gistfile1.c&quot;&gt;&lt;/script&gt; &lt;br /&gt;Have fun.&lt;br /&gt;&lt;br /&gt;Quick update to this one - I switched the parameters around in the call to&amp;nbsp;&lt;a href=&quot;http://www.opengl.org/sdk/docs/man2/xhtml/glOrtho.xml&quot;&gt;glOrtho&lt;/a&gt;&amp;nbsp;so that it's a much more natural drawing experience (putting 0,0 in the top left hand corner of the screen). It's not perfect mathematically but it sure does help any of your existing code that assumes your screen goes positive to the right and positive to the bottom!&amp;nbsp;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Plasma, plasma, plasma!</title>
   <link href="http://tuttlem.github.io/2012/11/30/plasma-plasma-plasma/"/>
   <updated>2012-11-30T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/30/plasma-plasma-plasma</id>
   <content type="html">&lt;h1&gt;Plasma, plasma, plasma!&lt;/h1&gt;
&lt;div class='post'&gt;
Kicking back into old, old, old school mode, I had found another cool effect laying around that seemed to work really well in dosbox. It's a plasma (if you couldn't tell from the title).&lt;br /&gt;&lt;br /&gt;Plasmas are the cool, blobby sort of shapeless eye-grabbers that are seriously cool and simple.&lt;br /&gt;&lt;br /&gt;The basic mathematical thory of the plasma is simple.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;4 state counters for the program track where you're up to overall&lt;/li&gt;&lt;li&gt;4 state counters per frame render track where you're up to for that frame&lt;/li&gt;&lt;li&gt;Each pixel is the result of these 4 cosine wave intersections. You can include the x and y counting dimensions to add the 6 intersections.&lt;/li&gt;&lt;/ul&gt;That's it really. There's a little special sauce to make the plasma move and mutate but they really have no bearing over the generation of the effect itself.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Cosine? Easy, I'll just call cosf()!&lt;/h3&gt;Well, not quite. This is a demo routine that will entirely written in assembly language (8086 assembly language to be exact) and as such we won't have the luxury of a math library (or math-coprocessor) to do the work of finding out cosine values.&lt;br /&gt;&lt;br /&gt;So, we must pre-calculate. A small C application gives us all the table pre-calculation we'll need for this application. It's good to keep this application handy to re-pre-calculate this table to taste. If you like a little extra calculation to go into your cos table, that is. Me, I like nerdy numbers. So, according to this cos table, there are 256 degress in a circle (see what I did there) and the top of the cos curve (1.0) is 255 moving through the centre point (0.0) at 127 all the way down to the bottom point (-1.0) at 0.&lt;br /&gt;&lt;br /&gt;Here's the code to generate that table.&lt;br /&gt;&lt;br /&gt; &lt;script src=&quot;https://gist.github.com/4172261.js?file=gistfile1.c&quot;&gt;&lt;/script&gt; &lt;br /&gt;Here is the table that is generated when running this code.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain;&quot;&gt;costab DB 0feh, 0fdh, 0fdh, 0fdh, 0fdh, 0fdh, 0fch, 0fch &lt;br /&gt;       DB 0fbh, 0fah, 0fah, 0f9h, 0f8h, 0f7h, 0f6h, 0f5h &lt;br /&gt;       DB 0f4h, 0f3h, 0f1h, 0f0h, 0efh, 0edh, 0ebh, 0eah &lt;br /&gt;       DB 0e8h, 0e6h, 0e5h, 0e3h, 0e1h, 0dfh, 0ddh, 0dah &lt;br /&gt;       DB 0d8h, 0d6h, 0d4h, 0d1h, 0cfh, 0cdh, 0cah, 0c8h &lt;br /&gt;       DB 0c5h, 0c2h, 0c0h, 0bdh, 0bah, 0b8h, 0b5h, 0b2h &lt;br /&gt;       DB 0afh, 0ach, 0a9h, 0a6h, 0a3h, 0a0h, 09dh, 09ah &lt;br /&gt;       DB 097h, 094h, 091h, 08eh, 08bh, 088h, 085h, 082h &lt;br /&gt;       DB 07fh, 07bh, 078h, 075h, 072h, 06fh, 06ch, 069h &lt;br /&gt;       DB 066h, 063h, 060h, 05dh, 05ah, 057h, 054h, 051h &lt;br /&gt;       DB 04eh, 04bh, 048h, 045h, 043h, 040h, 03dh, 03bh &lt;br /&gt;       DB 038h, 035h, 033h, 030h, 02eh, 02ch, 029h, 027h &lt;br /&gt;       DB 025h, 023h, 020h, 01eh, 01ch, 01ah, 018h, 017h &lt;br /&gt;       DB 015h, 013h, 012h, 010h, 00eh, 00dh, 00ch, 00ah &lt;br /&gt;       DB 009h, 008h, 007h, 006h, 005h, 004h, 003h, 003h &lt;br /&gt;       DB 002h, 001h, 001h, 000h, 000h, 000h, 000h, 000h &lt;br /&gt;       DB 000h, 000h, 000h, 000h, 000h, 000h, 001h, 001h &lt;br /&gt;       DB 002h, 003h, 003h, 004h, 005h, 006h, 007h, 008h &lt;br /&gt;       DB 009h, 00ah, 00ch, 00dh, 00eh, 010h, 012h, 013h &lt;br /&gt;       DB 015h, 017h, 018h, 01ah, 01ch, 01eh, 020h, 023h &lt;br /&gt;       DB 025h, 027h, 029h, 02ch, 02eh, 030h, 033h, 035h &lt;br /&gt;       DB 038h, 03bh, 03dh, 040h, 043h, 045h, 048h, 04bh &lt;br /&gt;       DB 04eh, 051h, 054h, 057h, 05ah, 05dh, 060h, 063h &lt;br /&gt;       DB 066h, 069h, 06ch, 06fh, 072h, 075h, 078h, 07bh &lt;br /&gt;       DB 07eh, 082h, 085h, 088h, 08bh, 08eh, 091h, 094h &lt;br /&gt;       DB 097h, 09ah, 09dh, 0a0h, 0a3h, 0a6h, 0a9h, 0ach &lt;br /&gt;       DB 0afh, 0b2h, 0b5h, 0b8h, 0bah, 0bdh, 0c0h, 0c2h &lt;br /&gt;       DB 0c5h, 0c8h, 0cah, 0cdh, 0cfh, 0d1h, 0d4h, 0d6h &lt;br /&gt;       DB 0d8h, 0dah, 0ddh, 0dfh, 0e1h, 0e3h, 0e5h, 0e6h &lt;br /&gt;       DB 0e8h, 0eah, 0ebh, 0edh, 0efh, 0f0h, 0f1h, 0f3h &lt;br /&gt;       DB 0f4h, 0f5h, 0f6h, 0f7h, 0f8h, 0f9h, 0fah, 0fah &lt;br /&gt;       DB 0fbh, 0fch, 0fch, 0fdh, 0fdh, 0fdh, 0fdh, 0fdh&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Ooooh aaahhh, that's a nerdy cosine table!&lt;br /&gt;&lt;br /&gt;Now that we've solved all of the world's mathematical problems here, it's on to the effect! Just getting 4 counters to run over this cosine table and intersect with each other can produce a mesmerising result. Without setting a palette (the standard vga palette is a bit: ewwwwww), here's how the effect looks:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-qsvAge9ukJU/ULindu0nksI/AAAAAAAAAhw/uky0JwHqooA/s1600/plasma.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;263&quot; src=&quot;http://1.bp.blogspot.com/-qsvAge9ukJU/ULindu0nksI/AAAAAAAAAhw/uky0JwHqooA/s400/plasma.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Feel like you're at Woodstock yet?&lt;br /&gt;&lt;br /&gt;So, the effect really spans across two smaller functions, which I've tried to comment as best I can below. Here's drawing a single frame:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4175519.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;Drawing a single frame isn't too difficult at all. It's important to remember that es:[di] is pointing to the vga buffer to draw to where as ds:[si] is pointing at the cosine table. We're using bx as a base pointer to offset si such that it acts as our array index. Neat-O!&lt;br /&gt;&lt;br /&gt;Between frame draws, we need to make the plasma MOVE!!.. This is just some simple additions or subtractions. Using random values adds a sense of entropy to the process making the plasma move in an almost unpredictable way. It's a little more organic this way.&lt;br /&gt;&lt;br /&gt;I haven't done it this way though. The code you'll see below moves the plasma by fixed amounts per frame. Still gives it some movement.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4175531.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; Wrapping those two calls in a loop that waits for a key to be pressed is all you should need to draw a plasma to the screen.&lt;br /&gt;&lt;br /&gt;Things for you to do:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Change the cosine table generation to produce a more interesting cosine curve&lt;/li&gt;&lt;li&gt;Apply a palette to take the 60's-ness out of the default palette&lt;/li&gt;&lt;li&gt;Apple a palette that you can cycle through (like 1024 or 2048 entries in size) so that the palette (and therefore the plasma) will morph colour as frames progress&lt;/li&gt;&lt;li&gt;Add randomness.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Have fun.&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Plan 9</title>
   <link href="http://tuttlem.github.io/2012/11/30/plan-9/"/>
   <updated>2012-11-30T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/30/plan-9</id>
   <content type="html">&lt;h1&gt;Plan 9&lt;/h1&gt;
&lt;div class='post'&gt;
Bell Labs look like they've just opened up a little more of their source-code in the shape of some system commands.&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;http://plan9.bell-labs.com/sources/plan9/sys/src/&quot;&gt;http://plan9.bell-labs.com/sources/plan9/sys/src/&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;a href=&quot;http://plan9.bell-labs.com/sources/plan9/sys/src/cmd/&quot;&gt;http://plan9.bell-labs.com/sources/plan9/sys/src/cmd/&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;It's worth a browse just to have a look at how some of these things were implemented.&lt;br /&gt;&lt;br /&gt;A quick update, seems that someone has Plan9 running on a raspberry PI.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;background-color: white; color: #1155cc; font-family: inherit;&quot;&gt;&lt;a href=&quot;http://bendyworks.com/geekville/lab_projects/2012/11/getting-plan-9-running-on-the-raspberry-pi&quot; style=&quot;background-color: white; color: #1155cc;&quot; target=&quot;_blank&quot;&gt;http://bendyworks.com/&lt;wbr&gt;&lt;/wbr&gt;geekville/lab_projects/2012/&lt;wbr&gt;&lt;/wbr&gt;11/getting-plan-9-running-on-&lt;wbr&gt;&lt;/wbr&gt;the-raspberry-pi&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Simple random number generation with MASM32</title>
   <link href="http://tuttlem.github.io/2012/11/29/simple-random-number-generation-with-masm32/"/>
   <updated>2012-11-29T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/29/simple-random-number-generation-with-masm32</id>
   <content type="html">&lt;h1&gt;Simple random number generation with MASM32&lt;/h1&gt;
&lt;div class='post'&gt;
Here's a little tid-bit that I'd like to make note of. In a previous MASM32 windows development tutorial, I needed a random number generator and was able to dig this one up from the archivies.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;First of all, you need to make sure we're using the 586 instruction set - at least!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4164886.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Shortly, it will become clear why we need the 586 instruction set.&lt;br /&gt;&lt;br /&gt;To support the random number generator, we need a bit of state in the shape of two double-words.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4164897.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;These two variables allow the random number generator to know where it's up to for the next iteration. Changing the initial seed of course will change the sequence of random values that are produced by this routine.&lt;br /&gt;&lt;br /&gt;The actual function that produces the random number look like this:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4164970.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;br /&gt;There it is. That first instruction &lt;a href=&quot;http://ref.x86asm.net/coder32-abc.html#R&quot;&gt;RDTSC&lt;/a&gt;&amp;nbsp;is what we need to turn the 586 instruction set on for. This&amp;nbsp;mnemonic stands for&amp;nbsp;&amp;nbsp;Read Time-Stamp Counter. It will take the number of cycles since the machine has been reset and put this count into the EDX:EAX pair (as the time stamp counter is a 64bit value).&lt;br /&gt;&lt;br /&gt;From there some calculations are performed to ensure the consistency of state between random value retrieves and also capping to the requested range.&lt;br /&gt;&lt;br /&gt;Simple and it works too!&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Mode X.. plus some!</title>
   <link href="http://tuttlem.github.io/2012/11/29/mode-x-plus-some/"/>
   <updated>2012-11-29T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/29/mode-x-plus-some</id>
   <content type="html">&lt;h1&gt;Mode X.. plus some!&lt;/h1&gt;
&lt;div class='post'&gt;
So, not much of tutorial here - just a neat layout of setup code for a few mode X modes I've come across now and then.&lt;br /&gt;&lt;br /&gt;First of all, just some formalities. Setting Mode X tweaks to the VGA is a massive port-out exercise. Creating the following macro cut down on my code heaps.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4168905.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;br /&gt;So you can see, &amp;nbsp;it just gives sending a byte out to a port a bit of syntactical sugar in assembly language. Easy.&lt;br /&gt;&lt;br /&gt;The only other piece of formality is, you must have set the video display into MCGA (mode 13) first:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4168969.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;br /&gt;On to the modes.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4168909.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://gist.github.com/4168920.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://gist.github.com/4168932.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://gist.github.com/4168936.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://gist.github.com/4168939.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://gist.github.com/4168949.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://gist.github.com/4168963.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;I will have an update to this post. There are some nuances that I'd much prefer explain to you with a couple of nice code blocks rather than how I'm just going to throw it into the page.&lt;br /&gt;&lt;br /&gt;These chunks will be helpful in page selection and optimizing page draws to multiple pages at once.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain;&quot;&gt; ; setting a page&lt;br /&gt; ; activeOffset = vgapage + (page * pageSize / 4);&lt;br /&gt; &lt;br /&gt; ; enable all planes&lt;br /&gt; ; outp 03c4h, 02h&lt;br /&gt; ; outp 03c5h, 0fh&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Some really good references on this topic are&lt;br /&gt;&lt;br /&gt;Mode X on Wikipedia&lt;br /&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Mode_X&quot;&gt;http://en.wikipedia.org/wiki/Mode_X&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Bob Pendleton's Mode X Tutorial&lt;br /&gt;&lt;a href=&quot;http://www.gameprogrammer.com/3-tweak.html&quot;&gt;http://www.gameprogrammer.com/3-tweak.html&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;Well, that's it for now.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Windows Development with MASM32 (part 4)</title>
   <link href="http://tuttlem.github.io/2012/11/28/windows-development-with-masm32-part-4/"/>
   <updated>2012-11-28T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/28/windows-development-with-masm32-part-4</id>
   <content type="html">&lt;h1&gt;Windows Development with MASM32 (part 4)&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;Welcome to the fourth instalment in this windows development series. Just to re-cap the story so far, we've:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/windows-development-with-masm32-part-1.html&quot;&gt;Displayed a message box to the screen&lt;/a&gt; in part 1&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/windows-development-with-masm32-part-2.html&quot;&gt;Setup a message pump&lt;/a&gt; in part 2&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/windows-development-with-masm32-part-3.html&quot;&gt;Created a basic window&lt;/a&gt; in part 3&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;It's time to try something a little fun and little out of the tutorial mould that you'd be expecting at part 4. Today, lets create a window and setup a double buffer to provide flicker-free animation into our windows applications.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This is going to be of great use if we want to do our own custom drawing without employing DirectX or OpenGL. Most of all, it'll be a laugh getting there.&lt;/div&gt;&lt;h3&gt;Double buffer theory, GDI style&lt;/h3&gt;&lt;div&gt;In a generic sense, we manage a block of memory (away from the visible video memory) that has the same characteristics (width, height and depth) as the screen we're presenting. We perform all of our drawing within this off-screen memory buffer and then &quot;flip&quot; it over onto the presenting video memory when we're ready to show it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In GDI land, this procedure is split between a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/aa383751(v=vs.85).aspx&quot;&gt;HDC&lt;/a&gt;&amp;nbsp;and a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/aa383751(v=vs.85).aspx&quot;&gt;HBITMAP&lt;/a&gt;. A&amp;nbsp;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/aa383751(v=vs.85).aspx&quot;&gt;HDC&lt;/a&gt;&amp;nbsp;is obtained so that we have an access context into allocated memory. This is also what we'll use when we go to draw something. Where it's stored is in the bitmap.&amp;nbsp;A&amp;nbsp;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/aa383751(v=vs.85).aspx&quot;&gt;HBITMAP&lt;/a&gt;&amp;nbsp;is obtained so that we can match what is being presented to the user in video memory. Windows does a good job of copying these characteristics when we call &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/dd183488(v=vs.85).aspx&quot;&gt;CreateCompatibleBitmap&lt;/a&gt;.&lt;/div&gt;&lt;h3&gt;Supporting the back-buffer&lt;/h3&gt;&lt;div&gt;So, we need a couple of functions in order to keep the backbuffer happy when the window changes. We need to react when Windows tells us something about the window. In this scenario, we're going to be very interested in the resize message (&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms632646(v=vs.85).aspx&quot;&gt;WM_SIZE&lt;/a&gt;). We need to teardown any already setup back buffer, create a new one of adequate size and continue on.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Let's take a look at the code that's will create and re-create our back-buffer when requested.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4161317.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms633503(v=vs.85).aspx&quot;&gt;GetClientRect&lt;/a&gt; fills out a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/aa383751(v=vs.85).aspx&quot;&gt;RECT&lt;/a&gt; structure for us with the client dimensions of the window. This is perfect to give us the dimensions for the back buffer. &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/dd144871(v=vs.85).aspx&quot;&gt;GetDC&lt;/a&gt; obtains a device context directly on the window for us and we use this&amp;nbsp;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/aa383751(v=vs.85).aspx&quot;&gt;HDC&lt;/a&gt;&amp;nbsp;in order to create an in-memory representation using &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/dd183489(v=vs.85).aspx&quot;&gt;CreateCompatibleDC&lt;/a&gt;. Now that we know what we'll end up drawing to, we just need a buffer off-screen that will hold our intermediate frame. We do this by using&amp;nbsp;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/dd183488(v=vs.85).aspx&quot;&gt;CreateCompatibleBitmap&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;You'll see a reference to the teardown for the backbuffer in the creation procedure. It's all about safety making sure we're un allocated before trying again. Here's that teardown.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4161329.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Tearing down is really just use of &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/dd183539(v=vs.85).aspx&quot;&gt;DeleteObject&lt;/a&gt; and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/dd162920(v=vs.85).aspx&quot;&gt;ReleaseDC&lt;/a&gt; calls. This is fairly straight forward.&lt;br /&gt;&lt;br /&gt;Finally, we need to be able to send the back buffer to the front (visible) buffer. This flip method using GDI calls is how we accomplish that.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4161348.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;br /&gt;A point to note here is the use of &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/dd183370(v=vs.85).aspx&quot;&gt;BitBlt&lt;/a&gt;. We need a way to quickly copy everything on the back buffer to everything on the front buffer. &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/dd183370(v=vs.85).aspx&quot;&gt;BitBlt&lt;/a&gt; is purpose built to work on copying bitmaps between&amp;nbsp;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/aa383751(v=vs.85).aspx&quot;&gt;HDC&lt;/a&gt;'s so this is the natural choice.&lt;br /&gt;&lt;h3&gt;Not a normal message pump&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The type of application has changed. We're now targeting an animating, constantly re-drawn application that needs a new style of message pump. The last type of message pump was very passive, only doing something when required. This new one is very active - peeking the message stack using &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms644943(v=vs.85).aspx&quot;&gt;PeekMessage&lt;/a&gt;&amp;nbsp;to determine if messages need to be processed, otherwise re-drawing the application.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here's the message pump for the application.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4161383.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Finally, we have the window procedure. This is what will co-ordinate the destruction and re-creation of the back buffer when catastrophic changes occur to the visual appearance of the application.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4161428.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;br /&gt;That's about it for the double-buffer side of things. The rest of the application itself does have some trickery behind drawing random shapes, but I'll leave the random number generator for a later post.&lt;br /&gt;&lt;br /&gt;Get double buffering!&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Offscreen Mesa3D</title>
   <link href="http://tuttlem.github.io/2012/11/27/offscreen-mesa3d/"/>
   <updated>2012-11-27T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/27/offscreen-mesa3d</id>
   <content type="html">&lt;h1&gt;Offscreen Mesa3D&lt;/h1&gt;
&lt;div class='post'&gt;
As a quick bookmark, this part of the Mesa3D project: &lt;a href=&quot;http://www.mesa3d.org/osmesa.html&quot;&gt;Off-screen Rendering&lt;/a&gt;&amp;nbsp;looks like it might be a viable option for some of the lower-end hardware I've come across lately.&lt;br /&gt;&lt;br /&gt;Bisqwit seems to have made pretty decent use of it in one of his videos here&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/vkUwT9U1GzA&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br /&gt;Interesting.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Music, Calculators & Big Snakes</title>
   <link href="http://tuttlem.github.io/2012/11/27/music-calculators-big-snakes/"/>
   <updated>2012-11-27T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/27/music-calculators-big-snakes</id>
   <content type="html">&lt;h1&gt;Music, Calculators &amp; Big Snakes&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;I play a lot of music. I mean &lt;u style=&quot;font-weight: bold;&quot;&gt;a lot&lt;/u&gt;&amp;nbsp;of music. Guitar, Bass, Piano, Drums, Harp -- what ever I can get my hands on, I'll give it a go. So, the neurons in charge of keeping my technical side in check may have made their way into the creative side of my brain.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The net result was me creating a project that mashes mathematics, data analysis and music theory into a few classed called &lt;a href=&quot;https://github.com/tuttlem/musica&quot;&gt;musica&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;So what?&lt;/h3&gt;&lt;div&gt;Yeah, basically.. But, I am who I am - so it' more of a matter of &quot;why not?&quot;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I'd previously tried building a Ruby on Rails application to give me graphical representations of musically related elements on screen. A scale is a pattern of intervals realised once a root note is put in place. This scale can then be harmonised at every step of the scale by employing every second note from the specific step. How complex these harmonised chords are will depend on how many steps you include in the chords that you build.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The most interesting part of this library, I think, is its distinct lack of database. It has made the code quite verbose in parts but I intend to fix this, even if it does mean employing an intermediary database at a later stage.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;What can it do?&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The major, harmonic &amp;amp; melodic minor scales (and all of their modes) are statically provisioned. You can use these in code to perform operations like voicing a scale when used in conjunction with a Note object.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Immediately, we can get information about notes:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4153854.js?file=gistfile1.py&quot;&gt;&lt;/script&gt; Information about scales:&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4153859.js?file=gistfile1.py&quot;&gt;&lt;/script&gt; Voicing a scale (in this instance voicing Ionian (major) over C) &lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4153871.js?file=gistfile1.py&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;Still so much to do ...&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Still, we need to get chords harmonising from these voiced scales. These are just patterns after all. An intelligent chord builder would also be of value I think. Something where we don't have to explicitly map out chord names to interval sets statically. Just knowing that a root, major third and perfect fifth are a major chord.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;That'd be a cool calculator, I think.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If your interested, the git repo for this library is &lt;a href=&quot;https://github.com/tuttlem/musica&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Calling Assembly from C (64 bit)</title>
   <link href="http://tuttlem.github.io/2012/11/27/calling-assembly-from-c-64-bit/"/>
   <updated>2012-11-27T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/27/calling-assembly-from-c-64-bit</id>
   <content type="html">&lt;h1&gt;Calling Assembly from C (64 bit)&lt;/h1&gt;
&lt;div class='post'&gt;
In a &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/calling-assembly-from-c-32-bit.html&quot;&gt;previous blog post&lt;/a&gt;, I spoke about calling assembly language routines from C in 32-bit land. In this post, I aim to show you the same technique only this time using a 64 bit architecture.&lt;br /&gt;&lt;br /&gt;I'll be using the same technology stack as last time with &lt;a href=&quot;http://www.nasm.us/&quot;&gt;NASM &lt;/a&gt;as my assembler and &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GCC&lt;/a&gt; as my C compiler. The code snippets that you'll see in this post have been compiled and linked together on the linux platform.&lt;br /&gt;&lt;br /&gt;Alright then. On with the code!&lt;br /&gt;&lt;br /&gt;The C-code is not different from the 32-bit version as mentioned in my previous post. Now &lt;b&gt;that's&lt;/b&gt;&amp;nbsp;portability for you!&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4142080.js?file=gistfile1.c&quot;&gt;&lt;/script&gt; The assembly language module has changed somewhat though.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4151995.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;br /&gt;Immediately you can see that a new set of registers are being used and the stack is no longer being used to take parameters in from external calls.&lt;br /&gt;&lt;br /&gt;The change in calling convention can be studied in further detail &lt;a href=&quot;http://www.x86-64.org/documentation/abi.pdf&quot;&gt;here&lt;/a&gt;, however it's just important to mention this:&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;Once arguments are classified, the registers get assigned (in left-to-right order) for passing as follows:&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;If the class is MEMORY, pass the argument on the stack.&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;If the class is INTEGER, the next available register of the sequence %rdi, %rsi, %rdx, %rcx, %r8 and %r9 is used&lt;/blockquote&gt;&lt;/blockquote&gt;So, the first argument is passed in RDI and the second in RSI. The return value remains the same being passed back to the caller using the accumulator register (RAX in 64-bit land). There are many resources to read up on when it comes to the 64 bit architecture; &lt;a href=&quot;http://www.intel.com/content/www/us/en/architecture-and-technology/microarchitecture/intel-64-architecture-general.html&quot;&gt;Intel&lt;/a&gt;&amp;nbsp;and &lt;a href=&quot;http://en.wikipedia.org/wiki/X86-64&quot;&gt;Wikipedia&lt;/a&gt;&amp;nbsp;are both excellent resources.&lt;br /&gt;&lt;br /&gt;Finally, when it comes to building these files together, it's (again) very similar to its 32bit counterpart.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4152023.js?file=gistfile1.sh&quot;&gt;&lt;/script&gt; We're done!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Windows Development with MASM32 (part 3)</title>
   <link href="http://tuttlem.github.io/2012/11/26/windows-development-with-masm32-part-3/"/>
   <updated>2012-11-26T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/26/windows-development-with-masm32-part-3</id>
   <content type="html">&lt;h1&gt;Windows Development with MASM32 (part 3)&lt;/h1&gt;
&lt;div class='post'&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;&lt;div&gt;In the &lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/windows-development-with-masm32-part-2.html&quot;&gt;last part&lt;/a&gt;&amp;nbsp;of this series, we finished off creating a message pump. The application did nothing (seemingly) on the surface, but underneath it set the platform for message processing which is so important in the windows environment.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In this article we're going to create a simple window that will sit on this message pump architecture and be a first class citizen on our windows desktop.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A little extra help (in the form of macros) has been employed in this example.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4147906.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;m2m is a neat little helper that wraps up that annoying memory location loading indirection problem that would normally see a little bit of stack gymnastics, and remember I'd previously said that all return values need to be in eax? Well, check out the macro &quot;return&quot;. It's pretty self explanatory.&lt;br /&gt;&lt;h3&gt;Window Classes&lt;/h3&gt;&lt;div&gt;Window classes are at the base of all windows that are created in windows. You fill out a structure (&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms633576(v=vs.85).aspx&quot;&gt;WNDCLASS&lt;/a&gt; or &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms633577(v=vs.85).aspx&quot;&gt;WNDCLASSEX&lt;/a&gt;) and from there you can create windows using this window class as a template.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here we'll define the window class for the application.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4147911.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt; &lt;br /&gt;Some things of interest in this example is assigning the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms633573(v=vs.85).aspx&quot;&gt;window procedure&lt;/a&gt;, giving the class a name (as we'll use it later) and finally the registration of the class using &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms633587(v=vs.85).aspx&quot;&gt;RegisterClassEx&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Putting something on screen&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Finally, we'll put something on screen. So, the following snippet will create the window (using the class we registered above as the template) and give us back the handle (or &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/aa383751(v=vs.85).aspx&quot;&gt;HWND&lt;/a&gt;) to the window.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4147919.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;You can lookup &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms632680(v=vs.85).aspx&quot;&gt;CreateWindowEx&lt;/a&gt; yourself to understand the parameters. &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms633548(v=vs.85).aspx&quot;&gt;ShowWindow&lt;/a&gt; and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/dd145167(v=vs.85).aspx&quot;&gt;UpdateWindow&lt;/a&gt; are supplemental to the creation process to completeness.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Responding when it counts&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Finally, we need to respond when the window does (or wants to do) something interesting. Remember, it's only a simple application so the&amp;nbsp;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms633573(v=vs.85).aspx&quot;&gt;window procedure&lt;/a&gt;&amp;nbsp;is not going to be a work of art. Really, it just lets everything go through to the default window procedure &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms633572(v=vs.85).aspx&quot;&gt;DefWindowProc&lt;/a&gt;. &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms632620(v=vs.85).aspx&quot;&gt;WM_DESTROY&lt;/a&gt;&amp;nbsp;will post a quit message using &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms644945(v=vs.85).aspx&quot;&gt;PostQuitMessage&lt;/a&gt; which is really game over.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/4147927.js?file=gistfile1.asm&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This last code block also introduces some high-level if-then-else syntax provided by MASM. You could accomplish the same thing writing your cmp's and jmp's by hand. These &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/f4x287ff(v=vs.80).aspx&quot;&gt;.IF&lt;/a&gt;&amp;nbsp;and &lt;a href=&quot;http://msdn.microsoft.com/en-US/library/6f0ft3f1(v=vs.80).aspx&quot;&gt;.ELSE&lt;/a&gt;&amp;nbsp;constructs provide a little syntactic sugar to make your assembly block read a little more in a structured fashion.&lt;br /&gt;&lt;br /&gt;Well, that wraps up part 3. You'll have a window glaring you in the face once you're up and running. Hitting the close button on the window will post a WM_CLOSE message which ultimately results in a&amp;nbsp;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms632620(v=vs.85).aspx&quot;&gt;WM_DESTROY&lt;/a&gt;&amp;nbsp;which your application will respond to by &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms644945(v=vs.85).aspx&quot;&gt;posting a quit message&lt;/a&gt;&amp;nbsp;and you're done.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unix Networking Server</title>
   <link href="http://tuttlem.github.io/2012/11/26/unix-networking-server/"/>
   <updated>2012-11-26T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/26/unix-networking-server</id>
   <content type="html">&lt;h1&gt;Unix Networking Server&lt;/h1&gt;
&lt;div class='post'&gt;
The following snippet is a bare-bones server.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:c;&quot;&gt;int sockfd, new_fd;  &lt;br /&gt;struct addrinfo hints, *servinfo, *p;&lt;br /&gt;struct sockaddr_storage their_addr; &lt;br /&gt;socklen_t sin_size;&lt;br /&gt;struct sigaction sa;&lt;br /&gt;int yes=1;&lt;br /&gt;char s[INET6_ADDRSTRLEN];&lt;br /&gt;int rv;&lt;br /&gt;&lt;br /&gt;/* fill out the address structure */&lt;br /&gt;memset(&amp;amp;hints, 0, sizeof hints);&lt;br /&gt;hints.ai_family = AF_UNSPEC;&lt;br /&gt;hints.ai_socktype = SOCK_STREAM;&lt;br /&gt;hints.ai_flags = AI_PASSIVE; &lt;br /&gt;&lt;br /&gt;/* get the address information */&lt;br /&gt;getaddrinfo(NULL, PORT, &amp;amp;hints, &amp;amp;servinfo);&lt;br /&gt;&lt;br /&gt;/* open the socket */&lt;br /&gt;sockfd = socket(p-&amp;gt;ai_family, p-&amp;gt;ai_socktype, p-&amp;gt;ai_protocol);&lt;br /&gt;&lt;br /&gt;/* allow the socket to be re-used */&lt;br /&gt;setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &amp;amp;yes, sizeof(int));&lt;br /&gt;&lt;br /&gt;/* bind the socket to the address */&lt;br /&gt;bind(sockfd, p-&amp;gt;ai_addr, p-&amp;gt;ai_addrlen);&lt;br /&gt;&lt;br /&gt;/* free up the address structure */&lt;br /&gt;freeaddrinfo(servinfo); &lt;br /&gt;&lt;br /&gt;/* start the socket listening */&lt;br /&gt;listen(sockfd, BACKLOG);&lt;br /&gt;&lt;br /&gt;/* accept the first connect */&lt;br /&gt;new_fd = accept(sockfd, (struct sockaddr *)&amp;amp;their_addr, &amp;amp;sin_size);&lt;br /&gt;&lt;br /&gt;/* send the client some data */&lt;br /&gt;send(new_fd, &quot;Hello, world!&quot;, 13, 0);&lt;br /&gt; &lt;br /&gt;/* finished with the client &amp;amp; server */&lt;br /&gt;close(new_fd);&lt;br /&gt;close(sockfd);&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Further reading&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?getaddrinfo+3&quot;&gt;The getaddrinfo system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?socket&quot;&gt;The socket system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?bind+2&quot;&gt;The bind system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?listen+2&quot;&gt;The listen system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?accept+2&quot;&gt;The accept system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?recv&quot;&gt;The recv system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?send&quot;&gt;The send system call&lt;/a&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unix Networking Client</title>
   <link href="http://tuttlem.github.io/2012/11/26/unix-networking-client/"/>
   <updated>2012-11-26T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/26/unix-networking-client</id>
   <content type="html">&lt;h1&gt;Unix Networking Client&lt;/h1&gt;
&lt;div class='post'&gt;
The following snippet outlines the skeleton of a client socket application. It's the bare bones of what is needed to establish the client connection.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:c;&quot;&gt;int sockfd, numbytes;  &lt;br /&gt;char buf[MAXDATASIZE];&lt;br /&gt;struct addrinfo hints, *servinfo, *p;&lt;br /&gt;int rv;&lt;br /&gt;char s[INET6_ADDRSTRLEN];&lt;br /&gt;&lt;br /&gt;/* fill out the address info */&lt;br /&gt;memset(&amp;amp;hints, 0, sizeof hints);&lt;br /&gt;hints.ai_family = AF_UNSPEC;&lt;br /&gt;hints.ai_socktype = SOCK_STREAM;&lt;br /&gt;&lt;br /&gt;/* create the actual server address */&lt;br /&gt;getaddrinfo(&quot;www.remoteplace.com&quot;, PORT, &amp;amp;hints, &amp;amp;servinfo);&lt;br /&gt;&lt;br /&gt;/* create the socket file descriptor */&lt;br /&gt;sockfd = socket(p-&amp;gt;ai_family, p-&amp;gt;ai_socktype, p-&amp;gt;ai_protocol);&lt;br /&gt;&lt;br /&gt;/* perform the network connect */&lt;br /&gt;connect(sockfd, p-&amp;gt;ai_addr, p-&amp;gt;ai_addrlen);&lt;br /&gt;&lt;br /&gt;/* free up the addres structure */&lt;br /&gt;freeaddrinfo(servinfo); &lt;br /&gt;&lt;br /&gt;/* receive some data on the socket */&lt;br /&gt;recv(sockfd, buf, MAXDATASIZE-1, 0));&lt;br /&gt;&lt;br /&gt;/* close the socket off */&lt;br /&gt;close(sockfd);&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Further reading&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?getaddrinfo+3&quot;&gt;The getaddrinfo system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?socket&quot;&gt;The socket system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?connect&quot;&gt;The connect system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?recv&quot;&gt;The recv system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?send&quot;&gt;The send system call&lt;/a&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unix Networking</title>
   <link href="http://tuttlem.github.io/2012/11/26/unix-networking/"/>
   <updated>2012-11-26T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/26/unix-networking</id>
   <content type="html">&lt;h1&gt;Unix Networking&lt;/h1&gt;
&lt;div class='post'&gt;
I have just finished compiling two more blog posts for Unix Networking. Again, these aren't the&amp;nbsp;definitive&amp;nbsp;tutorial style blog posts, they're just code snippet short cuts to get moving quickly.&lt;br /&gt;&lt;br /&gt;Here are the links:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/unix-networking-client.html&quot;&gt;Client&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/unix-networking-server.html&quot;&gt;Server&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Further reading&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://beej.us/guide/bgnet/&quot;&gt;Beej's Guide to Network Programming&lt;/a&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unix IPC</title>
   <link href="http://tuttlem.github.io/2012/11/26/unix-ipc/"/>
   <updated>2012-11-26T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/26/unix-ipc</id>
   <content type="html">&lt;h1&gt;Unix IPC&lt;/h1&gt;
&lt;div class='post'&gt;
I have just put together a set of blog posts on the topic of inter-process communication in the Unix environment. These are by no means meant to be full tutorials on their respective parts, more just shortcuts to get something running quickly.&lt;br /&gt;&lt;br /&gt;If you are looking for something more substantial on the theory side, there is more than enough information strewn about the internet regarding these topics. The Unix man pages are also an excellent source of information.&lt;br /&gt;&lt;br /&gt;Like a code-snippet reference.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/unix-ipc-forking-and-waiting.html&quot;&gt;Forking and Waiting&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/unix-ipc-working-with-signals.html&quot;&gt;Working with Signals&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/unix-ipc-pipes-and-fifos.html&quot;&gt;Pipes and FIFOs&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/unix-ipc-locking-files.html&quot;&gt;Locking Files&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/unix-ipc-message-queues.html&quot;&gt;Message Queues&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/unix-ipc-semaphores.html&quot;&gt;Semaphores&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/unix-ipc-shared-memory_25.html&quot;&gt;Shared Memory&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/unix-ipc-memory-mapped-files.html&quot;&gt;Memory Mapped Files&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://cogsandlevers.blogspot.com.au/2012/11/unix-ipc-unix-sockets.html&quot;&gt;Unix Sockets&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;References&lt;br /&gt;&lt;a href=&quot;http://beej.us/guide/bgipc/&quot;&gt;Beej's Guide to Unix IPC&lt;/a&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Creating a NES emulator in C++11</title>
   <link href="http://tuttlem.github.io/2012/11/26/creating-a-nes-emulator-in-c-11/"/>
   <updated>2012-11-26T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/26/creating-a-nes-emulator-in-c-11</id>
   <content type="html">&lt;h1&gt;Creating a NES emulator in C++11&lt;/h1&gt;
&lt;div class='post'&gt;
I had to make a reference to these videos. Watching them is so entertaining (for someone like me). This is really how I wish programming would go!&lt;br /&gt;&lt;br /&gt;&lt;iframe allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/y71lli8MS8s&quot; width=&quot;560&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;  &lt;iframe allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/XZWw745wPXY&quot; width=&quot;560&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;Entertaining!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Using the GNU Debugger</title>
   <link href="http://tuttlem.github.io/2012/11/25/using-the-gnu-debugger/"/>
   <updated>2012-11-25T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/25/using-the-gnu-debugger</id>
   <content type="html">&lt;h1&gt;Using the GNU Debugger&lt;/h1&gt;
&lt;div class='post'&gt;
Bundled with the GNU toolset is a full featured debugger in GDB. This blog post aims to be a cheatsheet to get yourself around this tool quickly.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;The example program&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:c;&quot;&gt;int main(int argc, char *argv[]) {&lt;br /&gt;  /* some local variables */&lt;br /&gt;  int x = 1, y = 2, z = 0;&lt;br /&gt;  &lt;br /&gt;  /* something that will go bad */&lt;br /&gt;  int ans = x / z;&lt;br /&gt;&lt;br /&gt;  return 0;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;Compile your code with debug info&lt;/h3&gt;&lt;div&gt;You need to use the &quot;-g&quot; switch with GCC in order to compile debug symbols. This helps the feedback that GDB will give you a great deal.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;gcc -g test.c -o test&lt;br /&gt;&lt;/pre&gt;&lt;h3&gt;Loading your program into the debugger&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;So, in our example above the name of our executable would be &quot;test&quot;. So, we just tell gdb to load test by passing it in.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;gdb test&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;You can even start gdb with a text user interface, so I've just discovered.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot; style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;gdb test -tui&lt;/pre&gt;&lt;br /&gt;It looks like this - not bad, eh?&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-6Zx3N1_lUdg/ULHS7XhkRaI/AAAAAAAAAhg/oS9iA9-Jl1c/s1600/Screenshot+-+251112+-+18:11:48.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;276&quot; src=&quot;http://2.bp.blogspot.com/-6Zx3N1_lUdg/ULHS7XhkRaI/AAAAAAAAAhg/oS9iA9-Jl1c/s400/Screenshot+-+251112+-+18:11:48.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;Now we instruct gdb that we'd like to run the application&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain;&quot;&gt;(gdb) run&lt;br /&gt;Starting program: /home/michael/Development/gdb-tute/test &lt;br /&gt;&lt;br /&gt;Program received signal SIGFPE, Arithmetic exception.&lt;br /&gt;0x00000000004004c3 in main (argc=1, argv=0x7fffffffe4d8) at test.c:9&lt;br /&gt;9    ans = x / z;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;So you can see here that dividing by zero wasn't the best career move for this program. But It nicely let us know that there was an arithmetic exception on line 9!&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Examining data&lt;/h3&gt;To get just the call stack information, we issue the &quot;backtrace&quot; instruction&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain;&quot;&gt;(gdb) backtrace&lt;br /&gt;#0  0x00000000004004c3 in main (argc=1, argv=0x7fffffffe4d8) at test.c:9&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Examining data with print. We can view the value of variables by passing them to the print statement.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain;&quot;&gt;(gdb) print x&lt;br /&gt;$1 = 1&lt;br /&gt;(gdb) print y&lt;br /&gt;$2 = 2&lt;br /&gt;(gdb) print z&lt;br /&gt;$3 = 0&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Print also supports printf style specifiers. Examining data at an address. We can view the value of data at a memory location by using the &quot;x&quot; command.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain;&quot;&gt;(gdb) print &amp;amp;z&lt;br /&gt;$4 = (int *) 0x7fffffffe3e8&lt;br /&gt;(gdb) x 0x7fffffffe3e8&lt;br /&gt;0x7fffffffe3e8: 0x00000000&lt;/pre&gt;&lt;pre class=&quot;brush:plain;&quot;&gt;&lt;/pre&gt;&lt;br /&gt;Setting variables while attached is done with &quot;set&quot;. We can stop the error in the program at runtime using this mixed with a breakpoint.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain;&quot;&gt;Breakpoint 1, main (argc=1, argv=0x7fffffffe4d8) at test.c:6&lt;br /&gt;6    int x = 1, y = 2, z = 0;&lt;br /&gt;(gdb) next&lt;br /&gt;7    int ans = 0;&lt;br /&gt;(gdb) set (z = 5)&lt;br /&gt;(gdb) print z&lt;br /&gt;$1 = 5&lt;/pre&gt;&lt;h3&gt;Working with breakpoints&lt;/h3&gt;To set a breakpoint in gdb, just pass the name of what you'd like to break on to the &quot;break&quot; command.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain;&quot;&gt;(gdb) break main&lt;br /&gt;Breakpoint 1 at 0x40049f: file test.c, line 6.&lt;br /&gt;(gdb) run&lt;br /&gt;Starting program: /home/michael/Development/gdb-tute/test &lt;br /&gt;&lt;br /&gt;Breakpoint 1, main (argc=1, argv=0x7fffffffe4d8) at test.c:6&lt;br /&gt;6    int x = 1, y = 2, z = 0;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;You can set a breakpoint at a specific source code line number:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain;&quot;&gt;(gdb) break 7&lt;br /&gt;Breakpoint 1 at 0x4004b4: file test.c, line 7.&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Finally, you can make a breakpoint using a combination of source code file name and line location:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain;&quot;&gt;(gdb) break test.c:7&lt;br /&gt;Breakpoint 3 at 0x4004b4: file test.c, line 7.&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;View your existing breakpoints with &quot;info breakpoints&quot;&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain;&quot;&gt;(gdb) info breakpoints&lt;br /&gt;Num     Type           Disp Enb Address            What&lt;br /&gt;3       breakpoint     keep y   0x00000000004004b4 in main at test.c:7&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;You can clear any set breakpoint with &quot;clear&quot;.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:plain;&quot;&gt;(gdb) clear main&lt;br /&gt;Deleted breakpoint 1&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;You can step into code by issuing the step command  &lt;br /&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;(gdb) step&lt;br /&gt;7    int ans = 0;&lt;br /&gt;(gdb) &lt;br /&gt;9    ans = x / z;&lt;br /&gt;(gdb) &lt;br /&gt;&lt;/pre&gt;&lt;pre class=&quot;brush:shell;&quot;&gt;Program received signal SIGFPE, Arithmetic exception.&lt;br /&gt;0x00000000004004c3 in main (argc=1, argv=0x7fffffffe4d8) at test.c:9&lt;br /&gt;9    ans = x / z;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;You step over code by issuing &quot;next&quot;. Its usage is the same as &quot;step&quot;.&lt;br /&gt;&lt;br /&gt;That's all for now. As I come across other useful bits from GDB, I'll certainly post them here. The items above have been lifesavers for me from time to time&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unix Ipc Working With Signals</title>
   <link href="http://tuttlem.github.io/2012/11/25/unix-ipc-working-with-signals/"/>
   <updated>2012-11-25T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/25/unix-ipc-working-with-signals</id>
   <content type="html">&lt;h1&gt;Unix Ipc Working With Signals&lt;/h1&gt;
&lt;div class='post'&gt;
Incoming messages to your process can come in the form of a signal. Signals are standard message packets that the operating system will use to tell your process something about the environment.&lt;br /&gt;&lt;br /&gt;This snippet will show you show to setup a signal handler in your program.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:c;&quot;&gt;/** The signal handler */&lt;br /&gt;void sigint_handler(int sig) {&lt;br /&gt;	/* do something interesting with the sigint here */&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;int main(void) {&lt;br /&gt;&lt;br /&gt;	struct sigaction sa;&lt;br /&gt;&lt;br /&gt;	/* fill out the signal structure */&lt;br /&gt;	sa.sa_handler = sigint_handler;&lt;br /&gt;	sa.sa_flags   = 0;&lt;br /&gt;	sigemptyset(&amp;amp;sa.sa_mask);&lt;br /&gt;&lt;br /&gt;	/* assign it to the appropriate signal */&lt;br /&gt;	sigaction(SIGINT, &amp;amp;sa, NULL);&lt;br /&gt;&lt;br /&gt;	/* do other stuff here, sigint will be handled */&lt;br /&gt;	&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Further reading&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?sigaction+2&quot;&gt;The sigaction system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?signal+2&quot;&gt;The signal system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?raise&quot;&gt;The raise system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?kill+2&quot;&gt;The kill system call&lt;/a&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unix Ipc Unix Sockets</title>
   <link href="http://tuttlem.github.io/2012/11/25/unix-ipc-unix-sockets/"/>
   <updated>2012-11-25T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/25/unix-ipc-unix-sockets</id>
   <content type="html">&lt;h1&gt;Unix Ipc Unix Sockets&lt;/h1&gt;
&lt;div class='post'&gt;
Unix sockets talk locally on the machine. Their operation is very similar to standard socket operations (as they are the same in every way). This snippet will show you a server and client.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:c;&quot;&gt;int s, s2, t, len;&lt;br /&gt;struct sockaddr_un local, remote;&lt;br /&gt;char str[100];&lt;br /&gt;&lt;br /&gt;/* --- as a server --- */&lt;br /&gt;&lt;br /&gt;/* create the socket to serve on */&lt;br /&gt;s = socket(AF_UNIX, SOCK_STREAM, 0);&lt;br /&gt;&lt;br /&gt;/* fill out the address struct to listen on */&lt;br /&gt;local.sun_family = AF_UNIX;&lt;br /&gt;strcpy(local.sun_path, SOCK_PATH);&lt;br /&gt;unlink(local.sun_path);&lt;br /&gt;len = strlen(local.sun_path) + sizeof(local.sun_family);&lt;br /&gt;&lt;br /&gt;/* bind the socket to this name */&lt;br /&gt;bind(s, (struct sockaddr *)&amp;amp;local, len);&lt;br /&gt;/* listen on this socket */&lt;br /&gt;listen(s, 5);&lt;br /&gt;/* accept any incoming connection */&lt;br /&gt;s2 = accept(s, (struct sockaddr *)&amp;amp;remote, &amp;amp;t));&lt;br /&gt;/* receive some data */&lt;br /&gt;n = recv(s2, str, 100, 0);&lt;br /&gt;/* close the client */&lt;br /&gt;close(s2);&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;/* --- as a client --- */&lt;br /&gt;&lt;br /&gt;/* create a socket to connect on */&lt;br /&gt;s = socket(AF_UNIX, SOCK_STREAM, 0);&lt;br /&gt;&lt;br /&gt;/* fill out the address struct to connect to */&lt;br /&gt;remote.sun_family = AF_UNIX;&lt;br /&gt;strcpy(remote.sun_path, SOCK_PATH);&lt;br /&gt;len = strlen(remote.sun_path) + sizeof(remote.sun_family);&lt;br /&gt;&lt;br /&gt;/* connect on this socket */&lt;br /&gt;connect(s, (struct sockaddr *)&amp;amp;remote, len);&lt;br /&gt;&lt;br /&gt;/* send some data */&lt;br /&gt;send(s, str, strlen(str), 0);&lt;br /&gt;/* close the socket */&lt;br /&gt;close(s);&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Further reading&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?socket&quot;&gt;The socket system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?bind+2&quot;&gt;The bind system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?listen+2&quot;&gt;The listen system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?accept+2&quot;&gt;The accept system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?connect+2&quot;&gt;The connect system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?send+2&quot;&gt;The send system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?recv+2&quot;&gt;The recv system call&lt;/a&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unix Ipc Shared Memory</title>
   <link href="http://tuttlem.github.io/2012/11/25/unix-ipc-shared-memory/"/>
   <updated>2012-11-25T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/25/unix-ipc-shared-memory</id>
   <content type="html">&lt;h1&gt;Unix Ipc Shared Memory&lt;/h1&gt;
&lt;div class='post'&gt;
Shared memory allows multiple processes to view, modify and control shared segments of memory. This snippet will show you how to obtain a pointer to some shared memory and then release the pointer.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:c;&quot;&gt;key_t key;&lt;br /&gt;int shmid;&lt;br /&gt;&lt;br /&gt;/* get an ipc key */&lt;br /&gt;key = ftok(&quot;filename&quot;, 'R');&lt;br /&gt;&lt;br /&gt;/* connect to the segment */&lt;br /&gt;shmid = shmget(key, SHM_SIZE, 0644 | IPC_CREAT);&lt;br /&gt;&lt;br /&gt;/* attach to the segment */&lt;br /&gt;data = shmat(shmid, (void *)0, 0);&lt;br /&gt;&lt;br /&gt;/* perform writes and reads on the &quot;data&quot; pointer */&lt;br /&gt;&lt;br /&gt;/* detach from the segment */&lt;br /&gt;shmdt(data);&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Further reading&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?shmget&quot;&gt;The shmget system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?shmat&quot;&gt;The shmat system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?shmdt&quot;&gt;The shmdt system call&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unix Ipc Semaphores</title>
   <link href="http://tuttlem.github.io/2012/11/25/unix-ipc-semaphores/"/>
   <updated>2012-11-25T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/25/unix-ipc-semaphores</id>
   <content type="html">&lt;h1&gt;Unix Ipc Semaphores&lt;/h1&gt;
&lt;div class='post'&gt;
Semaphores can simplify access to shared resources. The following snippet will show you how to create a semaphore set and destroy it.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:c;&quot;&gt;key_t key;&lt;br /&gt;int semid;&lt;br /&gt;&lt;br /&gt;/* get an IPC key */&lt;br /&gt;key = ftok(&quot;filename&quot;, 'E');&lt;br /&gt;/* create the new semaphore set */&lt;br /&gt;semid = semget(key, 10, 0666 | IPC_CREAT);&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;/* destroy the semaphore */&lt;br /&gt;semctl(semid, 0, IPC_RMID);&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Further reading&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?semget&quot;&gt;The semget system call&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?semctl&quot;&gt;The semctl system call&lt;/a&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unix Ipc Pipes And Fifos</title>
   <link href="http://tuttlem.github.io/2012/11/25/unix-ipc-pipes-and-fifos/"/>
   <updated>2012-11-25T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/25/unix-ipc-pipes-and-fifos</id>
   <content type="html">&lt;h1&gt;Unix Ipc Pipes And Fifos&lt;/h1&gt;
&lt;div class='post'&gt;
This snippet will show you two processes communicating between each other using a pipe.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:c;&quot;&gt;int pfds[2];&lt;br /&gt;char buf[30];&lt;br /&gt;&lt;br /&gt;/* open the pipe */&lt;br /&gt;pipe(pfds);&lt;br /&gt;&lt;br /&gt;if (!fork()) {&lt;br /&gt;	/* the child will write to the pipe */&lt;br /&gt;    write(pfds[1], &quot;test&quot;, 5);&lt;br /&gt;    exit(0);&lt;br /&gt;} else {&lt;br /&gt;	/* the parent will read from the pipe */&lt;br /&gt;    read(pfds[0], buf, 5);&lt;br /&gt;    wait(NULL);&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;FIFOs are just pipes that have a specific name. In this snippet the name is a constant defined elsewhere called FIFO_NAME.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:c;&quot;&gt;/* first program writes to the named pipe */&lt;br /&gt;char buffer[20];&lt;br /&gt;int num, fd;&lt;br /&gt;&lt;br /&gt;/* create the named pipe */&lt;br /&gt;mknod(FIFO_NAME, S_IFIFO | 0666, 0);&lt;br /&gt;/* open for writing */&lt;br /&gt;fd = open(FIFO_NAME, O_WRONLY);&lt;br /&gt;/* write to the pipe */&lt;br /&gt;write(fd, buffer, strlen(buffer));&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;/* second program reads from the named pipe */&lt;br /&gt;char buffer[20];&lt;br /&gt;int num, fd;&lt;br /&gt;&lt;br /&gt;/* create the named pipe */&lt;br /&gt;mknod(FIFO_NAME, S_IFIFO | 0666, 0);&lt;br /&gt;/* open for reading */&lt;br /&gt;fd = open(FIFO_NAME, O_RDONLY);&lt;br /&gt;/* read from the pipe */&lt;br /&gt;read(fd, s, 20);&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Further reading:&lt;br /&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?mknod&quot;&gt;The mknod system call&lt;/a&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unix Ipc Message Queues</title>
   <link href="http://tuttlem.github.io/2012/11/25/unix-ipc-message-queues/"/>
   <updated>2012-11-25T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/25/unix-ipc-message-queues</id>
   <content type="html">&lt;p&gt;Message queues are pretty common structures for inter-process communication. A common queue is created by one of the processes, from there it can be connected to by any other process and have messages submitted to it.&lt;/p&gt;

&lt;p&gt;This snippet shows the creation of a queue and sending a message. Another block below this will show receiving a message from the queue.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msqid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;key_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;cm&quot;&gt;/* --- message sender --- */&lt;/span&gt;
 
&lt;span class=&quot;cm&quot;&gt;/* make a key */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ftok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;first&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* create the message queue */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;msqid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0644&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPC_CREAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
 
&lt;span class=&quot;cm&quot;&gt;/* put a message onto the queue */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;msgsnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msqid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
&lt;span class=&quot;cm&quot;&gt;/* destroy (remove) the message queue */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;msgctl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msqid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPC_RMID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
 
&lt;span class=&quot;cm&quot;&gt;/* --- message receiver --- */&lt;/span&gt;
 
&lt;span class=&quot;cm&quot;&gt;/* make a key */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ftok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;second&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* connect to the message queue */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;msqid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0644&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* receive the message off the queue */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;msgrcv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msqid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further reading&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?ftok&quot;&gt;The ftok system call&lt;/a&gt;
&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?msgget&quot;&gt;The msgget system call&lt;/a&gt;
&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?msgsnd&quot;&gt;The msgsnd system call&lt;/a&gt;
&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?msgctl&quot;&gt;The msgctl system call&lt;/a&gt;
&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?msgrcv&quot;&gt;The msgrcv system call&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unix Ipc Memory Mapped Files</title>
   <link href="http://tuttlem.github.io/2012/11/25/unix-ipc-memory-mapped-files/"/>
   <updated>2012-11-25T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/25/unix-ipc-memory-mapped-files</id>
   <content type="html">&lt;p&gt;This snippet will show you how to open a file and map it into memory.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pagesize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;cm&quot;&gt;/* open the file */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;somefile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_RDONLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
&lt;span class=&quot;cm&quot;&gt;/* get the current page size */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pagesize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getpagesize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 
&lt;span class=&quot;cm&quot;&gt;/* map the 2nd page into memory */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;caddr_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pagesize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROT_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAP_SHARED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pagesize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                                        
&lt;span class=&quot;cm&quot;&gt;/* start using the data pointer */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further reading&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?mmap&quot;&gt;The mmap system call&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unix Ipc Locking Files</title>
   <link href="http://tuttlem.github.io/2012/11/25/unix-ipc-locking-files/"/>
   <updated>2012-11-25T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/25/unix-ipc-locking-files</id>
   <content type="html">&lt;p&gt;Locking a file helps assure your program that no other processes can tamper with it or a region of it.&lt;/p&gt;

&lt;p&gt;This snippet will show you how to lock and unlock a file.struct flock fl;
int fd;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* fill out the lock structure */&lt;/span&gt;   
&lt;span class=&quot;n&quot;&gt;fl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_type&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_WRLCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;fl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_whence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEEK_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_start&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       
&lt;span class=&quot;n&quot;&gt;fl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_len&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       
&lt;span class=&quot;n&quot;&gt;fl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_pid&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 
&lt;span class=&quot;cm&quot;&gt;/* open the file */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;filename&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_WRONLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
&lt;span class=&quot;cm&quot;&gt;/* lock the file */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fcntl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_SETLKW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
&lt;span class=&quot;cm&quot;&gt;/* --- complete any work here with the file locked --- */&lt;/span&gt;
 
&lt;span class=&quot;cm&quot;&gt;/* unlock the file now */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_type&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_UNLCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;fcntl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_SETLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further reading&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?fcntl&quot;&gt;The fcntl system call&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unix Ipc Forking And Waiting</title>
   <link href="http://tuttlem.github.io/2012/11/25/unix-ipc-forking-and-waiting/"/>
   <updated>2012-11-25T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/25/unix-ipc-forking-and-waiting</id>
   <content type="html">&lt;p&gt;In order to create processes within the Unix environment, you must fork. Forking a process establishes the parent / child relationship which is where the waiting comes into it. All good parents wait for their children to die before terminating.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s just good manners, you know?&lt;/p&gt;

&lt;p&gt;So, the snippet for this will be a fork and wait set:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* fork execution here */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child_exit_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* -1 indicates that fork failed */&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* 0 indicates that this is the child process */&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* the pid being returned indicates it&amp;#39;s the parent */&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* wait for the child to finish and&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    capture its exit code */&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_exit_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further reading&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?fork+2&quot;&gt;The fork system call&lt;/a&gt;
&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?wait+2&quot;&gt;The wait system call&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Calling Assembly from C (32 bit)</title>
   <link href="http://tuttlem.github.io/2012/11/25/calling-assembly-from-c-32-bit/"/>
   <updated>2012-11-25T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/25/calling-assembly-from-c-32-bit</id>
   <content type="html">&lt;p&gt;One of the biggest advantages of being able to write assembly code is to optimise any bits of your application that you want. That way you can maintain your code base in a half-sane language (like C) and roll your sleeves up to speed up the smaller parts that you want.&lt;/p&gt;

&lt;p&gt;This blog post will show you how to call a routine that you&amp;#39;ve defined in assembly language from your C code. The example that I&amp;#39;ll show has been done in a Linux environment using &lt;a href=&quot;http://www.nasm.us/&quot;&gt;NASM&lt;/a&gt; as the assembler and &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GCC&lt;/a&gt; for the C compiler.&lt;/p&gt;

&lt;p&gt;First of all, let&amp;#39;s write our C program. This will simply add two integers and output the results using &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/functions/printf.html&quot;&gt;printf&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/** Forward declaration for our add function */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;cm&quot;&gt;/* add some numbers */&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

   &lt;span class=&quot;cm&quot;&gt;/* print the result out */&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;5+4=%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There isn&amp;#39;t anything of great interest in here. We have a forward declaration for our add function. That&amp;#39;s about it. Now we have to supply an implementation for our add routine. For this we&amp;#39;ll be using assembly language.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nasm&quot;&gt;&lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;add&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;.text&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;add:&lt;/span&gt;
   &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;; get the 1st param&lt;/span&gt;
   &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;; get the 2nd param&lt;/span&gt;
   &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;; add them together&lt;/span&gt;
                         &lt;span class=&quot;c1&quot;&gt;; leaving the return value in eax&lt;/span&gt;

   &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is all pretty straight forward. We define a symbol &amp;quot;add&amp;quot; as global. In the code (or .text) section, we supply an implementation for it. The trickiest part here is being able to retrieve parameters that are passed in from the C level. You can see that we&amp;#39;re addressing stack pointer to do so. &lt;/p&gt;

&lt;p&gt;Add takes two parameters. In this scenario (c-calling convention) the parameters to the function are pushed onto the stack in reverse order. So, the second parameter goes onto the stack first and then the first. Once all of the pushing has complete, the first parameter is at &lt;code&gt;[esp+4]&lt;/code&gt; and the second is at &lt;code&gt;[esp+8]&lt;/code&gt;. Remember - an integer (on this architecture) has 4 bytes (32 bits).&lt;/p&gt;

&lt;p&gt;Return values are always left in &lt;code&gt;eax&lt;/code&gt;. You&amp;#39;ll see that after the arithmetic completes, it&amp;#39;ll be &lt;code&gt;eax&lt;/code&gt; that holds the answer. It&amp;#39;s what will be given back to the caller.&lt;/p&gt;

&lt;p&gt;Finally, all we need to do is compile these files and link together their object files. We do this from the Linux console with the following commands.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;gcc -m32 -c -g add.c -o add.o
nasm -felf32 maths.asm -o maths.o
gcc -m32 add.o maths.o -o add&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;#39;re done. I&amp;#39;ll be doing another one of these sorts of blog posts shortly demonstrating how we&amp;#39;ll do this in the 64-bit arena.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Pretty code is readable code</title>
   <link href="http://tuttlem.github.io/2012/11/24/pretty-code-is-readable-code/"/>
   <updated>2012-11-24T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/24/pretty-code-is-readable-code</id>
   <content type="html">&lt;p&gt;There&amp;#39;s no doubt about it. Syntax highlighting in code is the cornerstone of readability (in my mind anyway). I was browsing around today and found an assembly language highlighter for visual studio &lt;a href=&quot;http://asmhighlighter.codeplex.com&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now my code looks like this (inside of VS).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://1.bp.blogspot.com/-anD4yrKLxDE/ULAke-WtJsI/AAAAAAAAAhA/gNxQirJQAaU/s400/Screen+Shot+2012-11-24+at+11.35.06+AM.png&quot; alt=&quot;Screen shot&quot;&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Holy smoke!</title>
   <link href="http://tuttlem.github.io/2012/11/24/holy-smoke/"/>
   <updated>2012-11-24T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/24/holy-smoke</id>
   <content type="html">&lt;p&gt;Well, not really.&lt;/p&gt;

&lt;p&gt;Nostalgia got the better of me today in the form of some good old mode 13 demo code. All the hours I&amp;#39;d blown previously developing little tid-bit apps like this and I never saved off any of my code. Thankfully, I have a good memory and whilst my assembly skills aren&amp;#39;t &amp;quot;top shelf&amp;quot;, they&amp;#39;re certainly up to the task of re-creating this sort of effect.&lt;/p&gt;

&lt;h3 id=&quot;smoke,-fire,-flame?&quot;&gt;Smoke, Fire, Flame?&lt;/h3&gt;

&lt;p&gt;They&amp;#39;re all the same. They work of the same principal. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set a palette that suits your effect (yellows, reds, orange for fire), (black to white for smoke)&lt;/li&gt;
&lt;li&gt;Create some noise as far south as you can on the video buffer&lt;/li&gt;
&lt;li&gt;Blur the pixels out on the screen making your resulting pixels ascend and decay&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Easy!&lt;/p&gt;

&lt;h3 id=&quot;on-to-the-code-...&quot;&gt;On to the code ...&lt;/h3&gt;

&lt;p&gt;So, I&amp;#39;ll present this little demo in a couple of chunks and explain them as I show them. The code is pretty well documented anyway so that reading it line for line should be very self-explanitory.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nasm&quot;&gt;&lt;span class=&quot;nf&quot;&gt;.model&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;small&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;.stack&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;100h&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;.code&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;start:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0013h&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;; set 320x200x256 mode&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;10h&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0a000h&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;; we can&amp;#39;t directly address ES so &lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ax&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;; we do so through AX. ES = A000&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;setup_palette&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;; setup a palette with greyscale &lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;; to support the smoke effect&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;no_kbhit:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;randomize_lines&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; draw some random pixels &lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;oom&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;; average out the video buffer&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;01h&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;; test for a key press&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;16h&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;jz&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;no_kbhit&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;; continue running if no key was hit&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0003h&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;; set text mode&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;10h&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4c00h&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;; return control back to dos&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;21h&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; -- subroutines removed for brevity&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the main program. It needs to drop us into the required video mode, make sure we don&amp;#39;t want to quit (i.e. was there a key hit?), actually perform the effect (the loop of random/average) and then clean up (send us back to text mode, return control to dos).&lt;/p&gt;

&lt;h3 id=&quot;giving-the-effect-some-colour&quot;&gt;Giving the effect some colour&lt;/h3&gt;

&lt;p&gt;Setting up the palette in this type of routine really does determine the &amp;quot;type&amp;quot; of routine that it is. As I&amp;#39;d said above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Purely greyscale will give you a smokey effect on screen&lt;/li&gt;
&lt;li&gt;Gradients running through black, red, orange, yellow, white will give you fire/flame&lt;/li&gt;
&lt;li&gt;Black, blue up to purple will give you a cool alcohol type fire&lt;/li&gt;
&lt;li&gt;Greens will give you something alien&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The idea is to experiment with palette creation to see what comes out best for you. Here&amp;#39;s how I setup a greyscale palette.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nasm&quot;&gt;&lt;span class=&quot;nl&quot;&gt;setup_palette:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;; 256 colour indicies to set&lt;/span&gt;
    
&lt;span class=&quot;nl&quot;&gt;next_colour_idx:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;; setup al so that we&amp;#39;re setting&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cl&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;; colour indicies from low to high&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3c7h&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;; this port selects the colour index&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;; that we&amp;#39;ll set r,g,b for&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3c9h&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;; this port sets the r,g,b components&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;; for the selected index&lt;/span&gt;
                            
    &lt;span class=&quot;nf&quot;&gt;shr&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;; rgb intensities are in range of 0..63&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;; so, divide by 4 to adjust&lt;/span&gt;
                            
    &lt;span class=&quot;nf&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;; set the red&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;; set the green&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;; set the blue&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cx&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;; move onto the next colour&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;jnz&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next_colour_idx&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, just a touch of VGA theory here. Unlike today&amp;#39;s video modes, the 256 colour VGA supported 256 indices that each had an RGB intensity set ranging (0..63) each. Sometime, I don&amp;#39;t know how we ever used this video mode, but we got by -- and made some damn cool stuff using it. So, software port &lt;code&gt;3c7&lt;/code&gt; takes a colour index. 3c8 can be used to read the colour intensities (not used in this program). &lt;code&gt;3c9&lt;/code&gt; is the port we use to write (r,g,b) intensities. Dividing by 4 allows me to interpolate 0..255 against 0..63 so that 0 is the colour with least intensity up to 255 which has the greatest.&lt;/p&gt;

&lt;h3 id=&quot;(not-so)-random&quot;&gt;(not so) Random&lt;/h3&gt;

&lt;p&gt;Getting psuedo random numbers with nothing in the toolbox is difficult. The method that I&amp;#39;ve used here is to constantly read from &lt;a href=&quot;http://www.inversereality.org/tutorials/interrupt%20programming/timerinterrupt.html&quot;&gt;software port 40h&lt;/a&gt; which is tightly coupled with the timer interrupt but it keeps a fairly steady count. The uniformity of these numbers actually provides a very tame smoke effect, you&amp;#39;re not going to see much chaos.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nasm&quot;&gt;&lt;span class=&quot;nl&quot;&gt;randomize_lines:&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;640&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;; we&amp;#39;re going to set two rows of pixels&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;; at the bottom of the screen to be &lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;; random colours, so that&amp;#39;s 640 pixels&lt;/span&gt;
                            
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63360&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;; we&amp;#39;re going to start writing these &lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;; pixels on the last two lines so that&amp;#39;s&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;; 64000 - 640&lt;/span&gt;
                            
&lt;span class=&quot;nl&quot;&gt;next_rand_pixel:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;40h&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;; we get quasi-random values from port 40h&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dx&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;stosb&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;; store the pixel on screen&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cx&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;; move onto the next pixel&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;jnz&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next_rand_pixel&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, following along with the effect we only randomize the last two rows of the video array. Simple.&lt;/p&gt;

&lt;h3 id=&quot;airbrush,-airbrush!!&quot;&gt;Airbrush, Airbrush!!&lt;/h3&gt;

&lt;p&gt;It&amp;#39;s just an averaging effect. We take the average of the current pixel, left, right and top most. We then re-set the pixel back into video memory 1 pixel above our current location. Therefore, we have no interest in trying to process the top-most row of video memory.&lt;/p&gt;

&lt;p&gt;The only other part that is a little awkward to look at in this code block will be the &lt;code&gt;ADC&lt;/code&gt; instructions. We&amp;#39;re dealing with bytes (values of 0..255). We&amp;#39;re adding 4 of these together so we&amp;#39;re going to quickly overflow a byte sized register. &lt;code&gt;ADC&lt;/code&gt; (or add with carry adjustment) allows us to overflow this information into &lt;code&gt;AX&lt;/code&gt;&amp;#39;s higher-order byte (&lt;code&gt;AH&lt;/code&gt;). When it comes time to divide (or take the arithmetic average) of this pixel&amp;#39;s intensity, we&amp;#39;ll be able to perform this operation on the word sized &lt;code&gt;AX&lt;/code&gt; register. Neat. Check it out:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nasm&quot;&gt;&lt;span class=&quot;nl&quot;&gt;bloom:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63680&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;; we average every pixel except the top row&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;320&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;; we start at the 2nd row&lt;/span&gt;
    
&lt;span class=&quot;nl&quot;&gt;next_avg:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ax&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;; clear out our accumulator&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;; get the current pixel&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;; add the pixel to the left&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;adc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;; adjust for overflow&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;; add the pixel to the right&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;adc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;; adjust for overflow&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;320&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; add the pixel above&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;adc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;; adjust for overflow&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;shr&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;; divide by 4 to get the average&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;; can we dampen?&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;jz&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;no_damp&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;; jump over if we can&amp;#39;t&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;; dampen the colour by 1&lt;/span&gt;
    
&lt;span class=&quot;nl&quot;&gt;no_damp:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;320&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;; put the averaged pixel 1 pixel above&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;di&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;; next pixel&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cx&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;; keep count of how many we&amp;#39;ve got left&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;jnz&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next_avg&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, when you put it all together (and run it in DosBox) you&amp;#39;ll get something that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://2.bp.blogspot.com/-0SUcxXs8a_k/ULCQvxj-8qI/AAAAAAAAAhQ/hlD_2uNejwE/s400/Screen+Shot+2012-11-24+at+7.16.37+PM.png&quot; alt=&quot;Smoke application running&quot;&gt;&lt;/p&gt;

&lt;p&gt;Well.. I&amp;#39;m feeling all nostalgic now. Might go and fire up DosBox and play a couple of games of Double Dragon.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Beej's Tutorials</title>
   <link href="http://tuttlem.github.io/2012/11/24/beej-s-tutorials/"/>
   <updated>2012-11-24T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/24/beej-s-tutorials</id>
   <content type="html">&lt;p&gt;For such a long time I have read over these tutorials. They have been a great source of information in doing things the &amp;quot;unix way&amp;quot;.&lt;/p&gt;

&lt;p&gt;Beej&amp;#39;s site
&lt;a href=&quot;http://beej.us&quot;&gt;http://beej.us&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beej&amp;#39;s Guide to Network Programming
&lt;a href=&quot;http://beej.us/guide/bgnet/output/html/singlepage/bgnet.html&quot;&gt;http://beej.us/guide/bgnet/output/html/singlepage/bgnet.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beej&amp;#39;s Guide to Unix IPC
&lt;a href=&quot;http://beej.us/guide/bgipc/output/html/singlepage/bgipc.html/&quot;&gt;http://beej.us/guide/bgipc/output/html/singlepage/bgipc.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beej&amp;#39;s Quick Guide to GDB
&lt;a href=&quot;http://beej.us/guide/bggdb/&quot;&gt;http://beej.us/guide/bggdb/&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scissors, Paper, Rock!</title>
   <link href="http://tuttlem.github.io/2012/11/21/scissors-paper-rock/"/>
   <updated>2012-11-21T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/21/scissors-paper-rock</id>
   <content type="html">&lt;p&gt;Haskell is a strange beast at times. I think you can see from the brute-force approach on this implementation of SPR that I was getting clearly frustrated with even some of the simplest of things.&lt;/p&gt;

&lt;p&gt;I really could have used &amp;quot;Maybe&amp;quot;
I really could have used &amp;quot;Read&amp;quot;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s a learning experience:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;

   &lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.IO&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Random&lt;/span&gt;

   &lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Move&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scissors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Paper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unknown&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Outcome&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Winner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Draw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Loser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ND&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;str2Move&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Move&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;str2Move&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scissors&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Paper&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rock&lt;/span&gt;
         &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unknown&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;getWinner&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Move&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Move&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;getWinner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
         &lt;span class=&quot;kt&quot;&gt;Scissors&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rock&lt;/span&gt;
         &lt;span class=&quot;kt&quot;&gt;Rock&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Paper&lt;/span&gt;
         &lt;span class=&quot;kt&quot;&gt;Paper&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scissors&lt;/span&gt;
         &lt;span class=&quot;kt&quot;&gt;Unknown&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unknown&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;getOutcome&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Move&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Move&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Outcome&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;getOutcome&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpu&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unknown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unknown&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ND&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpu&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Draw&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;winner&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Loser&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Winner&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;winner&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getWinner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;getCpuMove&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StdGen&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Move&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;getCpuMove&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newGen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StdGen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randNumber&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
         &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rock&lt;/span&gt;
         &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scissors&lt;/span&gt;
         &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Paper&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getStdGen&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;putStr&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Enter your choice (s, p or r): &amp;quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;hFlush&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getLine&lt;/span&gt;

      &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2Move&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpu&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCpuMove&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outcome&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getOutcome&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpu&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Player Chose: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Cpu Chose   : &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Outcome     : &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some who have been nice enough to comment from time to time have suggested that I move forward with this implementation (inclusion of Lizard, Spock).&lt;/p&gt;

&lt;p&gt;Anyway, I&amp;#39;ll keep struggling.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Tools for Webgeneers</title>
   <link href="http://tuttlem.github.io/2012/11/20/tools-for-webgeneers/"/>
   <updated>2012-11-20T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/20/tools-for-webgeneers</id>
   <content type="html">&lt;p&gt;This one came across the news wire today. I just wanted to make a note of it so that I don&amp;#39;t loose it.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s plenty in here that will allow you to take any site from 0 to hero.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ivanzuzak.info/2012/11/18/the-web-engineers-online-toolbox.html&quot;&gt;http://ivanzuzak.info/2012/11/18/the-web-engineers-online-toolbox.html&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Daemons in Python</title>
   <link href="http://tuttlem.github.io/2012/11/20/daemons-in-python/"/>
   <updated>2012-11-20T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/20/daemons-in-python</id>
   <content type="html">&lt;p&gt;Didn&amp;#39;t want to loose this bookmark, so thought I&amp;#39;d pop it here for later.&lt;/p&gt;

&lt;p&gt;I would expect that you&amp;#39;ll see some posts about this topic shortly.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blip.tv/episode/5592905&quot;&gt;http://blip.tv/episode/5592905&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Be nice and die well</title>
   <link href="http://tuttlem.github.io/2012/11/20/be-nice-and-die-well/"/>
   <updated>2012-11-20T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/20/be-nice-and-die-well</id>
   <content type="html">&lt;p&gt;It&amp;#39;s a morbid title, I agree but it is quite important. Unix daemons really need to listen to the messages (read as: signals) being sent to them and responding correctly. At the very least, if every daemon implemented the following it&amp;#39;d be a breath of fresh air:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/** Responds to signals of interest */&lt;/span&gt;                                                                    
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;daemon_signalhandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                      
                                                                            
   &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                                         
                                                                            
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIGHUP&lt;/span&gt;:                                                        
         &lt;span class=&quot;cm&quot;&gt;/* this should just refresh configs and restart */&lt;/span&gt;                                      
         &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                           
                                                                            
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIGTERM&lt;/span&gt;:                                                       
         &lt;span class=&quot;cm&quot;&gt;/* mark the server as no longer running */&lt;/span&gt;                                               
         &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                           
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                                      
                                                                            
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This block of code by itself is pretty useless. The other half of the equation is attaching this function to the signals of interest as well as ignoring signals we&amp;#39;re not interested in (or that we&amp;#39;re not interested in those signals turning our daemon to toast).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* attach the signal handlers now */&lt;/span&gt;                                  
&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGCHLD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIG_IGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                             
&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGTSTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIG_IGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                             
&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGTTOU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIG_IGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                             
&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGTTIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIG_IGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                             
&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGHUP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daemon_signalhandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                 
&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGTERM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daemon_signalhandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Well, that&amp;#39;s it really and remember - die well.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Movie Time Unix</title>
   <link href="http://tuttlem.github.io/2012/11/19/movie-time-unix/"/>
   <updated>2012-11-19T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/19/movie-time-unix</id>
   <content type="html">&lt;p&gt;Breakout the pop-corn, it&amp;#39;s movie time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://techchannel.att.com/play-video.cfm/2012/2/22/AT&amp;amp;amp;T-Archives-The-UNIX-System&quot;&gt;http://techchannel.att.com/play-video.cfm/2012/2/22/AT&amp;amp;T-Archives-The-UNIX-System&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Haskell Cards</title>
   <link href="http://tuttlem.github.io/2012/11/19/haskell-cards/"/>
   <updated>2012-11-19T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/19/haskell-cards</id>
   <content type="html">&lt;p&gt;I need to crawl before I can walk, so a lot of &amp;quot;toy code&amp;quot; is being written using Haskell. It&amp;#39;s taken me a while to get to this point, but I now have cards being shuffled to players:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cards&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
 
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Random&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Maybe&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.List&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Function&lt;/span&gt;
 
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Test.HUnit&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Test.QuickCheck&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;-- | Card values for uno cards&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CardValue&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Naught&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;One&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Three&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Four&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Five&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Six&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nine&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Reverse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DrawTwo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Wild&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WildDrawFour&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;-- | Possible card colours&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CardColour&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Green&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Yellow&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;-- | Defines the attributes of a card&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CardValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CardColour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;-- | Seeds a list of cards with a random value&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;seedCards&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StdGen&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;seedCards&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;seedCards&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seedCards&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ng&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StdGen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;-- | Makes a randomly shuffled deck of cards&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;makeShuffledDeck&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StdGen&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;makeShuffledDeck&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seedCards&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deck&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;sorted&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortBy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;deck&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Naught&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DrawTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Wild&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WildDrawFour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
 
&lt;span class=&quot;nf&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TestList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TestCase&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;add tests here&amp;quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 
&lt;span class=&quot;nf&quot;&gt;prop_empty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;
 
&lt;span class=&quot;nf&quot;&gt;runTests&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;runTestTT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;quickCheck&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prop_empty&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;-- | Main entry point&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runTests&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is a lot more to do before this becomes of use. The real think work being conducted here is really between seedCards and makeShuffledDeck. These two functions alone provide randomization to the ordered deck so it can be shuffled.&lt;/p&gt;

&lt;p&gt;I hope to post some more on this topic, but I&amp;#39;d like to have a fully functional (or close to) application before I do so.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Book on Algorithms</title>
   <link href="http://tuttlem.github.io/2012/11/19/book-on-algorithms/"/>
   <updated>2012-11-19T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/19/book-on-algorithms</id>
   <content type="html">&lt;p&gt;Just so I don&amp;#39;t lose track of it, &lt;a href=&quot;http://www.cs.berkeley.edu/%7Evazirani/algorithms.html&quot;&gt;here&amp;#39;s&lt;/a&gt; a really good looking book on Algorithms.&lt;/p&gt;

&lt;p&gt;Will be worth some study and the centre of a few more blog posts to come!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>OS Development Links</title>
   <link href="http://tuttlem.github.io/2012/11/18/os-development-links/"/>
   <updated>2012-11-18T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/18/os-development-links</id>
   <content type="html">&lt;p&gt;Over the past couple of months, I&amp;#39;ve compiled and refined a list of links that have been of assistance though my OS development journey.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.osdever.net/bkerndev/index.php&quot;&gt;Bona Fide OS Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jamesmolloy.co.uk/tutorial_html/index.html&quot;&gt;Roll your own toy UNIX-clone OS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.osdev.org/Tutorials&quot;&gt;OSDev Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forum.osdev.org/&quot;&gt;OSDev Forums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>LISP Experiments</title>
   <link href="http://tuttlem.github.io/2012/11/18/lisp-experiments/"/>
   <updated>2012-11-18T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/18/lisp-experiments</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve always been interested in the mesmerising effect of browsing LISP style code. I wanted to make a blog post just to remember to take a look at it from time to time.&lt;/p&gt;

&lt;p&gt;Installation in a debian-based world is as simple as&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo apt-get install clisp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You&amp;#39;ll also be able to dress your code up inside of vim with &lt;a href=&quot;https://github.com/kien/rainbow_parentheses.vim&quot;&gt;Rainbow Parentheses&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just remember to take a look!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>C Styles</title>
   <link href="http://tuttlem.github.io/2012/11/18/c-styles/"/>
   <updated>2012-11-18T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/18/c-styles</id>
   <content type="html">&lt;p&gt;A post about &amp;quot;Mustache templates&amp;quot; in C that I have &lt;a href=&quot;http://tia.mat.br/posts/mustache_templates_in_c/&quot;&gt;come across&lt;/a&gt; has linked me through to two rather interesting articles about C programming styles.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc-3.3.1/gcc/Compound-Literals.html&quot;&gt;Compound Literals&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.run.montefiore.ulg.ac.be/%7Emartin/resources/kung-f00.html&quot;&gt;Anonymous Arrays&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;d previously been doing things very long-hand up until now.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>State Management in Games</title>
   <link href="http://tuttlem.github.io/2012/11/17/state-management-in-games/"/>
   <updated>2012-11-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/17/state-management-in-games</id>
   <content type="html">&lt;p&gt;The title of this post does mention &amp;quot;Games&amp;quot;. In all honesty, with very minor modification you could change this implementation to suit any state requisition situation.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s the boring stuff that stops me half-way through developing a computer game. Building a menu, a title screen, a high-score chart.. you know, the stuff that takes you away from that big eye-candy feature that&amp;#39;s in the game.&lt;/p&gt;

&lt;p&gt;Anyway, the implementation starts with a base class that manages some state. It&amp;#39;s a class that has provision to allow any derivatives of it to provide reaction code. The state manager will actually cause these &amp;quot;reactions&amp;quot; to occur. You&amp;#39;ll see this one shortly.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the class itself:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;constructed&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
     &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;destructed&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
     &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;initializing&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
     &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;teardown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;tearing down&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
     &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;progress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
     &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;protected:&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;_finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, this is all nice and abstract. It doesn&amp;#39;t really do anything. Here&amp;#39;s a simple derivative. Don&amp;#39;t expect too much, it really doesn&amp;#39;t do that much at all:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c--&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;first_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;first_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
     &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
     &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;teardown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;teardown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
     &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;progress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;progressing ...&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_finished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, we have the state machine. It is the kernel, the guy &amp;quot;in charge&amp;quot;. This will progress execution through the chain of states to ensure the story-board is presented to the user in such a way that they have a nice feeling of continuity throughout the game:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c--&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;state_machine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;state_machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;state_machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
     &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;_current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 
           &lt;span class=&quot;n&quot;&gt;_current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;progress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 
           &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;_current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;teardown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;_current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
 
              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;_current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
  &lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To really make this of immediate use to a games programmer, I suggest the reader takes this code as an example and implements the following necessities:&lt;/p&gt;

&lt;h3 id=&quot;time-management&quot;&gt;Time management&lt;/h3&gt;

&lt;p&gt;Giving the programmer the ability to tell how long it was between frame renders or even being able to control the number of frames processed per second is a requirement. This is the heartbeat/lifeblood to giving your program the ability to exist in a human (or non-human) consistent time scale.&lt;/p&gt;

&lt;h3 id=&quot;eventing&quot;&gt;Eventing&lt;/h3&gt;

&lt;p&gt;Most media libraries define some sort of eventing to allow the library to interact with the hosting operating system. These interrupts or notion of &amp;quot;important incoming information&amp;quot; needs to be embraced into the state framework as one of the most important side-effects can come from external interation (keyboards, mouse, etc).&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Python and Relational Data Access</title>
   <link href="http://tuttlem.github.io/2012/11/17/python-and-relational-data-access/"/>
   <updated>2012-11-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/17/python-and-relational-data-access</id>
   <content type="html">&lt;p&gt;If there&amp;#39;s one job that I&amp;#39;m never keen on getting done, it&amp;#39;s the mind-numbing task of wiring up data access into my application. I&amp;#39;m a big fan of purely abstracted data objects just so the underlying data implementation can really be anything (within reason).&lt;/p&gt;

&lt;p&gt;With all of the &lt;strong&gt;Flask&lt;/strong&gt; development that I&amp;#39;m doing at the moment, it was hard to go past &lt;strong&gt;SQLAlchemy&lt;/strong&gt;. Quite an old-school library to all the python-heads, but quite the lifesaver to me.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sqlalchemy.org/features.html&quot;&gt;&lt;a href=&quot;http://www.sqlalchemy.org/features.html&quot;&gt;http://www.sqlalchemy.org/features.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Out of my (un-creative) hands.</title>
   <link href="http://tuttlem.github.io/2012/11/17/out-of-my-un-creative-hands/"/>
   <updated>2012-11-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/17/out-of-my-un-creative-hands</id>
   <content type="html">&lt;p&gt;It&amp;#39;s no secret. I suck at style.&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t like it, it doesn&amp;#39;t like me.&lt;/p&gt;

&lt;p&gt;Problem is, we need to work in harmony (somehow) as in order to host web-based projects, I need some sort of design to host the application within.&lt;/p&gt;

&lt;p&gt;Enter: Twitter Bootstrap (&lt;a href=&quot;http://twitter.github.com/bootstrap/&quot;&gt;&lt;a href=&quot;http://twitter.github.com/bootstrap/&quot;&gt;http://twitter.github.com/bootstrap/&lt;/a&gt;&lt;/a&gt;) &lt;/p&gt;

&lt;p&gt;The plugins, designs and documentation allow me to assemble websites without much more though.&lt;/p&gt;

&lt;p&gt;I can go back to being an engineer!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Inlining Assembly Language with GCC</title>
   <link href="http://tuttlem.github.io/2012/11/17/inlining-assembly-language-with-gcc/"/>
   <updated>2012-11-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/17/inlining-assembly-language-with-gcc</id>
   <content type="html">&lt;p&gt;Noteworthy without this article is Lockless (&lt;a href=&quot;http://locklessinc.com/articles/gcc_asm/&quot;&gt;&lt;a href=&quot;http://locklessinc.com/&quot;&gt;http://locklessinc.com/&lt;/a&gt;&lt;/a&gt;) for the great super-technical write-ups that they do.&lt;/p&gt;

&lt;p&gt;Inlining assembly language using the GNU toolset has always escaped me (until now). It&amp;#39;s not so much that I didn&amp;#39;t know how to do it, I just felt it much more comfortable to write my assembly in a separately linked object. This article has put my mind, stomach and C blending assembly fingers at ease.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://locklessinc.com/articles/gcc_asm/&quot;&gt;&lt;a href=&quot;http://locklessinc.com/articles/gcc_asm/&quot;&gt;http://locklessinc.com/articles/gcc_asm/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello, 64bit Assembly!</title>
   <link href="http://tuttlem.github.io/2012/11/17/hello-64bit-assembly/"/>
   <updated>2012-11-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/17/hello-64bit-assembly</id>
   <content type="html">&lt;p&gt;So, I&amp;#39;m a tragic for assembly language. I&amp;#39;ve finally gotten around to sharpening up my skills to attack Linux with some assembly language and why not upgrade the skills into the 64bit world at the same time.  &lt;/p&gt;

&lt;p&gt;&amp;quot;Hello world&amp;quot; follows:  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nasm&quot;&gt;&lt;span class=&quot;k&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;.data&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;hello:&lt;/span&gt;      &lt;span class=&quot;kd&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;; text plus a linefeed char&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;helloLen:&lt;/span&gt;   &lt;span class=&quot;nf&quot;&gt;equ&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hello&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;; length of the string&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;.text&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_start&lt;/span&gt;
    
&lt;span class=&quot;nl&quot;&gt;_start:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;; system call for &amp;quot;write&amp;quot; (sys_write)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;; file descriptor (stdout = 1)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hello&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;; offset to write&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;helloLen&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;; number of bytes to write&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;; syscall&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;; system call for exit (sys_exit)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;; error code (no error = 0)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;; syscall&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Build at the command line with &lt;b&gt;nasm&lt;/b&gt;:  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;nasm -f elf64 hello.asm
ld -s -o hello hello.o&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some further reading: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.cs.up.ac.za/programming/asm/derick_tut/&quot;&gt;&lt;a href=&quot;http://docs.cs.up.ac.za/programming/asm/derick_tut/&quot;&gt;http://docs.cs.up.ac.za/programming/asm/derick_tut/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://software.intel.com/en-us/articles/introduction-to-x64-assembly/&quot;&gt;&lt;a href=&quot;http://software.intel.com/en-us/articles/introduction-to-x64-assembly/&quot;&gt;http://software.intel.com/en-us/articles/introduction-to-x64-assembly/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Core *nix Cheatsheets</title>
   <link href="http://tuttlem.github.io/2012/11/17/core-nix-cheatsheets/"/>
   <updated>2012-11-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/17/core-nix-cheatsheets</id>
   <content type="html">&lt;p&gt;Here&amp;#39;s a bookmark set (3 links) that have all got me out of trouble from time to time. If times and spaces were a little different around home here, I&amp;#39;d probably have these printed out and pinned to the wall.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GNU Coreutils Cheat Sheet &lt;a href=&quot;http://www.catonmat.net/download/gnu-coreutils-cheat-sheet.pdf&quot; target=&quot;_blank&quot;&gt;&lt;a href=&quot;http://www.catonmat.net/download/gnu-coreutils-cheat-sheet.pdf&quot;&gt;http://www.catonmat.net/download/gnu-coreutils-cheat-sheet.pdf&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Util-Linux Cheat Sheet &lt;a href=&quot;http://www.catonmat.net/download/util-linux-cheat-sheet.pdf&quot; target=&quot;_blank&quot;&gt;&lt;a href=&quot;http://www.catonmat.net/download/util-linux-cheat-sheet.pdf&quot;&gt;http://www.catonmat.net/download/util-linux-cheat-sheet.pdf&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bash Redirections Cheat Sheet &lt;a href=&quot;http://www.catonmat.net/download/bash-redirections-cheat-sheet.pdf&quot;&gt;&lt;a href=&quot;http://www.catonmat.net/download/bash-redirections-cheat-sheet.pdf&quot;&gt;http://www.catonmat.net/download/bash-redirections-cheat-sheet.pdf&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Art for Programmers</title>
   <link href="http://tuttlem.github.io/2012/11/17/art-for-programmers/"/>
   <updated>2012-11-17T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/17/art-for-programmers</id>
   <content type="html">&lt;p&gt;Yet another productivity killer for any non-creative programmer trying to make a game is art.&lt;/p&gt;

&lt;p&gt;So, the next time this is a problem - I&amp;#39;ll be going here: &lt;a href=&quot;http://letsmakegames.org/resources/art-assets-for-game-developers/&quot;&gt;&lt;a href=&quot;http://letsmakegames.org/resources/art-assets-for-game-developers/&quot;&gt;http://letsmakegames.org/resources/art-assets-for-game-developers/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just came across this icon set as well: &lt;a href=&quot;http://adamwhitcroft.com/batch/&quot;&gt;&lt;a href=&quot;http://adamwhitcroft.com/batch/&quot;&gt;http://adamwhitcroft.com/batch/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>UniVerse development cheatsheet</title>
   <link href="http://tuttlem.github.io/2012/11/16/universe-development-cheatsheet/"/>
   <updated>2012-11-16T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/16/universe-development-cheatsheet</id>
   <content type="html">&lt;p&gt;A cheatsheet of UniVerse commands&lt;/p&gt;

&lt;h3 id=&quot;command-prompt&quot;&gt;Command Prompt&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th style=&quot;text-align: right&quot;&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Quitting the session&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;QUIT&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logging off a session&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;LO&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Breaking out into a shell&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;SH&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Change to a different account&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;LOGTO accountname&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Start online help&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;HELP commandname&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Execute a UniVerse BASIC command&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;XEQ command&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Echo a string out to screen&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;DISPLAY string&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;command-stack&quot;&gt;Command Stack&lt;/h3&gt;

&lt;p&gt;All of the items with an &lt;em&gt;&amp;quot;n&amp;quot;&lt;/em&gt; in their execution can either be removed (to operate on the most recent item) or replaced with a number indicating the item in the stack the operation is to effect. &lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th style=&quot;text-align: right&quot;&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Viewing your command history&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;.L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Executing a command from the stack&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;.Xn&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Delete an item from the stack&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;.Dn&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Recall an older command to the head of the stack&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;.Rn&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Change a string in a command on the stack&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;.Cn/oldstring/newstring&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Change all occurences of a string in a command on the stack&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;.Cn/oldstring/newstring/G&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Appending something to the end of a command on the stack&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;.An extra&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;files&quot;&gt;Files&lt;/h3&gt;

&lt;p&gt;Creating a new file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;CREATE.FILE filename filetype other&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Filenames should be uppercase with words divided by periods (.)&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;File type&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1 &amp;amp; 19&lt;/td&gt;
&lt;td&gt;directory&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Keys end with numbers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Keys end mainly with numbers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Keys end with letters.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Keys end with full range of ASCII characters.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Keys begin with numbers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Keys begin mainly with numbers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Keys begin with letters.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Keys begin with full range of ASCII characters.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Keys are numbers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Keys are mainly numbers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Keys are letters.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Keys are full range of ASCII characters.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Entire keys are numbers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Entire keys are mainly numbers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Entire keys are letters.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Entire keys are full range of ASCII characters.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Entire keys are of arbitrary form.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;dynamic&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;other&lt;/code&gt; depends on the filetype being created Creating a new directory file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;CREATE.FILE filename 1
CREATE.FILE filename 19&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Creating a new static file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;CREATE.FILE filename (2-18) modulo separation&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;modulo&lt;/code&gt; is the number of groups the file has. 
&lt;code&gt;separation&lt;/code&gt; is the number of 512 bytes disk frames are allocated to each group &lt;/p&gt;

&lt;p&gt;Maintaining a file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;RESIZE filename newtype newmodulo newseparation&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Creating a dynamic file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;CREATE.FILE filename 30&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Copy a file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;COPY FROM sourcefile TO destfile ALL OVERWRITING&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;editing-records&quot;&gt;Editing Records&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th style=&quot;text-align: right&quot;&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Invoking the Editor&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;ED filename recordkey&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Display a pageful of the record&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;P&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Qutting a record&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Inserting lines&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;I&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Moving between lines&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;n&lt;/code&gt;    (move to line n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;+n&lt;/code&gt;   (move forward n lines)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;-n&lt;/code&gt;   (move backward n lines)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;t&lt;/code&gt;    (move to top)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;b&lt;/code&gt;    (move to bottom)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Changing lines (/G for global)&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;C/oldstring/newstring/G&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Undo&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;OOPS&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Appending to a line&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;A extra-string&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Breaking a line&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;B word-to-break-on&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Concatenating lines&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;CAT&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deleting lines&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Duplicating lines&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;DUP&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Locating and finding&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;L something&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;F something&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Setting editing blocks&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;  (sets the starting block)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;  (sets the ending block)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Copy, move or drop blocks&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;COPY&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;MOVE&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;DROP&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Saving your record&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;SAVE&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;editor-macros&quot;&gt;Editor Macros&lt;/h3&gt;

&lt;p&gt;Creating a new ED macro                                &lt;/p&gt;

&lt;p&gt;&lt;code&gt;@FILE&lt;/code&gt; variable can be used to be the existing file being edited. &lt;code&gt;@ID&lt;/code&gt; variable can be used to be the key of the current record being edited. Example usage of &lt;code&gt;@FILE&lt;/code&gt; and &lt;code&gt;@ID&lt;/code&gt; within a macro&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;gt; ED &amp;amp;ED&amp;amp; MACRONAME                 
----: I
0001= E
0002= SAVE
0003= XEQ BASIC @FILE @ID
0004= XEQ RUN @FILE @ID
0005=&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-voc-file&quot;&gt;The VOC File&lt;/h3&gt;

&lt;p&gt;Creating a verb (command word)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;gt; ED VOC verbname
----: I
0001= V
0002= programname
0003= type
0004=&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All verbs start with a V. The name of the program to execute is specified by the second line. The type of the program is specified on the third line. Possible options are:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Letter&lt;/th&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;UniVerse Basic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;C shell script&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;DOS batch file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;External&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;Internal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;Primitive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Q&lt;/td&gt;
&lt;td&gt;Query command&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;Bourne sheel script&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;Operating system command&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Creating a keyword (parameter or modified applied to verbs)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;gt; ED VOC keywordname
----: I
0001= K
0002= value
0003= verbcommand (optional)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Keywords start with a K. Their second parameter is the value that gets substituted for the word. Creating a paragraph (script)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;gt; ED VOC paragraphname
----: I
0001= PA
0002= script ....
0003= script ....&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Paragraphs start with PA, then continue to define the script itself. For variables that are unknown at runtime the &amp;lt;&amp;lt;...&amp;gt;&amp;gt; syntax can be used to prompt the user inline for the value. Creating a sentence (a one line paragraph)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;gt; ED VOC sentencename
----: I
0001= PA
0002= script ....&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Creating a file pointer&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;gt; ED VOC filename
----: I
0001= F
0002= directoryname
0003= filename&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Creating a qpointer&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;gt; ED VOC synonymname
----: I
0001= Q
0002= (space)
0003= filename&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Creating a remote command&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;gt; ED VOC remotecommandname
----: I
0001= R
0002= filename that contains the command record
0003= key of the command record&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;dictionaries&quot;&gt;Dictionaries&lt;/h3&gt;

&lt;p&gt;A description of common fields for a dictionary record&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Conversion&lt;/td&gt;
&lt;td&gt;Blank unless a conversion is required. e.g. D DMY[2,A3,4] would store 1 for 01 JAN 1968&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Column Header&lt;/td&gt;
&lt;td&gt;Title that appears at the head of the column&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Format&lt;/td&gt;
&lt;td&gt;The number of characters to display and alignment. 10R - 10 characters, right aligned.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;10T - 10 characters, text aligned. 10L - 10 characters, left aligned.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single or Multi&lt;/td&gt;
&lt;td&gt;S for single value, M for multi-value&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Creating a data field&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;gt; ED DICT filename fieldname
----: I
0001= D Description of the field
0002= field number
0003= conversion
0004= header
0005= format
0006= single or multi&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Creating an imaginary field&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;gt; ED DICT filename fieldname
----: I
0001= I Description of the field
0002= formula
0003= conversion
0004= header
0005= format
0006= single or multi&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Creating a phrase field&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;gt; ED DICT filename fieldname
----: I
0001= PH Description of the field
0002= fieldnames&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;indexing-fields&quot;&gt;Indexing Fields&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Creating an index&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CREATE.INDEX filename fieldname&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bringing an index up to date&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BUILD.INDEX filename fieldname&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Checking indexes on a file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST.INDEX filename fieldname/ALL&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Removing an index from a file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DELETE.INDEX filename fieldname&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;retrieve&quot;&gt;RetrieVe&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A basic list&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST filename&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Listing fields&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST filename field1 field2 field3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sorting by fields&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST filename field1 field2 BY field3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST filename field1 BY field2 BY field3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST filename field1 field2 BY.DSND field3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SORT filename BY field1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sampling a list&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST filename SAMPLE n&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Listing with criteria&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST filename field1 field2 WITH field3 = &amp;#39;data&amp;#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Totalling a field&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST filename field1 field2 TOTAL field3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Setting a breakpoint&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST filename BREAK.ON field1 field2 field3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Summarising a report&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST filename BREAK.ON field1 field2 DET.SUP&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Providing headers and footers&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST filename field1 field2 field3 HEADING &amp;quot;report heading&amp;quot; FOOTING &amp;quot;report footing&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Overriding existing dictionary definitions&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST filename field1 FMT &amp;quot;override format&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST filename field1 CONV &amp;quot;new conversion&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST filename field1 COL.HDG &amp;quot;new heading&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST filename field1 SINGLE.VALUE&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST filename field1 MULTI.VALUE&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Columns without dictionary entries&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LIST filename EVAL &amp;quot;formula&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;criteria&quot;&gt;Criteria&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Synonyms&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;EQ&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;#&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;gt;;&amp;lt;&lt;/code&gt;,&lt;code&gt;NE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Not equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GT&lt;/code&gt;, &lt;code&gt;AFTER&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Greater than&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LT&lt;/code&gt;, &lt;code&gt;BEFORE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lesser than&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;, &lt;code&gt;GE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Greater than or equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;lt;&lt;/code&gt;, &lt;code&gt;LE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lesser than or equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LIKE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;MATCHES&lt;/code&gt;, &lt;code&gt;MATCHING&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Finds a matching word (... is a wildcard)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNLIKE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NOT.MATCHING&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Finds not matching word (... is a wildcard)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPOKEN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SAID&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Phonetic matching&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Criteria can be reversed with NOT and concatenated with AND or OR. &lt;/p&gt;

&lt;h3 id=&quot;select-lists&quot;&gt;Select Lists&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Creating a select list&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT filename&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Numbered select lists&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT filename TO n&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Saving a select list&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SELECT filename&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SAVE.LIST listname FROM n&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Getting a saved list&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GET.LIST listname TO n&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clearing a list&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CLEARSELECT n&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;tcl-commands&quot;&gt;TCL Commands&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Count the records in a file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;COUNT filename&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Copy a record to the terminal (display a record)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CT filename record&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Copy a record to the printer&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CP filename record&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Copy records to another file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;COPY FROM sourcefile TO destfile record1 record2 record3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;COPY FROM sourcefile TO destfile ALL&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Change the name of a file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CNAME oldname TO newname&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Change the key of a record in a file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CNAME filename oldrecord, newrecord&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Swap the contents of two records&lt;/td&gt;
&lt;td&gt;&lt;code&gt;EXCHANGE filename record1 record2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Delete records from a file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DELETE filename record1 record2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remove all records from a file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CLEAR.FILE filename&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clear the terminal&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CS&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mannyneira.com/universe/&quot;&gt;life, the universe, and everything&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>UniVerse BASIC cheatsheet</title>
   <link href="http://tuttlem.github.io/2012/11/16/universe-basic-cheatsheet/"/>
   <updated>2012-11-16T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/16/universe-basic-cheatsheet</id>
   <content type="html">&lt;p&gt;A cheatsheet for writing UniVerse BASIC programs&lt;/p&gt;

&lt;h3 id=&quot;program-management&quot;&gt;Program Management&lt;/h3&gt;

&lt;p&gt;Creating a directory for programs&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;gt; CREATE.FILE BP 19&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Creating a file to store a program&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;gt; ED BP PROGRAM.NAME&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Compiling a program&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;gt; BASIC BP PROGRAM.NAME&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Running a program&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;gt; RUN BP PROGRAM.NAME&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;sourcecode-editing&quot;&gt;Sourcecode Editing&lt;/h3&gt;

&lt;p&gt;Formatting sourcecode&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;----: FORMAT&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;file-io&quot;&gt;File IO&lt;/h3&gt;

&lt;p&gt;Opening a file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;0001= OPEN &amp;#39;filename&amp;#39; TO FILE.VAR ELSE STOP &amp;quot;Couldn&amp;#39;t open filename&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Reading a record from a file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;0001= READ RECORD.VAR FROM FILE.VAR, &amp;#39;RELLEVEL&amp;#39; ELSE RECORD.VALUE = &amp;#39;&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Writing a record to a file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;0001= WRITE RECORD.VAR TO FILE.VAR, &amp;#39;TEST.WRITE&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Reading a record from a file into an array&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;0001= MATREAD RECORD.VAR FROM FILE.VAR, &amp;#39;RELLEVEL&amp;#39; ELSE MAT RECORD.VAR = &amp;#39;&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Writing a record from an array into a file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;0001= MATWRITE RECORD.VAR TO FILE.VAR, &amp;#39;TEST.WRITE&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Reading a single field from a file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;0001= READV TYPE.DESC FROM FILE.VAR, &amp;#39;RELLEVEL&amp;#39;, 1 ELSE TYPE.DESC = &amp;#39;&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Writing a single field to a file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;0001= WRITEV TYPE.DESC TO FILE.VAR, &amp;#39;TEST.WRITE&amp;#39;, 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Deleting a record from a file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;0001= DELETE FILE.VAR, &amp;#39;RELLEVEL&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Locking records for update&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;0000= READU RECORD.VAR FROM FILE.VAR, &amp;#39;RELLEVEL&amp;#39; LOCKED 
0000= MATREADU RECORD.VAR FROM FILE.VAR, &amp;#39;RELLEVEL&amp;#39; LOCKED 
0000= READVU TYPE.DESC FROM FILE.VAR, &amp;#39;RELLEVEL&amp;#39; LOCKED&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Locking records from read&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;0000= READL RECORD.VAR FROM FILE.VAR, &amp;#39;RELLEVEL&amp;#39; 
0000= MATREADL RECORD.VAR FROM FILE.VAR, &amp;#39;RELLEVEL&amp;#39; 
0000= READVL TYPE.DESC FROM FILE.VAR, &amp;#39;RELLEVEL&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;An example record read&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;0001= OPEN &amp;#39;VOC&amp;#39; TO VOC.FILE ELSE STOP &amp;quot;Can&amp;#39;t open VOC&amp;quot; 
0002= READ VOC.RECORD FROM VOC.FILE, &amp;#39;RELLEVEL&amp;#39; ELSE VOC.RECORD = &amp;#39;&amp;#39; 
0003= PRINT VOC.RECORD&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;An example record read to an array&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;0001= DIM VOC.RECORD(10) 
0002= OPEN &amp;#39;VOC&amp;#39; TO VOC.FILE ELSE STOP &amp;quot;Can&amp;#39;t open VOC&amp;quot; 
0003= MATREAD VOC.RECORD FROM VOC.FILE, &amp;#39;RELLEVEL&amp;#39; ELSE MAT VOC.RECORD = &amp;#39;&amp;#39; 
0004= FOR FIELD.NUMBER = 1 TO 10 
0005= PRINT VOC.RECORD(FIELD.NUMBER) 
0006= NEXT FIELD.NUMBER&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;An example record read from a select list&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;0001= OPEN &amp;#39;VOC&amp;#39; TO VOC.FILE ELSE STOP &amp;quot;Can&amp;#39;t open VOC&amp;quot; 
0002= EOF = 0 
0003= EXECUTE &amp;#39;SELECT VOC WITH TYPE = &amp;quot;M&amp;quot;&amp;#39; 
0004= LOOP 
0005= READNEXT VOC.KEY ELSE EOF = 1 
0006= UNTIL EOF 
0007= PRINT VOC.KEY 
0008= REPEAT&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;References&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mannyneira.com/universe/&quot;&gt;life, the universe, and everything&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ripping Discs at the Console</title>
   <link href="http://tuttlem.github.io/2012/11/16/ripping-discs-at-the-console/"/>
   <updated>2012-11-16T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/16/ripping-discs-at-the-console</id>
   <content type="html">&lt;p&gt;A &lt;em&gt;very brief&lt;/em&gt; guide to ripping DVD media at the console with &lt;strong&gt;handbrake&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Rip a disc with the normal preset&lt;/span&gt;
HandBrakeCLI -i /dev/dvd -o output.mp4 --preset&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Normal --main-feature  

&lt;span class=&quot;c&quot;&gt;# Scan a disc for chapter data&lt;/span&gt;
HandBrakeCLI -i /dev/dvd -t &amp;lt;chapter&amp;gt; --scan

&lt;span class=&quot;c&quot;&gt;# Rip a specific chapter&lt;/span&gt;
HandBrakeCLI -i /dev/dvd -o output.mp4 --preset&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Normal -t &amp;lt;chapter&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Rails 3 Cheatsheet</title>
   <link href="http://tuttlem.github.io/2012/11/16/rails-3-cheatsheet/"/>
   <updated>2012-11-16T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/16/rails-3-cheatsheet</id>
   <content type="html">&lt;p&gt;A cheatsheet of Rails 3 commands once all of the software infrastructure has been setup and is running.&lt;/p&gt;

&lt;h3 id=&quot;creating-and-destroying-things&quot;&gt;Creating and destroying things&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create a new application&lt;/span&gt;
rails new ApplicationName

&lt;span class=&quot;c&quot;&gt;# Create a new model&lt;/span&gt;
rails generate/g model ModelName

&lt;span class=&quot;c&quot;&gt;# Create a new controller&lt;/span&gt;
rails generate/g controller ControllerName

&lt;span class=&quot;c&quot;&gt;# Create a new migration&lt;/span&gt;
rails generate/g migration MigrationName

&lt;span class=&quot;c&quot;&gt;# Create a scaffolded controller, model and view &lt;/span&gt;
rails generate/g scaffold ModelName ControllerName

&lt;span class=&quot;c&quot;&gt;# Destroy a new model&lt;/span&gt;
rails destroy model ModelName

&lt;span class=&quot;c&quot;&gt;# Destroy a new controller&lt;/span&gt;
rails destroy controller ControllerName

&lt;span class=&quot;c&quot;&gt;# Destroy a new migration&lt;/span&gt;
rails destroy migration MigrationName&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;controlling-the-application&quot;&gt;Controlling the application&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Start the rails server&lt;/span&gt;
rails server/s

&lt;span class=&quot;c&quot;&gt;# Install a plugin&lt;/span&gt;
rails plugin install PluginName

&lt;span class=&quot;c&quot;&gt;# Start the rails console&lt;/span&gt;
rails console/c

&lt;span class=&quot;c&quot;&gt;# Start the database console&lt;/span&gt;
rails dbconsole/db

&lt;span class=&quot;c&quot;&gt;# Benchmark/Profile the application&lt;/span&gt;
rails performance&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;manage-the-database&quot;&gt;Manage the database&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create the database&lt;/span&gt;
rake db:create

&lt;span class=&quot;c&quot;&gt;# Drop the database  &lt;/span&gt;
rake db:drop

&lt;span class=&quot;c&quot;&gt;# Migrate the database&lt;/span&gt;
rake db:migrate

&lt;span class=&quot;c&quot;&gt;# Drop and recreate database from schema&lt;/span&gt;
rake db:reset

&lt;span class=&quot;c&quot;&gt;# Rollback the latest migration&lt;/span&gt;
rake db:rollback

&lt;span class=&quot;c&quot;&gt;# Create the schema file&lt;/span&gt;
rake db:schema:dump

&lt;span class=&quot;c&quot;&gt;# Create a sessions migration&lt;/span&gt;
rake db:sessions:create&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;utility-tasks&quot;&gt;Utility tasks&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Build the RDOC html files&lt;/span&gt;
rake doc:app

&lt;span class=&quot;c&quot;&gt;# List all available tasks&lt;/span&gt;
rake –tasks

&lt;span class=&quot;c&quot;&gt;# Truncate log files&lt;/span&gt;
rake log:clear

&lt;span class=&quot;c&quot;&gt;# Clear session, cache and socket files&lt;/span&gt;
rake tmp:clear

&lt;span class=&quot;c&quot;&gt;# Print out all defined application routes&lt;/span&gt;
rake routes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;testing-your-application&quot;&gt;Testing your application&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Run all tests&lt;/span&gt;
rake &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Run functional tests&lt;/span&gt;
rake &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;:functionals

&lt;span class=&quot;c&quot;&gt;# Run integration tests&lt;/span&gt;
rake &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;:integration

&lt;span class=&quot;c&quot;&gt;# Run unit tests&lt;/span&gt;
rake &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;:units&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;working-with-gems&quot;&gt;Working with Gems&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Lock this application&amp;#39;s gem set&lt;/span&gt;
rake rails:freeze:gems

&lt;span class=&quot;c&quot;&gt;# List dependent gems&lt;/span&gt;
rake gems

&lt;span class=&quot;c&quot;&gt;# Install all required gems&lt;/span&gt;
rake gems:install

&lt;span class=&quot;c&quot;&gt;# List all installed gems &lt;/span&gt;
gem list

&lt;span class=&quot;c&quot;&gt;# Install a gem&lt;/span&gt;
gem install GemName

&lt;span class=&quot;c&quot;&gt;# Uninstall a gem&lt;/span&gt;
gem uninstall GemName

&lt;span class=&quot;c&quot;&gt;# Start the gem server&lt;/span&gt;
gem server&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing UniVerse 10.3 (Personal Edition) on CentOS 6.3 amd64</title>
   <link href="http://tuttlem.github.io/2012/11/16/installing-universe-10-3-personal-edition-on-centos-6-3-amd64/"/>
   <updated>2012-11-16T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/16/installing-universe-10-3-personal-edition-on-centos-6-3-amd64</id>
   <content type="html">&lt;p&gt;A guide for installing the &lt;strong&gt;UniVerse&lt;/strong&gt; database system on a &lt;strong&gt;RedHat&lt;/strong&gt; flavored distribution.&lt;/p&gt;

&lt;h3 id=&quot;installation-pre-requisites&quot;&gt;Installation Pre-requisites&lt;/h3&gt;

&lt;p&gt;As the database server is being installed to a 64bit system, some 32bit libraries are required for the installation to succeed.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;yum install glibc.i686 libstdc++.so.6 pam.i686&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;running-the-installer&quot;&gt;Running the installer&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Unpack the database installation into a temporary location.&lt;/span&gt;
unzip uvpe_rhlinux_10.3.3.zip

&lt;span class=&quot;c&quot;&gt;# Extract the uv.load script out of the archive&lt;/span&gt;
cpio -ivcBdum uv.load &amp;lt; ./STARTUP

&lt;span class=&quot;c&quot;&gt;# Set the date on the system to satisfy licensing requirements&lt;/span&gt;
date -s 1/1/2009

&lt;span class=&quot;c&quot;&gt;# Run the uv.load script&lt;/span&gt;
./uv.load&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  

&lt;h3 id=&quot;completing-the-installation&quot;&gt;Completing the installation&lt;/h3&gt;

&lt;p&gt;Select the first option from the first menu:  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;1) Make &amp;#39;root&amp;#39; the default owner and administrator of uniVerse.  
The current installation continues uninterrupted.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;p&gt;On the second menu, change the rewind and no-rewind tape names to the location of the installation files.  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;4) Rewind tape name          /tmp/uvpe  
5) No-rewind tape name        /tmp/uvpe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;h3 id=&quot;starting-the-rpc-daemon&quot;&gt;Starting the RPC daemon&lt;/h3&gt;

&lt;p&gt;Before attempting to start the RPC daemon from within the uv environment, an entry for the service itself needs to be added to the &lt;em&gt;/etc/services&lt;/em&gt; file   &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;uvrpc 31438/tcp # uvNet rpc port&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/services&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;Installing UniVerse on CentOS 6.2&lt;br /&gt;&lt;a href=&quot;http://u2tech.wordpress.com/2012/07/08/installing-universe-centos-6-2/&quot;&gt;&lt;a href=&quot;http://u2tech.wordpress.com/2012/07/08/installing-universe-centos-6-2/&quot;&gt;http://u2tech.wordpress.com/2012/07/08/installing-universe-centos-6-2/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Burning Discs at the Console</title>
   <link href="http://tuttlem.github.io/2012/11/16/burning-discs-at-the-console/"/>
   <updated>2012-11-16T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/16/burning-discs-at-the-console</id>
   <content type="html">&lt;p&gt;A &lt;em&gt;very short &lt;/em&gt;guide to burning CD and DVD media at the console with &lt;strong&gt;growisofs&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;control&quot;&gt;Control&lt;/h3&gt;

&lt;p&gt;Ejecting the drive&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;eject&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  

&lt;p&gt;Retracting the drive &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;eject -T&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;burning&quot;&gt;Burning&lt;/h3&gt;

&lt;p&gt;Burn the contents of a directory  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;growisofs -dvd-compat -Z /dev/dvd -R -J -pad &lt;span class=&quot;s2&quot;&gt;&amp;quot;/path/to/data&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Burn the contents of multiple directories  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;growisofs -dvd-compat -Z /dev/dvd -R -J -pad -graft-points &lt;span class=&quot;s2&quot;&gt;&amp;quot;/foo=/path/to/foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/chu=/path/to/chu&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Burn an ISO to a disc&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;growisofs -dvd-compat -Z /dev/dvd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/image.iso&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;rw-burning&quot;&gt;RW Burning&lt;/h3&gt;

&lt;p&gt;Formatting a RW disc for burning  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;dvd+rw-format -force /dev/dvd&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Appending data to a RW disc  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;growisofs -dvd-compat -M /dev/dvd -R -J -pad -graft-points &lt;span class=&quot;s2&quot;&gt;&amp;quot;/foo=/path/to/additional/data&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Web Application Development with Flask</title>
   <link href="http://tuttlem.github.io/2012/11/15/web-application-development-with-flask/"/>
   <updated>2012-11-15T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/15/web-application-development-with-flask</id>
   <content type="html">&lt;p&gt;A brief guide to developing web applications with the python micro-framework, &lt;strong&gt;Flask&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h3&gt;

&lt;p&gt;The following units need to be installed prior to using this framework:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  python&lt;/li&gt;
&lt;li&gt;  pip&lt;/li&gt;
&lt;li&gt;  virtualenv&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;using-flask&quot;&gt;Using Flask&lt;/h3&gt;

&lt;p&gt;Create the project folder, setup python environment&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;mkdir projname  
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;projname 
virtualenv env&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From now on, activate the environment from within the project folder with this command:  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;. env/bin/activate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;install-flask&quot;&gt;Install Flask&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;pip install Flask&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Flask website&lt;/em&gt;&lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;&lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;http://flask.pocoo.org/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>FreeBSD 9.0 installation on a T400</title>
   <link href="http://tuttlem.github.io/2012/11/15/freebsd-9-0-installation-on-a-t400/"/>
   <updated>2012-11-15T00:00:00+10:00</updated>
   <id>http://tuttlem.github.io/2012/11/15/freebsd-9-0-installation-on-a-t400</id>
   <content type="html">&lt;p&gt;From time to time, FreeBSD has made its way onto my T400. Each time I do it, I never jot down what I did to get it to &amp;quot;work&amp;quot;. Here&amp;#39;s just a few thoughts and basic guide for installing FreeBSD RELEASE-9.0 on a Lenovo ThinkPad T400.&lt;/p&gt;

&lt;h3 id=&quot;bios&quot;&gt;BIOS&lt;/h3&gt;

&lt;p&gt;The T400&amp;#39;s graphics mode needs to be switched from &amp;quot;Discreet&amp;quot; back to &amp;quot;Integrated&amp;quot;, otherwise the BSD installation process just continually reboots. The laptop will now allow a standard installation to be performed.&lt;/p&gt;

&lt;h3 id=&quot;post-installation&quot;&gt;Post Installation&lt;/h3&gt;

&lt;p&gt;First things first. Stop the PC Speaker barking at you when you do something questionable (disable by adding this to &lt;em&gt;/etc/sysctl.conf&lt;/em&gt;)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;hw.syscons.bell=0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some switches required for connection resilience need to be applied to the WiFi configuration (fix by commenting these lines from &lt;em&gt;/etc/wpa_supplicant.conf&lt;/em&gt;)  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;# eapol_version=2  
# ap_scan=1  
# fast_reauth=1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;WiFi network entry should look as follows  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;network={  
    ssid=&amp;quot;tuttle&amp;quot;  
    key_mgmt=WPA-PSK  
    psk=&amp;quot;secret-in-here&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add the full hostname to &lt;em&gt;/etc/rc.conf&lt;/em&gt;  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;hostname=&amp;quot;thor.local&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Get the proc filesystem mounted at boot by adding the following line to &lt;em&gt;/etc/fstab&lt;/em&gt;  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;proc   /proc  procfs  rw  0   0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;organising-the-ports-collection&quot;&gt;Organising the ports collection&lt;/h3&gt;

&lt;p&gt;In the interest of making the ports collection as &amp;quot;fresh&amp;quot; as possible, it&amp;#39;s best to remove the installed version and pull down the latest version over the web.&lt;/p&gt;

&lt;p&gt;Remove the existing ports collection&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/ports
rm -Rf *&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Refresh the ports collection from an australian mirror. You can find full instructions &lt;a href=&quot;http://www.freebsd.org/doc/handbook/ports-using.html&quot;&gt;here&lt;/a&gt; on this.   &lt;strong&gt;Fetch&lt;/strong&gt; the collection into /var/db/portsnap &lt;strong&gt;Extract&lt;/strong&gt; the collection into /usr/ports    &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;portsnap fetch
portsnap extract&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From now on, to refresh ports just use the following command &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;portsnap update&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Any port needed for installation is done with the following commands  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/ports/path/to/port  
make install clean&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;bash&lt;/strong&gt; (&lt;em&gt;/usr/ports/shells/bash&lt;/em&gt;)  &lt;/p&gt;

&lt;p&gt;Set bash as the default shell for users by running the following  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;pw usermod user_name -s /path/to/bash&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;sudo&lt;/strong&gt; (&lt;em&gt;/usr/ports/security/sudo&lt;/em&gt;)  &lt;/p&gt;

&lt;p&gt;Setup user groups who can sudo by editing the config  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;visudo -f /usr/local/etc/sudoers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Uncomment the line allowing the wheel group  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;%wheel ALL=(ALL) ALL&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add users who want to sudo to the wheel group  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;pw usermod user_name -G wheel&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Other pieces of software to make your environment feel more like home&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;vim&lt;/strong&gt; (&lt;em&gt;/usr/ports/editors/vim-lite&lt;/em&gt;) &lt;br /&gt;
&lt;strong&gt;git&lt;/strong&gt; (&lt;em&gt;/usr/ports/devel/git&lt;/em&gt;)  &lt;br /&gt;
&lt;strong&gt;xorg&lt;/strong&gt; (&lt;em&gt;/usr/ports/x11/xorg&lt;/em&gt;)  &lt;br /&gt;
&lt;strong&gt;xfce&lt;/strong&gt; (&lt;em&gt;/usr/ports/wm/xfce4&lt;/em&gt;)  &lt;br /&gt;
&lt;strong&gt;gnome-keyring&lt;/strong&gt; (&lt;em&gt;/usr/ports/security/gnome-keyring&lt;/em&gt;)  &lt;br /&gt;
&lt;strong&gt;gnome-power-manager&lt;/strong&gt; (&lt;em&gt;/usr/ports/sysutils/gnome-power-manager&lt;/em&gt;)  &lt;br /&gt;
&lt;strong&gt;chrome&lt;/strong&gt; (&lt;em&gt;/usr/ports/www/chromium&lt;/em&gt;)  &lt;br /&gt;
&lt;strong&gt;pidgin&lt;/strong&gt; (&lt;em&gt;/usr/ports/net-im/pidgin&lt;/em&gt;)  &lt;br /&gt;
&lt;strong&gt;irssi&lt;/strong&gt; (&lt;em&gt;/usr/ports/irc/irssi&lt;/em&gt;)  &lt;br /&gt;
&lt;strong&gt;evince&lt;/strong&gt; (&lt;em&gt;/usr/ports/graphics/evince&lt;/em&gt;) &lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;preferences&quot;&gt;Preferences&lt;/h3&gt;

&lt;p&gt;Set colourised output on ls by adding the following line to &lt;em&gt;~/.bash_profile&lt;/em&gt; &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ls -G&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Get bash_profile to execute bashrc if it exists by adding the following line towards the top to &lt;em&gt;bash_profile&lt;/em&gt; &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; -f ~/.bashrc &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; . ~/.bashrc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;dbus&lt;/strong&gt; and &lt;strong&gt;hald&lt;/strong&gt; need to be started at boot time if a mouse/keyboard is going to be used within X. To get these to start, add the following lines to the /etc/rc.conf file  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;dbus_enable=&amp;quot;YES&amp;quot;
hald_enable=&amp;quot;YES&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Both of the above config lines can be removed if using a login manager (like &lt;strong&gt;gdm&lt;/strong&gt;). All the needs to be added in this scenario is  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;gnome_enable=&amp;quot;YES&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Automatically mount any samba shares at boot by adding lines like the following to &lt;em&gt;/etc/fstab&lt;/em&gt; &lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;gt;&amp;gt; //user@server/share  /mountpoint  smbfs  rw,-N,-Iserver  0  0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With -N specified in the above fstab entry, any secrets needed to connect to the share need to be put into the &lt;em&gt;~/.nsmbrc&lt;/em&gt; file and should look as follows  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;[SERVER:USER]  
password=secret&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Tread with caution here:&lt;/strong&gt; I&amp;#39;ve just rolled back authentication for the samba shares as FreeBSD&amp;#39;s mount_smbfs doesn&amp;#39;t contain a _netdev option which will delay mounting the remote share until the network is available. Not being able to do this makes the BSD boot fail with authentication errors.  &lt;/p&gt;

&lt;h3 id=&quot;shutdown&quot;&gt;Shutdown&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo shutdown -h now&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 

</feed>
